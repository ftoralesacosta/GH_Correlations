
;; Function virtual const char* TApplicationImp::ApplicationName() const (_ZNK15TApplicationImp15ApplicationNameEv, funcdef_no=7139, decl_uid=112468, cgraph_uid=3387)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 64 uninteresting
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r64: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r64,l0) best DIREG, allocno GENERAL_REGS
    r62: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r62,l0) best AREG, allocno GENERAL_REGS

  a0(r62,l0) costs: AREG:-1000,-1000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:31070,31070 SSE_REGS:31070,31070 MMX_REGS:31070,31070 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:31070,31070 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:8560,8560
  a1(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:44070,44070 SSE_REGS:44070,44070 MMX_REGS:44070,44070 FP_TOP_SSE_REGS:93093650,93093650 FP_SECOND_SSE_REGS:93093650,93093650 FLOAT_SSE_REGS:93093650,93093650 FLOAT_INT_REGS:93093650,93093650 INT_SSE_REGS:44070,44070 FLOAT_INT_SSE_REGS:93093650,93093650 ALL_REGS:93093650,93093650 MEM:13560,13560

   Insn 34(l0): point = 0
   Insn 31(l0): point = 2
   Insn 17(l0): point = 5
   Insn 14(l0): point = 8
   Insn 37(l0): point = 10
   Insn 24(l0): point = 12
   Insn 2(l0): point = 14
 a0(r62): [8..12] [3..5]
 a1(r64): [6..14]
Compressing live ranges: from 17 to 4 - 23%
Ranges after the compression:
 a0(r62): [0..3]
 a1(r64): [2..3]
+++Allocating 16 bytes for conflict table (uncompressed size 16)
;; a0(r62,l0) conflicts: a1(r64,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r64,l0) conflicts: a0(r62,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=5, points=4
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 4 3 2
    all: 0r62 1r64
    modified regnos: 62 64
    border:
    Pressure: GENERAL_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@56240
      Allocno a0r62 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a1r64 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a0(r62,l0)(cost 0)
      Pushing a1(r64,l0)(cost 0)
      Popping a1(r64,l0)  -- assign reg 5
      Popping a0(r62,l0)  -- assign reg 0
Disposition:
    0:r62  l0     0    1:r64  l0     5
New iteration of spill/restore move
+++Costs: overall -6000, reg -6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual const char* TApplicationImp::ApplicationName() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 17[flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,4u} r16={1d,3u} r17={2d,1u} r20={1d,4u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r62={2d,1u} r64={1d,4u} 
;;    total ref usage 49{25d,24u,0e} in 12{12 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 64
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/f:DI 64 [ this ])
        (reg:DI 5 di [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(note 3 2 7 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 7 3 8 2 (var_location:DI D#12 (plus:DI (reg/f:DI 64 [ this ])
        (const_int 8 [0x8]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:41 -1
     (nil))
(debug_insn 8 7 9 2 (var_location:DI this (debug_expr:DI D#12)) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:41 -1
     (nil))
(debug_insn 9 8 10 2 (var_location:DI this (debug_expr:DI D#12)) -1
     (nil))
(debug_insn 10 9 11 2 (var_location:DI this (debug_expr:DI D#12)) -1
     (nil))
(note 11 10 12 2 NOTE_INSN_DELETED)
(note 12 11 24 2 NOTE_INSN_DELETED)
(insn 24 12 37 2 (parallel [
            (set (reg/f:DI 62 [ iftmp.4 ])
                (plus:DI (reg/f:DI 64 [ this ])
                    (const_int 17 [0x11])))
            (clobber (reg:CC 17 flags))
        ]) /usr/common/usg/software/ROOT/6.08.00/include/root/TString.h:237 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 37 24 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:QI (mem/j:QI (plus:DI (reg/f:DI 64 [ this ])
                        (const_int 16 [0x10])) [0 MEM[(const struct TString *)this_1(D) + 8B].fRep.D.77406.fShort.fSize+0 S1 A64])
                (const_int 1 [0x1]))
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TString.h:237 391 {*testqi_1_maybe_si}
     (nil))
(jump_insn 14 37 15 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) /usr/common/usg/software/ROOT/6.08.00/include/root/TString.h:237 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil)))
 -> 25)
;;  succ:       3 [39.0%]  (FALLTHRU)
;;              4 [61.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 64

;; basic block 3, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [39.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u12(6){ }u13(7){ }u14(16){ }u15(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64
;; lr  def 	 62
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 16 15 17 3 (var_location:DI this (debug_expr:DI D#12)) -1
     (nil))
(insn 17 16 25 3 (set (reg/f:DI 62 [ iftmp.4 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 64 [ this ])
                (const_int 24 [0x18])) [0 MEM[(const struct TString *)this_1(D) + 8B].fRep.D.77406.fLong.fData+0 S8 A64])) /usr/common/usg/software/ROOT/6.08.00/include/root/TString.h:233 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 64 [ this ])
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       3 [100.0%]  (FALLTHRU)
;;              2 [61.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u17(6){ }u18(7){ }u19(16){ }u20(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62
;; lr  def 	 0 [ax]
(code_label 25 17 26 4 3 "" [1 uses])
(note 26 25 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 26 34 4 (set (reg/i:DI 0 ax)
        (reg/f:DI 62 [ iftmp.4 ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 62 [ iftmp.4 ])
        (nil)))
(insn 34 31 0 4 (use (reg/i:DI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:41 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TApplicationImp::Show() (_ZN15TApplicationImp4ShowEv, funcdef_no=7140, decl_uid=112470, cgraph_uid=3388)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TApplicationImp::Show()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TApplicationImp::Hide() (_ZN15TApplicationImp4HideEv, funcdef_no=7141, decl_uid=112472, cgraph_uid=3389)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TApplicationImp::Hide()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TApplicationImp::Iconify() (_ZN15TApplicationImp7IconifyEv, funcdef_no=7142, decl_uid=112474, cgraph_uid=3390)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TApplicationImp::Iconify()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual Bool_t TApplicationImp::IsCmdThread() (_ZN15TApplicationImp11IsCmdThreadEv, funcdef_no=7143, decl_uid=112476, cgraph_uid=3391)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual Bool_t TApplicationImp::IsCmdThread()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{20d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 3 13 2 (set (reg/i:QI 0 ax)
        (const_int 1 [0x1])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:45 91 {*movqi_internal}
     (nil))
(insn 13 10 0 2 (use (reg/i:QI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:45 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TApplicationImp::Init() (_ZN15TApplicationImp4InitEv, funcdef_no=7144, decl_uid=112478, cgraph_uid=3392)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TApplicationImp::Init()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TApplicationImp::Open() (_ZN15TApplicationImp4OpenEv, funcdef_no=7145, decl_uid=112480, cgraph_uid=3393)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TApplicationImp::Open()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TApplicationImp::Raise() (_ZN15TApplicationImp5RaiseEv, funcdef_no=7146, decl_uid=112482, cgraph_uid=3394)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TApplicationImp::Raise()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TApplicationImp::Lower() (_ZN15TApplicationImp5LowerEv, funcdef_no=7147, decl_uid=112484, cgraph_uid=3395)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TApplicationImp::Lower()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual Int_t TApplicationImp::ExecCommand(TGWin32Command*, Bool_t) (_ZN15TApplicationImp11ExecCommandEP14TGWin32Commandb, funcdef_no=7157, decl_uid=112488, cgraph_uid=3405)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 16(l0): point = 0
   Insn 13(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual Int_t TApplicationImp::ExecCommand(TGWin32Command*, Bool_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{20d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 7 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 6 16 2 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:57 89 {*movsi_internal}
     (nil))
(insn 16 13 0 2 (use (reg/i:SI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:57 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::Lock() (_ZN10TCanvasImp4LockEv, funcdef_no=7412, decl_uid=117322, cgraph_uid=3734)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::Lock()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::Unlock() (_ZN10TCanvasImp6UnlockEv, funcdef_no=7413, decl_uid=117324, cgraph_uid=3735)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::Unlock()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual Bool_t TCanvasImp::IsLocked() (_ZN10TCanvasImp8IsLockedEv, funcdef_no=7414, decl_uid=117326, cgraph_uid=3736)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual Bool_t TCanvasImp::IsLocked()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{20d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 3 13 2 (set (reg/i:QI 0 ax)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:45 91 {*movqi_internal}
     (nil))
(insn 13 10 0 2 (use (reg/i:QI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:45 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function TCanvasImp::~TCanvasImp() (_ZN10TCanvasImpD2Ev, funcdef_no=7419, decl_uid=117483, cgraph_uid=3741)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59 uninteresting
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r59,l0) best DIREG, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:66535000,66535000 FP_SECOND_SSE_REGS:66535000,66535000 FLOAT_SSE_REGS:66535000,66535000 FLOAT_INT_REGS:66535000,66535000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:66535000,66535000 ALL_REGS:66535000,66535000 MEM:8000,8000

   Insn 6(l0): point = 0
   Insn 2(l0): point = 2
 a0(r59): [1..2]
Compressing live ranges: from 5 to 2 - 40%
Ranges after the compression:
 a0(r59): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r59,l0) conflicts:  regions=1, blocks=3, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59
    modified regnos: 59
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@22000
      Allocno a0r59 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a0(r59,l0)(cost 0)
      Popping a0(r59,l0)  -- assign reg 5
Disposition:
    0:r59  l0     5
New iteration of spill/restore move
+++Costs: overall -3000, reg -3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


TCanvasImp::~TCanvasImp()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r59={1d,1u} 
;;    total ref usage 29{20d,9u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 59 [ this ])
        (reg:DI 5 di [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:51 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/f/j:DI (reg/f:DI 59 [ this ]) [0 this_2(D)->_vptr.TCanvasImp+0 S8 A64])
        (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV10TCanvasImp")  <var_decl 0x2b94caccb1c8 _ZTV10TCanvasImp>)
                (const_int 16 [0x10])))) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:51 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 59 [ this ])
        (nil)))
(debug_insn 7 6 0 2 (var_location <L0> (clobber (const_int 0 [0]))) -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::Close() (_ZN10TCanvasImp5CloseEv, funcdef_no=7423, decl_uid=117350, cgraph_uid=3745)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::Close()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::ForceUpdate() (_ZN10TCanvasImp11ForceUpdateEv, funcdef_no=7424, decl_uid=117352, cgraph_uid=3746)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::ForceUpdate()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::Iconify() (_ZN10TCanvasImp7IconifyEv, funcdef_no=7425, decl_uid=117360, cgraph_uid=3747)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::Iconify()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual Int_t TCanvasImp::InitWindow() (_ZN10TCanvasImp10InitWindowEv, funcdef_no=7426, decl_uid=117362, cgraph_uid=3748)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual Int_t TCanvasImp::InitWindow()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{20d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 3 13 2 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:58 89 {*movsi_internal}
     (nil))
(insn 13 10 0 2 (use (reg/i:SI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:58 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::Show() (_ZN10TCanvasImp4ShowEv, funcdef_no=7427, decl_uid=117383, cgraph_uid=3749)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::Show()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual Bool_t TCanvasImp::HasEditor() const (_ZNK10TCanvasImp9HasEditorEv, funcdef_no=7428, decl_uid=117404, cgraph_uid=3750)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual Bool_t TCanvasImp::HasEditor() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{20d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 3 13 2 (set (reg/i:QI 0 ax)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:74 91 {*movqi_internal}
     (nil))
(insn 13 10 0 2 (use (reg/i:QI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:74 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual Bool_t TCanvasImp::HasMenuBar() const (_ZNK10TCanvasImp10HasMenuBarEv, funcdef_no=7429, decl_uid=117406, cgraph_uid=3751)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual Bool_t TCanvasImp::HasMenuBar() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{20d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 3 13 2 (set (reg/i:QI 0 ax)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:75 91 {*movqi_internal}
     (nil))
(insn 13 10 0 2 (use (reg/i:QI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:75 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual Bool_t TCanvasImp::HasStatusBar() const (_ZNK10TCanvasImp12HasStatusBarEv, funcdef_no=7430, decl_uid=117408, cgraph_uid=3752)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual Bool_t TCanvasImp::HasStatusBar() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{20d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 3 13 2 (set (reg/i:QI 0 ax)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:76 91 {*movqi_internal}
     (nil))
(insn 13 10 0 2 (use (reg/i:QI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:76 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual Bool_t TCanvasImp::HasToolBar() const (_ZNK10TCanvasImp10HasToolBarEv, funcdef_no=7431, decl_uid=117410, cgraph_uid=3753)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual Bool_t TCanvasImp::HasToolBar() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{20d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 3 13 2 (set (reg/i:QI 0 ax)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:77 91 {*movqi_internal}
     (nil))
(insn 13 10 0 2 (use (reg/i:QI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:77 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual Bool_t TCanvasImp::HasToolTips() const (_ZNK10TCanvasImp11HasToolTipsEv, funcdef_no=7432, decl_uid=117412, cgraph_uid=3754)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual Bool_t TCanvasImp::HasToolTips() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{20d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 3 13 2 (set (reg/i:QI 0 ax)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:78 91 {*movqi_internal}
     (nil))
(insn 13 10 0 2 (use (reg/i:QI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:78 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual UInt_t TCanvasImp::GetWindowGeometry(Int_t&, Int_t&, UInt_t&, UInt_t&) (_ZN10TCanvasImp17GetWindowGeometryERiS0_RjS1_, funcdef_no=7445, decl_uid=117358, cgraph_uid=3767)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 62: local to bb 2 def dominates all uses has unique first use
Reg 63: local to bb 2 def dominates all uses has unique first use
Found def insn 3 for 61 to be not moveable
Found def insn 4 for 62 to be not moveable
Found def insn 5 for 63 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r63: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r63,l0) best CREG, allocno GENERAL_REGS
    r62: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r62,l0) best DREG, allocno GENERAL_REGS
    r61: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r61,l0) best SIREG, allocno GENERAL_REGS

  a0(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:66535000,66535000 FP_SECOND_SSE_REGS:66535000,66535000 FLOAT_SSE_REGS:66535000,66535000 FLOAT_INT_REGS:66535000,66535000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:66535000,66535000 ALL_REGS:66535000,66535000 MEM:8000,8000
  a1(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:66535000,66535000 FP_SECOND_SSE_REGS:66535000,66535000 FLOAT_SSE_REGS:66535000,66535000 FLOAT_INT_REGS:66535000,66535000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:66535000,66535000 ALL_REGS:66535000,66535000 MEM:8000,8000
  a2(r62,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:66535000,66535000 FP_SECOND_SSE_REGS:66535000,66535000 FLOAT_SSE_REGS:66535000,66535000 FLOAT_INT_REGS:66535000,66535000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:66535000,66535000 ALL_REGS:66535000,66535000 MEM:8000,8000

   Insn 21(l0): point = 0
   Insn 18(l0): point = 2
   Insn 13(l0): point = 4
   Insn 12(l0): point = 6
   Insn 11(l0): point = 8
   Insn 10(l0): point = 10
   Insn 5(l0): point = 12
   Insn 4(l0): point = 14
   Insn 3(l0): point = 16
 a0(r63): [5..12]
 a1(r61): [9..16]
 a2(r62): [11..14]
Compressing live ranges: from 19 to 2 - 10%
Ranges after the compression:
 a0(r63): [0..1]
 a1(r61): [0..1]
 a2(r62): [0..1]
+++Allocating 24 bytes for conflict table (uncompressed size 24)
;; a0(r63,l0) conflicts: a1(r61,l0) a2(r62,l0)
;;     total conflict hard regs: 37
;;     conflict hard regs: 37

;; a1(r61,l0) conflicts: a0(r63,l0) a2(r62,l0)
;;     total conflict hard regs: 1 2 37
;;     conflict hard regs: 1 2 37

;; a2(r62,l0) conflicts: a0(r63,l0) a1(r61,l0)
;;     total conflict hard regs: 2 37
;;     conflict hard regs: 2 37

  regions=1, blocks=3, points=2
    allocnos=3 (big 0), copies=0, conflicts=0, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r63 1r61 2r62
    modified regnos: 61 62 63
    border:
    Pressure: GENERAL_REGS=4
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 38-44)@22000
          2:( 0 1 3-6 38-44)@22000
            3:( 0 3-6 38-44)@22000
      Allocno a0r63 of GENERAL_REGS(15) has 14 avail. regs  0-6 38-44, node:  0-6 38-44 (confl regs =  7-37 45-51)
      Allocno a1r61 of GENERAL_REGS(15) has 12 avail. regs  0 3-6 38-44, node:  0 3-6 38-44 (confl regs =  1 2 7-37 45-51)
      Allocno a2r62 of GENERAL_REGS(15) has 13 avail. regs  0 1 3-6 38-44, node:  0 1 3-6 38-44 (confl regs =  2 7-37 45-51)
      Pushing a0(r63,l0)(cost 0)
      Pushing a2(r62,l0)(cost 0)
      Pushing a1(r61,l0)(cost 0)
      Popping a1(r61,l0)  -- assign reg 4
      Popping a2(r62,l0)  -- assign reg 1
      Popping a0(r63,l0)  -- assign reg 2
Disposition:
    1:r61  l0     4    2:r62  l0     1    0:r63  l0     2
New iteration of spill/restore move
+++Costs: overall -9000, reg -9000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual UInt_t TCanvasImp::GetWindowGeometry(Int_t&, Int_t&, UInt_t&, UInt_t&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 37[r8]
;;  ref usage 	r0={2d,2u} r1={1d,1u} r2={1d,1u} r4={1d,1u} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d} r61={1d,1u} r62={1d,1u} r63={1d,1u} 
;;    total ref usage 39{23d,16u,0e} in 9{9 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 61 62 63
(note 8 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 3 8 4 2 (set (reg/v/f:DI 61 [ x ])
        (reg:DI 4 si [ x ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:86 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ x ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 62 [ y ])
        (reg:DI 1 dx [ y ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:86 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ y ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 63 [ w ])
        (reg:DI 2 cx [ w ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:86 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ w ])
        (nil)))
(note 6 5 7 2 NOTE_INSN_DELETED)
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem:SI (reg/v/f:DI 62 [ y ]) [0 *y_2(D)+0 S4 A32])
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:86 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 62 [ y ])
        (nil)))
(insn 11 10 12 2 (set (mem:SI (reg/v/f:DI 61 [ x ]) [0 *x_4(D)+0 S4 A32])
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:86 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ x ])
        (nil)))
(insn 12 11 13 2 (set (mem:SI (reg:DI 37 r8 [ h ]) [0 *h_6(D)+0 S4 A32])
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:86 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ h ])
        (nil)))
(insn 13 12 18 2 (set (mem:SI (reg/v/f:DI 63 [ w ]) [0 *w_8(D)+0 S4 A32])
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:86 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 63 [ w ])
        (nil)))
(insn 18 13 21 2 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:86 89 {*movsi_internal}
     (nil))
(insn 21 18 0 2 (use (reg/i:SI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:86 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::SetStatusText(const char*, Int_t) (_ZN10TCanvasImp13SetStatusTextEPKci, funcdef_no=7446, decl_uid=117366, cgraph_uid=3768)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::SetStatusText(const char*, Int_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::SetWindowPosition(Int_t, Int_t) (_ZN10TCanvasImp17SetWindowPositionEii, funcdef_no=7447, decl_uid=117370, cgraph_uid=3769)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::SetWindowPosition(Int_t, Int_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::SetWindowSize(UInt_t, UInt_t) (_ZN10TCanvasImp13SetWindowSizeEjj, funcdef_no=7448, decl_uid=117374, cgraph_uid=3770)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::SetWindowSize(UInt_t, UInt_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::SetWindowTitle(const char*) (_ZN10TCanvasImp14SetWindowTitleEPKc, funcdef_no=7449, decl_uid=117377, cgraph_uid=3771)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::SetWindowTitle(const char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::SetCanvasSize(UInt_t, UInt_t) (_ZN10TCanvasImp13SetCanvasSizeEjj, funcdef_no=7450, decl_uid=117381, cgraph_uid=3772)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::SetCanvasSize(UInt_t, UInt_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::ShowMenuBar(Bool_t) (_ZN10TCanvasImp11ShowMenuBarEb, funcdef_no=7451, decl_uid=117386, cgraph_uid=3773)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::ShowMenuBar(Bool_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::ShowStatusBar(Bool_t) (_ZN10TCanvasImp13ShowStatusBarEb, funcdef_no=7452, decl_uid=117389, cgraph_uid=3774)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::ShowStatusBar(Bool_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::RaiseWindow() (_ZN10TCanvasImp11RaiseWindowEv, funcdef_no=7453, decl_uid=117391, cgraph_uid=3775)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::RaiseWindow()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::ReallyDelete() (_ZN10TCanvasImp12ReallyDeleteEv, funcdef_no=7454, decl_uid=117393, cgraph_uid=3776)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::ReallyDelete()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::ShowEditor(Bool_t) (_ZN10TCanvasImp10ShowEditorEb, funcdef_no=7455, decl_uid=117396, cgraph_uid=3777)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::ShowEditor(Bool_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::ShowToolBar(Bool_t) (_ZN10TCanvasImp11ShowToolBarEb, funcdef_no=7456, decl_uid=117399, cgraph_uid=3778)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::ShowToolBar(Bool_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::ShowToolTips(Bool_t) (_ZN10TCanvasImp12ShowToolTipsEb, funcdef_no=7457, decl_uid=117402, cgraph_uid=3779)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)
  regions=1, blocks=3, points=0
    allocnos=0 (big 0), copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure:
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::ShowToolTips(Bool_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r20={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 26{19d,7u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual TCanvasImp::~TCanvasImp() (_ZN10TCanvasImpD0Ev, funcdef_no=7421, decl_uid=117477, cgraph_uid=3743)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59 uninteresting
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r59: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r59,l0) best DIREG, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:11000,11000

   Insn 11(l0): point = 0
   Insn 10(l0): point = 2
   Insn 7(l0): point = 4
   Insn 2(l0): point = 6
 a0(r59): [3..6]
Compressing live ranges: from 9 to 2 - 22%
Ranges after the compression:
 a0(r59): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r59,l0) conflicts:  regions=1, blocks=3, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59
    modified regnos: 59
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@34000
      Allocno a0r59 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a0(r59,l0)(cost 0)
      Popping a0(r59,l0)  -- assign reg 5
Disposition:
    0:r59  l0     5
New iteration of spill/restore move
+++Costs: overall -6000, reg -6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual TCanvasImp::~TCanvasImp()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5[di] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,3u} 
;;    total ref usage 78{65d,13u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 59 [ this ])
        (reg:DI 5 di [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:51 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 6 3 7 2 (var_location:DI this (reg/f:DI 59 [ this ])) -1
     (nil))
(insn 7 6 8 2 (set (mem/f/j:DI (reg/f:DI 59 [ this ]) [0 this_2(D)->_vptr.TCanvasImp+0 S8 A64])
        (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV10TCanvasImp")  <var_decl 0x2b94caccb1c8 _ZTV10TCanvasImp>)
                (const_int 16 [0x10])))) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:51 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 8 7 9 2 (var_location <L0> (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 9 8 10 2 (var_location <L0> (clobber (const_int 0 [0]))) -1
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg/f:DI 59 [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:51 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 59 [ this ])
        (nil)))
(call_insn 11 10 0 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x2b94c3b33a00 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:51 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual TClass* TApplicationImp::IsA() const (_ZNK15TApplicationImp3IsAEv, funcdef_no=7149, decl_uid=112495, cgraph_uid=3397)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59 uninteresting
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r59,l0) best AREG, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:-2000,-2000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000

   Insn 15(l0): point = 0
   Insn 12(l0): point = 2
   Insn 7(l0): point = 4
   Insn 6(l0): point = 6
 a0(r59): [3..4]
Compressing live ranges: from 9 to 2 - 22%
Ranges after the compression:
 a0(r59): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r59,l0) conflicts:  regions=1, blocks=3, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59
    modified regnos: 59
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a0(r59,l0)(cost 0)
      Popping a0(r59,l0)  -- assign reg 0
Disposition:
    0:r59  l0     0
New iteration of spill/restore move
+++Costs: overall -6000, reg -6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual TClass* TApplicationImp::IsA() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 7[sp]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r4={2d} r5={2d} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} 
;;    total ref usage 77{65d,12u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN15TApplicationImp5ClassEv") [flags 0x41]  <function_decl 0x2b94ca918600 Class>) [0 Class S1 A8])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 672 {*call_value}
     (nil)
    (nil))
(insn 7 6 12 2 (set (reg/f:DI 59 [ D.158372 ])
        (reg:DI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 12 7 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 59 [ D.158372 ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 59 [ D.158372 ])
        (nil)))
(insn 15 12 0 2 (use (reg/i:DI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TApplicationImp::ShowMembers(TMemberInspector&) const (_ZNK15TApplicationImp11ShowMembersER16TMemberInspector, funcdef_no=7150, decl_uid=112498, cgraph_uid=3398)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 59: local to bb 2 def dominates all uses has unique first use
Found def insn 8 for 59 to be not moveable
Found def insn 2 for 60 to be not moveable
Found def insn 3 for 61 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r61,l0) best DREG, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r60,l0) best SIREG, allocno GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r59,l0) best AREG, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:-1000,-1000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000

   Insn 12(l0): point = 0
   Insn 11(l0): point = 2
   Insn 10(l0): point = 4
   Insn 9(l0): point = 6
   Insn 8(l0): point = 8
   Insn 7(l0): point = 10
   Insn 3(l0): point = 12
   Insn 2(l0): point = 14
 a0(r59): [3..8]
 a1(r60): [5..14]
 a2(r61): [7..12]
Compressing live ranges: from 17 to 2 - 11%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
+++Allocating 24 bytes for conflict table (uncompressed size 24)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0)
;;     total conflict hard regs: 1 4
;;     conflict hard regs: 1 4

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

  regions=1, blocks=3, points=2
    allocnos=3 (big 0), copies=0, conflicts=0, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61
    modified regnos: 59 60 61
    border:
    Pressure: GENERAL_REGS=3
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0 2 3 5 6 37-44)@20000
          2:( 3 6 41-44)@28000
      Allocno a0r59 of GENERAL_REGS(15) has 13 avail. regs  0 2 3 5 6 37-44, node:  0 2 3 5 6 37-44 (confl regs =  1 4 7-36 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Pushing a0(r59,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Popping a1(r60,l0)  -- assign reg 3
      Popping a2(r61,l0)  -- assign reg 6
      Popping a0(r59,l0)  -- assign reg 0
Disposition:
    0:r59  l0     0    1:r60  l0     3    2:r61  l0     6
New iteration of spill/restore move
+++Costs: overall -3000, reg -3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TApplicationImp::ShowMembers(TMemberInspector&) const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={3d,1u} r1={4d,1u} r2={3d} r4={4d,2u} r5={4d,2u} r6={1d,2u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,1u} r17={2d} r18={2d} r19={2d} r20={1d,2u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r59={1d,1u} r60={1d,1u} r61={1d,1u} 
;;    total ref usage 131{113d,18u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/f:DI 60 [ this ])
        (reg:DI 5 di [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 61 [ insp ])
        (reg:DI 4 si [ insp ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ insp ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 7 4 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN15TApplicationImp5ClassEv") [flags 0x41]  <function_decl 0x2b94ca918600 Class>) [0 Class S1 A8])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 672 {*call_value}
     (nil)
    (nil))
(insn 8 7 9 2 (set (reg/f:DI 59 [ D.158374 ])
        (reg:DI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 9 8 10 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ insp ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ insp ])
        (nil)))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg/f:DI 60 [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 60 [ this ])
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/f:DI 59 [ D.158374 ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 59 [ D.158374 ])
        (nil)))
(call_insn 12 11 0 2 (call (mem:QI (symbol_ref:DI ("_ZN4ROOT17Class_ShowMembersEP6TClassPKvR16TMemberInspector") [flags 0x41]  <function_decl 0x2b94c656f800 Class_ShowMembers>) [0 Class_ShowMembers S1 A8])
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TApplicationImp.h:52 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual TClass* TCanvasImp::IsA() const (_ZNK10TCanvasImp3IsAEv, funcdef_no=7434, decl_uid=117419, cgraph_uid=3756)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 59 uninteresting
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r59,l0) best AREG, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:-2000,-2000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000

   Insn 15(l0): point = 0
   Insn 12(l0): point = 2
   Insn 7(l0): point = 4
   Insn 6(l0): point = 6
 a0(r59): [3..4]
Compressing live ranges: from 9 to 2 - 22%
Ranges after the compression:
 a0(r59): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r59,l0) conflicts:  regions=1, blocks=3, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59
    modified regnos: 59
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@26000
      Allocno a0r59 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a0(r59,l0)(cost 0)
      Popping a0(r59,l0)  -- assign reg 0
Disposition:
    0:r59  l0     0
New iteration of spill/restore move
+++Costs: overall -6000, reg -6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual TClass* TCanvasImp::IsA() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 7[sp]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r4={2d} r5={2d} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d} r20={1d,2u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r59={1d,1u} 
;;    total ref usage 77{65d,12u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN10TCanvasImp5ClassEv") [flags 0x41]  <function_decl 0x2b94cacc4000 Class>) [0 Class S1 A8])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 672 {*call_value}
     (nil)
    (nil))
(insn 7 6 12 2 (set (reg/f:DI 59 [ D.158376 ])
        (reg:DI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 12 7 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 59 [ D.158376 ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 59 [ D.158376 ])
        (nil)))
(insn 15 12 0 2 (use (reg/i:DI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function virtual void TCanvasImp::ShowMembers(TMemberInspector&) const (_ZNK10TCanvasImp11ShowMembersER16TMemberInspector, funcdef_no=7435, decl_uid=117422, cgraph_uid=3757)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 60: local to bb 2 def dominates all uses has unique first use
Reg 61: local to bb 2 def dominates all uses has unique first use
Reg 59: local to bb 2 def dominates all uses has unique first use
Found def insn 8 for 59 to be not moveable
Found def insn 2 for 60 to be not moveable
Found def insn 3 for 61 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r61: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r61,l0) best DREG, allocno GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r60,l0) best SIREG, allocno GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r59,l0) best AREG, allocno GENERAL_REGS

  a0(r59,l0) costs: AREG:-1000,-1000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a2(r61,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000

   Insn 12(l0): point = 0
   Insn 11(l0): point = 2
   Insn 10(l0): point = 4
   Insn 9(l0): point = 6
   Insn 8(l0): point = 8
   Insn 7(l0): point = 10
   Insn 3(l0): point = 12
   Insn 2(l0): point = 14
 a0(r59): [3..8]
 a1(r60): [5..14]
 a2(r61): [7..12]
Compressing live ranges: from 17 to 2 - 11%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r60): [0..1]
 a2(r61): [0..1]
+++Allocating 24 bytes for conflict table (uncompressed size 24)
;; a0(r59,l0) conflicts: a1(r60,l0) a2(r61,l0)
;;     total conflict hard regs: 1 4
;;     conflict hard regs: 1 4

;; a1(r60,l0) conflicts: a0(r59,l0) a2(r61,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a2(r61,l0) conflicts: a0(r59,l0) a1(r60,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

  regions=1, blocks=3, points=2
    allocnos=3 (big 0), copies=0, conflicts=0, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59 1r60 2r61
    modified regnos: 59 60 61
    border:
    Pressure: GENERAL_REGS=3
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0 2 3 5 6 37-44)@20000
          2:( 3 6 41-44)@28000
      Allocno a0r59 of GENERAL_REGS(15) has 13 avail. regs  0 2 3 5 6 37-44, node:  0 2 3 5 6 37-44 (confl regs =  1 4 7-36 45-51)
      Allocno a1r60 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a2r61 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Pushing a0(r59,l0)(cost 0)
      Pushing a2(r61,l0)(cost 0)
      Pushing a1(r60,l0)(cost 0)
      Popping a1(r60,l0)  -- assign reg 3
      Popping a2(r61,l0)  -- assign reg 6
      Popping a0(r59,l0)  -- assign reg 0
Disposition:
    0:r59  l0     0    1:r60  l0     3    2:r61  l0     6
New iteration of spill/restore move
+++Costs: overall -3000, reg -3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


virtual void TCanvasImp::ShowMembers(TMemberInspector&) const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={3d,1u} r1={4d,1u} r2={3d} r4={4d,2u} r5={4d,2u} r6={1d,2u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,1u} r17={2d} r18={2d} r19={2d} r20={1d,2u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r59={1d,1u} r60={1d,1u} r61={1d,1u} 
;;    total ref usage 131{113d,18u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/f:DI 60 [ this ])
        (reg:DI 5 di [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 61 [ insp ])
        (reg:DI 4 si [ insp ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ insp ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 7 4 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN10TCanvasImp5ClassEv") [flags 0x41]  <function_decl 0x2b94cacc4000 Class>) [0 Class S1 A8])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 672 {*call_value}
     (nil)
    (nil))
(insn 8 7 9 2 (set (reg/f:DI 59 [ D.158378 ])
        (reg:DI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 9 8 10 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 61 [ insp ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 61 [ insp ])
        (nil)))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg/f:DI 60 [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 60 [ this ])
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/f:DI 59 [ D.158378 ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 59 [ D.158378 ])
        (nil)))
(call_insn 12 11 0 2 (call (mem:QI (symbol_ref:DI ("_ZN4ROOT17Class_ShowMembersEP6TClassPKvR16TMemberInspector") [flags 0x41]  <function_decl 0x2b94c656f800 Class_ShowMembers>) [0 Class_ShowMembers S1 A8])
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TCanvasImp.h:80 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function <built-in> (main._omp_fn.0, funcdef_no=9031, decl_uid=151930, cgraph_uid=5849)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 59 n_edges 95 count 173 (  2.9)
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 64: def dominates all uses has unique first use
Reg 66: def dominates all uses has unique first use
Reg 68: def dominates all uses has unique first use
Reg 71: def dominates all uses has unique first use
Reg 76 uninteresting
Reg 77: local to bb 2 def dominates all uses has unique first use
Reg 78 uninteresting
Reg 79: def dominates all uses has unique first use
Ignoring reg 294, has equiv memory
Ignoring reg 501, has equiv memory
Ignoring reg 502, has equiv memory
Ignoring reg 503, has equiv memory
Reg 85 uninteresting (no unique first use)
Ignoring reg 301, has equiv memory
Reg 87 uninteresting
Reg 302: def dominates all uses has unique first use
Reg 304 uninteresting
Reg 311 uninteresting
Reg 319 uninteresting
Reg 101: def dominates all uses has unique first use
Reg 320: local to bb 10 def dominates all uses has unique first use
Reg 322 uninteresting
Reg 328 uninteresting
Reg 336 uninteresting
Reg 337 uninteresting
Reg 342 uninteresting
Ignoring reg 351, has equiv memory
Ignoring reg 125, has equiv memory
Ignoring reg 352, has equiv memory
Ignoring reg 353, has equiv memory
Ignoring reg 354, has equiv memory
Ignoring reg 356, has equiv memory
Ignoring reg 357, has equiv memory
Ignoring reg 132, has equiv memory
Ignoring reg 358, has equiv memory
Ignoring reg 359, has equiv memory
Ignoring reg 360, has equiv memory
Ignoring reg 362, has equiv memory
Ignoring reg 363, has equiv memory
Ignoring reg 139, has equiv memory
Ignoring reg 364, has equiv memory
Ignoring reg 365, has equiv memory
Ignoring reg 366, has equiv memory
Ignoring reg 368, has equiv memory
Ignoring reg 369, has equiv memory
Ignoring reg 370, has equiv memory
Reg 148 uninteresting
Reg 149 uninteresting
Ignoring reg 371, has equiv memory
Reg 372: local to bb 12 def dominates all uses has unique first use
Reg 374 uninteresting
Reg 373 uninteresting
Ignoring reg 379, has equiv memory
Reg 378 uninteresting
Reg 164 uninteresting
Reg 384 uninteresting
Reg 166 uninteresting
Reg 385 uninteresting
Reg 387 uninteresting
Reg 389 uninteresting
Reg 390 uninteresting
Reg 395 uninteresting
Reg 175: def dominates all uses has unique first use
Reg 397 uninteresting
Ignoring reg 399, has equiv memory
Reg 398 uninteresting
Ignoring reg 401, has equiv memory
Reg 179: local to bb 26 def dominates all uses has unique first use
Reg 404: local to bb 26 def dominates all uses has unique first use
Reg 407 uninteresting
Reg 406 uninteresting
Reg 408 uninteresting
Reg 197: def dominates all uses has unique first use
Ignoring reg 199, has equiv memory
Ignoring reg 410, has equiv memory
Reg 200: def dominates all uses has unique first use
Ignoring reg 411, has equiv memory
Reg 413 uninteresting
Reg 412 uninteresting
Reg 414 uninteresting
Reg 208: local to bb 28 def dominates all uses has unique first use
Reg 416 uninteresting
Reg 209 uninteresting (no unique first use)
Ignoring reg 417, has equiv memory
Ignoring reg 418, has equiv memory
Reg 419 uninteresting
Reg 214 uninteresting (no unique first use)
Reg 421 uninteresting
Reg 422: local to bb 28 def dominates all uses has unique first use
Reg 423 uninteresting
Reg 424 uninteresting
Reg 202: def dominates all uses has unique first use
Ignoring reg 425, has equiv memory
Ignoring reg 426, has equiv memory
Reg 220: def dominates all uses has unique first use
Reg 427 uninteresting
Reg 223 uninteresting
Reg 428 uninteresting
Reg 429 uninteresting
Reg 232 uninteresting
Reg 430 uninteresting
Reg 431 uninteresting
Reg 432: local to bb 41 def dominates all uses has unique first use
Ignoring reg 433, has equiv memory
Reg 434: local to bb 42 def dominates all uses has unique first use
Ignoring reg 435, has equiv memory
Reg 436: local to bb 43 def dominates all uses has unique first use
Ignoring reg 437, has equiv memory
Reg 440 uninteresting
Reg 274 uninteresting
Reg 443: local to bb 44 def dominates all uses has unique first use
Reg 445: local to bb 44 def dominates all uses has unique first use
Reg 449 uninteresting
Reg 261 uninteresting
Reg 452: local to bb 46 def dominates all uses has unique first use
Reg 454: local to bb 46 def dominates all uses has unique first use
Reg 458 uninteresting
Reg 247 uninteresting
Reg 461: local to bb 48 def dominates all uses has unique first use
Reg 463: local to bb 48 def dominates all uses has unique first use
Reg 466 uninteresting
Reg 467: local to bb 49 def dominates all uses has unique first use
Reg 468 uninteresting
Ignoring reg 186, has equiv memory
Ignoring reg 470, has equiv memory
Reg 469: local to bb 52 def dominates all uses has unique first use
Reg 471 uninteresting
Ignoring reg 473, has equiv memory
Reg 472 uninteresting
Reg 476: local to bb 52 def dominates all uses has unique first use
Reg 477 uninteresting
Reg 478 uninteresting
Reg 475 uninteresting
Reg 479: local to bb 53 def dominates all uses has unique first use
Reg 480 uninteresting
Reg 481 uninteresting
Reg 163: def dominates all uses has unique first use
Reg 64 not local to one basic block
Reg 66 not local to one basic block
Reg 68 not local to one basic block
Reg 71 not local to one basic block
Examining insn 24, def for 77
  all ok
Reg 79 not local to one basic block
Reg 101 not local to one basic block
Reg 163 not local to one basic block
Reg 175 not local to one basic block
Examining insn 359, def for 179
  all ok
Reg 197 not local to one basic block
Reg 200 not local to one basic block
Reg 202 not local to one basic block
Found def insn 397 for 208 to be not moveable
Reg 220 not local to one basic block
Reg 302 not local to one basic block
Found def insn 124 for 320 to be not moveable
Examining insn 266, def for 372
  all ok
Found def insn 366 for 404 to be not moveable
Examining insn 413, def for 422
  all ok
Found def insn 488 for 432 to be not moveable
Found def insn 493 for 434 to be not moveable
Found def insn 498 for 436 to be not moveable
Found def insn 513 for 443 to be not moveable
Examining insn 515, def for 445
  all ok and transp
      Creating newreg=506 from oldreg=445
rescanning insn with uid = 515.
deleting insn with uid = 515.
scanning new insn with uid = 728.
Found def insn 536 for 452 to be not moveable
Examining insn 538, def for 454
  all ok and transp
      Creating newreg=507 from oldreg=454
rescanning insn with uid = 538.
deleting insn with uid = 538.
scanning new insn with uid = 729.
Found def insn 559 for 461 to be not moveable
Examining insn 561, def for 463
  all ok and transp
      Creating newreg=508 from oldreg=463
rescanning insn with uid = 561.
deleting insn with uid = 561.
scanning new insn with uid = 730.
Examining insn 576, def for 467
  all ok
Found def insn 595 for 469 to be not moveable
Examining insn 606, def for 476
  all ok
Examining insn 615, def for 479
  all ok
    New r506: setting preferred GENERAL_REGS, alternative ALL_REGS
    New r507: setting preferred GENERAL_REGS, alternative ALL_REGS
    New r508: setting preferred GENERAL_REGS, alternative ALL_REGS
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58
;;
;; Loop 1
;;  header 5, latch 7
;;  depth 1, outer 0
;;  nodes: 5 7 9 16 55 19 18 17 20 21 22 23 24 25 29 49 26 33 32 31 35 34 39 38 37 43 40 44 45 42 47 41 48 46 36 30 28 51 52 27 53 50 56 54 15 14 13 12 11 10 6
;;
;; Loop 2
;;  header 17, latch 18
;;  depth 2, outer 1
;;  nodes: 17 18 20 21 22 23 24 25 29 49 26 33 32 31 35 34 39 38 37 43 40 44 45 42 47 41 48 46 36 30 28 51 52 27 53 50
;;
;; Loop 3
;;  header 31, latch 32
;;  depth 3, outer 2
;;  nodes: 31 32 35 34 39 38 37 43 40 44 45 42 47 41 48 46 36
;;
;; Loop 4
;;  header 37, latch 38
;;  depth 4, outer 3
;;  nodes: 37 38 43 40 44 45 42 47 41 48 46
;; 2 succs { 57 3 }
;; 3 succs { 4 58 }
;; 4 succs { 5 }
;; 5 succs { 9 6 }
;; 6 succs { 10 }
;; 7 succs { 5 8 }
;; 8 succs { 58 }
;; 9 succs { 7 }
;; 10 succs { 9 11 }
;; 11 succs { 9 12 }
;; 12 succs { 9 13 }
;; 13 succs { 9 14 }
;; 14 succs { 54 15 }
;; 15 succs { 55 }
;; 16 succs { 7 }
;; 17 succs { 18 20 }
;; 18 succs { 17 19 }
;; 19 succs { 16 }
;; 20 succs { 18 21 }
;; 21 succs { 18 22 }
;; 22 succs { 18 23 }
;; 23 succs { 18 24 }
;; 24 succs { 18 25 }
;; 25 succs { 18 26 }
;; 26 succs { 27 18 }
;; 27 succs { 51 28 }
;; 28 succs { 49 29 }
;; 29 succs { 30 18 }
;; 30 succs { 31 }
;; 31 succs { 34 32 }
;; 32 succs { 31 33 }
;; 33 succs { 18 }
;; 34 succs { 35 32 }
;; 35 succs { 36 32 }
;; 36 succs { 37 }
;; 37 succs { 40 38 }
;; 38 succs { 37 39 }
;; 39 succs { 32 }
;; 40 succs { 41 38 }
;; 41 succs { 47 42 }
;; 42 succs { 45 43 }
;; 43 succs { 44 38 }
;; 44 succs { 38 }
;; 45 succs { 46 44 }
;; 46 succs { 43 }
;; 47 succs { 48 45 }
;; 48 succs { 42 }
;; 49 succs { 18 50 }
;; 50 succs { 29 }
;; 51 succs { 28 52 }
;; 52 succs { 53 28 }
;; 53 succs { 28 }
;; 54 succs { 55 }
;; 55 succs { 56 16 }
;; 56 succs { 17 }
;; 57 succs { 3 }
;; 58 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 182.
verify found no changes in insn with uid = 195.
verify found no changes in insn with uid = 205.
verify found no changes in insn with uid = 217.
verify found no changes in insn with uid = 227.
verify found no changes in insn with uid = 239.
verify found no changes in insn with uid = 249.
verify found no changes in insn with uid = 252.
verify found no changes in insn with uid = 365.
verify found no changes in insn with uid = 396.
verify found no changes in insn with uid = 520.
verify found no changes in insn with uid = 543.
verify found no changes in insn with uid = 566.
verify found no changes in insn with uid = 619.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 59 n_edges 95 count 173 (  2.9)
init_insns for 125: (insn_list:REG_DEP_TRUE 184 (nil))
init_insns for 132: (insn_list:REG_DEP_TRUE 206 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 228 (nil))
init_insns for 186: (insn_list:REG_DEP_TRUE 586 (nil))
init_insns for 199: (insn_list:REG_DEP_TRUE 386 (nil))
init_insns for 294: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 301: (insn_list:REG_DEP_TRUE 54 (nil))
init_insns for 351: (insn_list:REG_DEP_TRUE 180 (nil))
init_insns for 352: (insn_list:REG_DEP_TRUE 186 (nil))
init_insns for 353: (insn_list:REG_DEP_TRUE 187 (nil))
init_insns for 354: (insn_list:REG_DEP_TRUE 188 (nil))
init_insns for 356: (insn_list:REG_DEP_TRUE 197 (nil))
init_insns for 357: (insn_list:REG_DEP_TRUE 198 (nil))
init_insns for 358: (insn_list:REG_DEP_TRUE 208 (nil))
init_insns for 359: (insn_list:REG_DEP_TRUE 209 (nil))
init_insns for 360: (insn_list:REG_DEP_TRUE 210 (nil))
init_insns for 362: (insn_list:REG_DEP_TRUE 219 (nil))
init_insns for 363: (insn_list:REG_DEP_TRUE 220 (nil))
init_insns for 364: (insn_list:REG_DEP_TRUE 230 (nil))
init_insns for 365: (insn_list:REG_DEP_TRUE 231 (nil))
init_insns for 366: (insn_list:REG_DEP_TRUE 232 (nil))
init_insns for 368: (insn_list:REG_DEP_TRUE 241 (nil))
init_insns for 369: (insn_list:REG_DEP_TRUE 242 (nil))
init_insns for 370: (insn_list:REG_DEP_TRUE 250 (nil))
init_insns for 371: (insn_list:REG_DEP_TRUE 265 (nil))
init_insns for 379: (insn_list:REG_DEP_TRUE 276 (nil))
init_insns for 389: (insn_list:REG_DEP_TRUE 327 (nil))
init_insns for 397: (insn_list:REG_DEP_TRUE 345 (nil))
init_insns for 399: (insn_list:REG_DEP_TRUE 349 (nil))
init_insns for 401: (insn_list:REG_DEP_TRUE 356 (nil))
init_insns for 407: (insn_list:REG_DEP_TRUE 369 (nil))
init_insns for 410: (insn_list:REG_DEP_TRUE 387 (nil))
init_insns for 411: (insn_list:REG_DEP_TRUE 391 (nil))
init_insns for 416: (insn_list:REG_DEP_TRUE 400 (nil))
init_insns for 417: (insn_list:REG_DEP_TRUE 404 (nil))
init_insns for 418: (insn_list:REG_DEP_TRUE 405 (nil))
init_insns for 421: (insn_list:REG_DEP_TRUE 411 (nil))
init_insns for 423: (insn_list:REG_DEP_TRUE 414 (nil))
init_insns for 425: (insn_list:REG_DEP_TRUE 426 (nil))
init_insns for 426: (insn_list:REG_DEP_TRUE 427 (nil))
init_insns for 433: (insn_list:REG_DEP_TRUE 489 (nil))
init_insns for 435: (insn_list:REG_DEP_TRUE 494 (nil))
init_insns for 437: (insn_list:REG_DEP_TRUE 499 (nil))
init_insns for 466: (insn_list:REG_DEP_TRUE 574 (nil))
init_insns for 468: (insn_list:REG_DEP_TRUE 577 (nil))
init_insns for 470: (insn_list:REG_DEP_TRUE 594 (nil))
init_insns for 471: (insn_list:REG_DEP_TRUE 596 (nil))
init_insns for 473: (insn_list:REG_DEP_TRUE 601 (nil))
init_insns for 501: (insn_list:REG_DEP_TRUE 269 (nil))
init_insns for 502: (insn_list:REG_DEP_TRUE 278 (nil))
init_insns for 503: (insn_list:REG_DEP_TRUE 357 (nil))

Pass 0 for finding pseudo/allocno costs

    r508: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a249 (r508,l4) best SSE_REGS, allocno SSE_REGS
    r507: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a257 (r507,l4) best SSE_REGS, allocno SSE_REGS
    r506: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a265 (r506,l4) best SSE_REGS, allocno SSE_REGS
    r503: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a245 (r503,l4) best NO_REGS, allocno NO_REGS
    a210 (r503,l3) best NO_REGS, allocno NO_REGS
    a120 (r503,l2) best NO_REGS, allocno NO_REGS
    a41 (r503,l1) best NO_REGS, allocno NO_REGS
    a12 (r503,l0) best NO_REGS, allocno NO_REGS
    r502: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a244 (r502,l4) best SSE_REGS, allocno SSE_REGS
    a209 (r502,l3) best SSE_REGS, allocno SSE_REGS
    a119 (r502,l2) best SSE_REGS, allocno SSE_REGS
    a40 (r502,l1) best SSE_REGS, allocno SSE_REGS
    a13 (r502,l0) best SSE_REGS, allocno SSE_REGS
    r501: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a243 (r501,l4) best SSE_REGS, allocno SSE_REGS
    a208 (r501,l3) best SSE_REGS, allocno SSE_REGS
    a118 (r501,l2) best SSE_REGS, allocno SSE_REGS
    a39 (r501,l1) best SSE_REGS, allocno SSE_REGS
    a14 (r501,l0) best SSE_REGS, allocno SSE_REGS
    r500: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a242 (r500,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a207 (r500,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a117 (r500,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a42 (r500,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r499: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a241 (r499,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a206 (r499,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a116 (r499,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a43 (r499,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r498: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a240 (r498,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a205 (r498,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a115 (r498,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a44 (r498,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r481: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a121 (r481,l2) best SSE_FIRST_REG, allocno SSE_REGS
    r480: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a122 (r480,l2) best SSE_REGS, allocno SSE_REGS
    r479: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a123 (r479,l2) best SSE_REGS, allocno SSE_REGS
    r478: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a128 (r478,l2) best SSE_REGS, allocno SSE_REGS
    r477: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a129 (r477,l2) best SSE_REGS, allocno SSE_REGS
    r476: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a130 (r476,l2) best SSE_REGS, allocno SSE_REGS
    r475: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a127 (r475,l2) best SSE_REGS, allocno SSE_REGS
    r473: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a133 (r473,l2) best SSE_REGS, allocno SSE_REGS
    r472: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a131 (r472,l2) best SSE_REGS, allocno SSE_REGS
    r471: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a132 (r471,l2) best SSE_REGS, allocno SSE_REGS
    r470: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a135 (r470,l2) best SSE_REGS, allocno SSE_REGS
    r469: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a134 (r469,l2) best SSE_REGS, allocno SSE_REGS
    r468: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a142 (r468,l2) best SSE_REGS, allocno SSE_REGS
    r467: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a141 (r467,l2) best SSE_REGS, allocno SSE_REGS
    r466: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a144 (r466,l2) best SSE_REGS, allocno SSE_REGS
    r465: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a143 (r465,l2) best SSE_REGS, allocno SSE_REGS
    r463: preferred SSE_FIRST_REG, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a248 (r463,l4) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r461: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a246 (r461,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r460: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a250 (r460,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r458: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a251 (r458,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r457: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a252 (r457,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r456: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a253 (r456,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r454: preferred SSE_FIRST_REG, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a256 (r454,l4) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r452: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a254 (r452,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r451: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a258 (r451,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r449: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a259 (r449,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r448: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a260 (r448,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r447: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a261 (r447,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r445: preferred SSE_FIRST_REG, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a264 (r445,l4) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r443: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a262 (r443,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r442: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a266 (r442,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r440: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a267 (r440,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r439: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a268 (r439,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r438: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a269 (r438,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r437: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a271 (r437,l4) best SSE_REGS, allocno SSE_REGS
    r436: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a270 (r436,l4) best SSE_REGS, allocno SSE_REGS
    r435: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a273 (r435,l4) best SSE_REGS, allocno SSE_REGS
    r434: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a272 (r434,l4) best SSE_REGS, allocno SSE_REGS
    r433: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a275 (r433,l4) best SSE_REGS, allocno SSE_REGS
    r432: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a274 (r432,l4) best SSE_REGS, allocno SSE_REGS
    r431: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a276 (r431,l4) best SSE_REGS, allocno SSE_REGS
    r430: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a279 (r430,l4) best SSE_REGS, allocno SSE_REGS
    r429: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a280 (r429,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r428: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a214 (r428,l3) best SSE_REGS, allocno SSE_REGS
    r427: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a217 (r427,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r426: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a219 (r426,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r425: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a218 (r425,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r424: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a147 (r424,l2) best SSE_REGS, allocno SSE_REGS
    r423: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a149 (r423,l2) best SSE_REGS, allocno SSE_REGS
    r422: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a148 (r422,l2) best SSE_REGS, allocno SSE_REGS
    r421: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a151 (r421,l2) best SSE_REGS, allocno SSE_REGS
    r420: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a150 (r420,l2) best SSE_REGS, allocno SSE_REGS
    r419: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a152 (r419,l2) best SSE_REGS, allocno SSE_REGS
    r418: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r418,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r417: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r417,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r416: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a157 (r416,l2) best SSE_REGS, allocno SSE_REGS
    r415: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a155 (r415,l2) best SSE_REGS, allocno SSE_REGS
    r414: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a158 (r414,l2) best SSE_FIRST_REG, allocno SSE_REGS
    r413: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a160 (r413,l2) best SSE_REGS, allocno SSE_REGS
    r412: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a159 (r412,l2) best SSE_REGS, allocno SSE_REGS
    r411: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r411,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r410: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r410,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r408: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a165 (r408,l2) best SSE_REGS, allocno SSE_REGS
    r407: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a168 (r407,l2) best SSE_REGS, allocno SSE_REGS
    r406: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a166 (r406,l2) best SSE_REGS, allocno SSE_REGS
    r404: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a167 (r404,l2) best SSE_FIRST_REG, allocno SSE_REGS
    r401: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a171 (r401,l2) best SSE_REGS, allocno SSE_REGS
    r400: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a170 (r400,l2) best SSE_REGS, allocno SSE_REGS
    r399: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a174 (r399,l2) best SSE_REGS, allocno SSE_REGS
    r398: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a172 (r398,l2) best SSE_REGS, allocno SSE_REGS
    r397: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a175 (r397,l2) best SSE_REGS, allocno SSE_REGS
    r395: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a176 (r395,l2) best SSE_REGS, allocno SSE_REGS
    r394: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a177 (r394,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r393: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r393,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r392: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a178 (r392,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r390: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a180 (r390,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r389: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a182 (r389,l2) best SSE_REGS, allocno SSE_REGS
    r387: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a183 (r387,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r385: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a184 (r385,l2) best SSE_REGS, allocno SSE_REGS
    r384: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a185 (r384,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r382: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a186 (r382,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r380: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a51 (r380,l1) best SSE_REGS, allocno SSE_REGS
    r379: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a54 (r379,l1) best SSE_REGS, allocno SSE_REGS
    r378: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a52 (r378,l1) best SSE_REGS, allocno SSE_REGS
    r375: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a55 (r375,l1) best SSE_REGS, allocno SSE_REGS
    r374: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a58 (r374,l1) best SSE_REGS, allocno SSE_REGS
    r373: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a56 (r373,l1) best SSE_REGS, allocno SSE_REGS
    r372: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a57 (r372,l1) best SSE_REGS, allocno SSE_REGS
    r371: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r371,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r370: preferred DIREG, alternative NO_REGS, allocno DIREG
    a62 (r370,l1) best DIREG, allocno DIREG
    r369: preferred DIREG, alternative NO_REGS, allocno DIREG
    a63 (r369,l1) best DIREG, allocno DIREG
    r368: preferred CREG, alternative NO_REGS, allocno CREG
    a65 (r368,l1) best CREG, allocno CREG
    r366: preferred DIREG, alternative NO_REGS, allocno DIREG
    a66 (r366,l1) best DIREG, allocno DIREG
    r365: preferred DREG, alternative NO_REGS, allocno DREG
    a67 (r365,l1) best DREG, allocno DREG
    r364: preferred CREG, alternative NO_REGS, allocno CREG
    a68 (r364,l1) best CREG, allocno CREG
    r363: preferred DIREG, alternative NO_REGS, allocno DIREG
    a71 (r363,l1) best DIREG, allocno DIREG
    r362: preferred CREG, alternative NO_REGS, allocno CREG
    a73 (r362,l1) best CREG, allocno CREG
    r360: preferred DIREG, alternative NO_REGS, allocno DIREG
    a74 (r360,l1) best DIREG, allocno DIREG
    r359: preferred DREG, alternative NO_REGS, allocno DREG
    a75 (r359,l1) best DREG, allocno DREG
    r358: preferred CREG, alternative NO_REGS, allocno CREG
    a76 (r358,l1) best CREG, allocno CREG
    r357: preferred DIREG, alternative NO_REGS, allocno DIREG
    a78 (r357,l1) best DIREG, allocno DIREG
    r356: preferred CREG, alternative NO_REGS, allocno CREG
    a80 (r356,l1) best CREG, allocno CREG
    r354: preferred DIREG, alternative NO_REGS, allocno DIREG
    a81 (r354,l1) best DIREG, allocno DIREG
    r353: preferred DREG, alternative NO_REGS, allocno DREG
    a82 (r353,l1) best DREG, allocno DREG
    r352: preferred CREG, alternative NO_REGS, allocno CREG
    a83 (r352,l1) best CREG, allocno CREG
    r351: preferred DIREG, alternative NO_REGS, allocno DIREG
    a85 (r351,l1) best DIREG, allocno DIREG
    r350: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a64 (r350,l1) best SIREG, allocno GENERAL_REGS
    r349: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r349,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r348: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r348,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r346: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r346,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r344: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r344,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r342: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r342,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r337,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r336: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a72 (r336,l1) best SIREG, allocno GENERAL_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r332,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r328,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r325,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r322: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r322,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r320,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r319: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a79 (r319,l1) best SIREG, allocno GENERAL_REGS
    r315: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r315,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r311: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r311,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r307,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r304,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r302,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r301,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r299,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r296: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r296,l0) best DREG, allocno GENERAL_REGS
    r295: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r295,l0) best AREG, allocno GENERAL_REGS
    r294: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a27 (r294,l0) best NO_REGS, allocno NO_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r293,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r292: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a239 (r292,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a204 (r292,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a114 (r292,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a38 (r292,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a11 (r292,l0) best DIREG, allocno GENERAL_REGS
    r291: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a124 (r291,l2) best SSE_REGS, allocno SSE_REGS
    r290: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a125 (r290,l2) best SSE_REGS, allocno SSE_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a238 (r282,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a203 (r282,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a113 (r282,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a45 (r282,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a237 (r281,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a202 (r281,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a145 (r281,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a236 (r280,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a211 (r280,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r274: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a263 (r274,l4) best DIREG, allocno GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a235 (r270,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a201 (r270,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a112 (r270,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a37 (r270,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r270,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a255 (r261,l4) best DIREG, allocno GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a234 (r257,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a200 (r257,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a111 (r257,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a36 (r257,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a16 (r257,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a247 (r247,l4) best DIREG, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a233 (r244,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a199 (r244,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a110 (r244,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a35 (r244,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a17 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a278 (r232,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a277 (r231,l4) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a232 (r229,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a212 (r229,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a216 (r223,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a215 (r222,l3) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a213 (r220,l3) best SSE_REGS, allocno SSE_REGS
    r214: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a231 (r214,l4) best SSE_REGS, allocno SSE_REGS
    a198 (r214,l3) best SSE_REGS, allocno SSE_REGS
    a140 (r214,l2) best SSE_REGS, allocno SSE_REGS
    r209: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a230 (r209,l4) best SSE_REGS, allocno SSE_REGS
    a197 (r209,l3) best SSE_REGS, allocno SSE_REGS
    a139 (r209,l2) best SSE_REGS, allocno SSE_REGS
    r208: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a156 (r208,l2) best SSE_FIRST_REG, allocno SSE_REGS
    r202: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a229 (r202,l4) best SSE_REGS, allocno SSE_REGS
    a196 (r202,l3) best SSE_REGS, allocno SSE_REGS
    a146 (r202,l2) best SSE_REGS, allocno SSE_REGS
    r200: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a138 (r200,l2) best SSE_REGS, allocno INT_SSE_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a162 (r199,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a137 (r197,l2) best SSE_REGS, allocno INT_SSE_REGS
    r186: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a136 (r186,l2) best SSE_REGS, allocno SSE_REGS
    r179: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a164 (r179,l2) best SSE_REGS, allocno SSE_REGS
    r175: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a173 (r175,l2) best SSE_REGS, allocno SSE_REGS
    r166: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a169 (r166,l2) best SSE_FIRST_REG, allocno SSE_REGS
    r164: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a181 (r164,l2) best SSE_REGS, allocno SSE_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a228 (r163,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a195 (r163,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a109 (r163,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a46 (r163,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r152,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a53 (r149,l1) best SSE_REGS, allocno SSE_REGS
    r148: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a60 (r148,l1) best SSE_REGS, allocno SSE_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r139,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r132,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r125,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a227 (r115,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a194 (r115,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a108 (r115,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a50 (r115,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a226 (r101,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a193 (r101,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a107 (r101,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a49 (r101,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r87,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a225 (r85,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a192 (r85,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a106 (r85,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a48 (r85,l1) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a224 (r84,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a191 (r84,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a105 (r84,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a34 (r84,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a18 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r80: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r80,l0) best AREG, allocno GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r78: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r78,l0) best AREG, allocno GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r77,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r76: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r76,l0) best AREG, allocno GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r71,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a223 (r68,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a190 (r68,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a104 (r68,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a33 (r68,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r68,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a222 (r66,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a189 (r66,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a103 (r66,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a32 (r66,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a5 (r66,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r65,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a221 (r64,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a188 (r64,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a102 (r64,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a31 (r64,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r64,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a220 (r63,l4) best GENERAL_REGS, allocno GENERAL_REGS
    a187 (r63,l3) best GENERAL_REGS, allocno GENERAL_REGS
    a101 (r63,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a30 (r63,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a20 (r63,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r62,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:455,455 SSE_REGS:455,455 MMX_REGS:455,455 FP_TOP_SSE_REGS:2293725,2293725 FP_SECOND_SSE_REGS:2293725,2293725 FLOAT_SSE_REGS:2293725,2293725 FLOAT_INT_REGS:2293725,2293725 INT_SSE_REGS:455,455 FLOAT_INT_SSE_REGS:2293725,2293725 ALL_REGS:2293725,2293725 MEM:126,126
  a1(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:637,637 SSE_REGS:637,637 MMX_REGS:637,637 FP_TOP_SSE_REGS:3211215,3211215 FP_SECOND_SSE_REGS:3211215,3211215 FLOAT_SSE_REGS:3211215,3211215 FLOAT_INT_REGS:3211215,3211215 INT_SSE_REGS:637,637 FLOAT_INT_SSE_REGS:3211215,3211215 ALL_REGS:3211215,3211215 MEM:161,161
  a2(r295,l0) costs: AREG:0,0 DREG:28,28 CREG:28,28 BREG:28,28 SIREG:28,28 DIREG:28,28 AD_REGS:28,28 Q_REGS:28,28 NON_Q_REGS:28,28 INDEX_REGS:28,28 GENERAL_REGS:28,28 LEGACY_REGS:28,28 CLOBBERED_REGS:28,28 SSE_FIRST_REG:455,455 SSE_REGS:455,455 MMX_REGS:455,455 FP_TOP_SSE_REGS:2293725,2293725 FP_SECOND_SSE_REGS:2293725,2293725 FLOAT_SSE_REGS:2293725,2293725 FLOAT_INT_REGS:2293725,2293725 INT_SSE_REGS:455,455 FLOAT_INT_SSE_REGS:2293725,2293725 ALL_REGS:2293725,2293725 MEM:119,119
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:182,195 SSE_REGS:182,195 MMX_REGS:182,195 FP_TOP_SSE_REGS:917490,983025 FP_SECOND_SSE_REGS:917490,983025 FLOAT_SSE_REGS:917490,983025 FLOAT_INT_REGS:917490,983025 INT_SSE_REGS:182,195 FLOAT_INT_SSE_REGS:917490,983025 ALL_REGS:917490,983025 MEM:56,60
  a4(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:286,286 SSE_REGS:286,286 MMX_REGS:286,286 FP_TOP_SSE_REGS:1441770,1441770 FP_SECOND_SSE_REGS:1441770,1441770 FLOAT_SSE_REGS:1441770,1441770 FLOAT_INT_REGS:1441770,1441770 INT_SSE_REGS:286,286 FLOAT_INT_SSE_REGS:1441770,1441770 ALL_REGS:1441770,1441770 MEM:80,80
  a5(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:182,195 SSE_REGS:182,195 MMX_REGS:182,195 FP_TOP_SSE_REGS:917490,983025 FP_SECOND_SSE_REGS:917490,983025 FLOAT_SSE_REGS:917490,983025 FLOAT_INT_REGS:917490,983025 INT_SSE_REGS:182,195 FLOAT_INT_SSE_REGS:917490,983025 ALL_REGS:917490,983025 MEM:56,60
  a6(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:286,286 SSE_REGS:286,286 MMX_REGS:286,286 FP_TOP_SSE_REGS:1441770,1441770 FP_SECOND_SSE_REGS:1441770,1441770 FLOAT_SSE_REGS:1441770,1441770 FLOAT_INT_REGS:1441770,1441770 INT_SSE_REGS:286,286 FLOAT_INT_SSE_REGS:1441770,1441770 ALL_REGS:1441770,1441770 MEM:80,80
  a7(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:182,221 SSE_REGS:182,221 MMX_REGS:182,221 FP_TOP_SSE_REGS:917490,1114095 FP_SECOND_SSE_REGS:917490,1114095 FLOAT_SSE_REGS:917490,1114095 FLOAT_INT_REGS:917490,1114095 INT_SSE_REGS:182,221 FLOAT_INT_SSE_REGS:917490,1114095 ALL_REGS:917490,1114095 MEM:56,68
  a8(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:286,286 SSE_REGS:286,286 MMX_REGS:286,286 FP_TOP_SSE_REGS:1441770,1441770 FP_SECOND_SSE_REGS:1441770,1441770 FLOAT_SSE_REGS:1441770,1441770 FLOAT_INT_REGS:1441770,1441770 INT_SSE_REGS:286,286 FLOAT_INT_SSE_REGS:1441770,1441770 ALL_REGS:1441770,1441770 MEM:80,80
  a9(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:572,572 SSE_REGS:572,572 MMX_REGS:572,572 FP_TOP_SSE_REGS:2883540,2883540 FP_SECOND_SSE_REGS:2883540,2883540 FLOAT_SSE_REGS:2883540,2883540 FLOAT_INT_REGS:2883540,2883540 INT_SSE_REGS:572,572 FLOAT_INT_SSE_REGS:2883540,2883540 ALL_REGS:2883540,2883540 MEM:146,146
  a10(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:546,546 SSE_REGS:546,546 MMX_REGS:546,546 FP_TOP_SSE_REGS:2752470,2752470 FP_SECOND_SSE_REGS:2752470,2752470 FLOAT_SSE_REGS:2752470,2752470 FLOAT_INT_REGS:2752470,2752470 INT_SSE_REGS:546,546 FLOAT_INT_SSE_REGS:2752470,2752470 ALL_REGS:2752470,2752470 MEM:154,154
  a11(r292,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-14,-14 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1820,346268 SSE_REGS:1820,346268 MMX_REGS:1820,346268 FP_TOP_SSE_REGS:9174900,1745590260 FP_SECOND_SSE_REGS:9174900,1745590260 FLOAT_SSE_REGS:9174900,1745590260 FLOAT_INT_REGS:9174900,1745590260 INT_SSE_REGS:1820,346268 FLOAT_INT_SSE_REGS:9174900,1745590260 ALL_REGS:9174900,1745590260 MEM:560,106544
  a12(r503,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:524280,983025 FP_SECOND_SSE_REGS:524280,983025 FLOAT_SSE_REGS:524280,983025 INT_SSE_REGS:524280,983025 FLOAT_INT_SSE_REGS:524280,983025 ALL_REGS:524280,983025 MEM:-64,-15
  a13(r502,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:524280,1524280 FP_SECOND_SSE_REGS:524280,1524280 FLOAT_SSE_REGS:524280,1524280 INT_SSE_REGS:524280,1524280 FLOAT_INT_SSE_REGS:524280,1524280 ALL_REGS:524280,1524280 MEM:-64,1196
  a14(r501,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:524280,1524280 FP_SECOND_SSE_REGS:524280,1524280 FLOAT_SSE_REGS:524280,1524280 INT_SSE_REGS:524280,1524280 FLOAT_INT_SSE_REGS:524280,1524280 ALL_REGS:524280,1524280 MEM:-64,2456
  a15(r270,l0) costs: AREG:0,162 DREG:0,162 CREG:0,162 BREG:0,162 SIREG:0,162 DIREG:0,162 AD_REGS:0,162 Q_REGS:0,162 NON_Q_REGS:0,162 INDEX_REGS:0,162 GENERAL_REGS:0,162 LEGACY_REGS:0,162 CLOBBERED_REGS:0,162 SSE_FIRST_REG:104,1319 SSE_REGS:104,1319 MMX_REGS:104,1319 FP_TOP_SSE_REGS:524280,1524280 FP_SECOND_SSE_REGS:524280,1524280 FLOAT_SSE_REGS:524280,1524280 FLOAT_INT_REGS:524280,1524280 INT_SSE_REGS:104,1319 FLOAT_INT_SSE_REGS:524280,1524280 ALL_REGS:524280,1524280 MEM:24,429
  a16(r257,l0) costs: AREG:0,162 DREG:0,162 CREG:0,162 BREG:0,162 SIREG:0,162 DIREG:0,162 AD_REGS:0,162 Q_REGS:0,162 NON_Q_REGS:0,162 INDEX_REGS:0,162 GENERAL_REGS:0,162 LEGACY_REGS:0,162 CLOBBERED_REGS:0,162 SSE_FIRST_REG:104,1319 SSE_REGS:104,1319 MMX_REGS:104,1319 FP_TOP_SSE_REGS:524280,1524280 FP_SECOND_SSE_REGS:524280,1524280 FLOAT_SSE_REGS:524280,1524280 FLOAT_INT_REGS:524280,1524280 INT_SSE_REGS:104,1319 FLOAT_INT_SSE_REGS:524280,1524280 ALL_REGS:524280,1524280 MEM:24,429
  a17(r244,l0) costs: AREG:0,162 DREG:0,162 CREG:0,162 BREG:0,162 SIREG:0,162 DIREG:0,162 AD_REGS:0,162 Q_REGS:0,162 NON_Q_REGS:0,162 INDEX_REGS:0,162 GENERAL_REGS:0,162 LEGACY_REGS:0,162 CLOBBERED_REGS:0,162 SSE_FIRST_REG:104,1319 SSE_REGS:104,1319 MMX_REGS:104,1319 FP_TOP_SSE_REGS:524280,1524280 FP_SECOND_SSE_REGS:524280,1524280 FLOAT_SSE_REGS:524280,1524280 FLOAT_INT_REGS:524280,1524280 INT_SSE_REGS:104,1319 FLOAT_INT_SSE_REGS:524280,1524280 ALL_REGS:524280,1524280 MEM:24,429
  a18(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,11648 SSE_REGS:104,11648 MMX_REGS:104,11648 FP_TOP_SSE_REGS:524280,1524280 FP_SECOND_SSE_REGS:524280,1524280 FLOAT_SSE_REGS:524280,1524280 FLOAT_INT_REGS:524280,1524280 INT_SSE_REGS:104,11648 FLOAT_INT_SSE_REGS:524280,1524280 ALL_REGS:524280,1524280 MEM:24,2688
  a19(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:468,468 SSE_REGS:468,468 MMX_REGS:468,468 FP_TOP_SSE_REGS:2359260,2359260 FP_SECOND_SSE_REGS:2359260,2359260 FLOAT_SSE_REGS:2359260,2359260 FLOAT_INT_REGS:2359260,2359260 INT_SSE_REGS:468,468 FLOAT_INT_SSE_REGS:2359260,2359260 ALL_REGS:2359260,2359260 MEM:108,108
  a20(r63,l0) costs: AREG:0,486 DREG:0,486 CREG:0,486 BREG:0,486 SIREG:0,486 DIREG:0,486 AD_REGS:0,486 Q_REGS:0,486 NON_Q_REGS:0,486 INDEX_REGS:0,486 GENERAL_REGS:0,486 LEGACY_REGS:0,486 CLOBBERED_REGS:0,486 SSE_FIRST_REG:104,49925 SSE_REGS:104,49925 MMX_REGS:104,49925 FP_TOP_SSE_REGS:524280,64719360 FP_SECOND_SSE_REGS:524280,64719360 FLOAT_SSE_REGS:524280,64719360 FLOAT_INT_REGS:524280,64719360 INT_SSE_REGS:104,49925 FLOAT_INT_SSE_REGS:524280,64719360 ALL_REGS:524280,64719360 MEM:24,12783
  a21(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:650,650 SSE_REGS:650,650 MMX_REGS:650,650 FP_TOP_SSE_REGS:3276750,3276750 FP_SECOND_SSE_REGS:3276750,3276750 FLOAT_SSE_REGS:3276750,3276750 FLOAT_INT_REGS:3276750,3276750 INT_SSE_REGS:650,650 FLOAT_INT_SSE_REGS:3276750,3276750 ALL_REGS:3276750,3276750 MEM:150,150
  a22(r299,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:364,364 SSE_REGS:364,364 MMX_REGS:364,364 FP_TOP_SSE_REGS:1834980,1834980 FP_SECOND_SSE_REGS:1834980,1834980 FLOAT_SSE_REGS:1834980,1834980 FLOAT_INT_REGS:1834980,1834980 INT_SSE_REGS:364,364 FLOAT_INT_SSE_REGS:1834980,1834980 ALL_REGS:1834980,1834980 MEM:98,98
  a23(r296,l0) costs: AREG:28,28 DREG:0,0 CREG:28,28 BREG:28,28 SIREG:28,28 DIREG:28,28 AD_REGS:28,28 Q_REGS:28,28 NON_Q_REGS:28,28 INDEX_REGS:28,28 GENERAL_REGS:28,28 LEGACY_REGS:28,28 CLOBBERED_REGS:28,28 SSE_FIRST_REG:546,546 SSE_REGS:546,546 MMX_REGS:546,546 FP_TOP_SSE_REGS:2752470,2752470 FP_SECOND_SSE_REGS:2752470,2752470 FLOAT_SSE_REGS:2752470,2752470 FLOAT_INT_REGS:2752470,2752470 INT_SSE_REGS:546,546 FLOAT_INT_SSE_REGS:2752470,2752470 ALL_REGS:2752470,2752470 MEM:140,140
  a24(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:364,364 SSE_REGS:364,364 MMX_REGS:364,364 FP_TOP_SSE_REGS:1834980,1834980 FP_SECOND_SSE_REGS:1834980,1834980 FLOAT_SSE_REGS:1834980,1834980 FLOAT_INT_REGS:1834980,1834980 INT_SSE_REGS:364,364 FLOAT_INT_SSE_REGS:1834980,1834980 ALL_REGS:1834980,1834980 MEM:98,98
  a25(r80,l0) costs: AREG:0,0 DREG:28,28 CREG:28,28 BREG:28,28 SIREG:28,28 DIREG:28,28 AD_REGS:28,28 Q_REGS:28,28 NON_Q_REGS:28,28 INDEX_REGS:28,28 GENERAL_REGS:28,28 LEGACY_REGS:28,28 CLOBBERED_REGS:28,28 SSE_FIRST_REG:364,364 SSE_REGS:364,364 MMX_REGS:364,364 FP_TOP_SSE_REGS:1834980,1834980 FP_SECOND_SSE_REGS:1834980,1834980 FLOAT_SSE_REGS:1834980,1834980 FLOAT_INT_REGS:1834980,1834980 INT_SSE_REGS:364,364 FLOAT_INT_SSE_REGS:1834980,1834980 ALL_REGS:1834980,1834980 MEM:98,98
  a26(r293,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:364,364 SSE_REGS:364,364 MMX_REGS:364,364 FP_TOP_SSE_REGS:1834980,1834980 FP_SECOND_SSE_REGS:1834980,1834980 FLOAT_SSE_REGS:1834980,1834980 FLOAT_INT_REGS:1834980,1834980 INT_SSE_REGS:364,364 FLOAT_INT_SSE_REGS:1834980,1834980 ALL_REGS:1834980,1834980 MEM:84,84
  a27(r294,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:364,364 SSE_REGS:364,364 MMX_REGS:364,364 FP_TOP_SSE_REGS:1834980,1834980 FP_SECOND_SSE_REGS:1834980,1834980 FLOAT_SSE_REGS:1834980,1834980 FLOAT_INT_REGS:1834980,1834980 INT_SSE_REGS:364,364 FLOAT_INT_SSE_REGS:1834980,1834980 ALL_REGS:1834980,1834980 MEM:-14,-14
  a28(r78,l0) costs: AREG:-14,-14 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:364,364 SSE_REGS:364,364 MMX_REGS:364,364 FP_TOP_SSE_REGS:1834980,1834980 FP_SECOND_SSE_REGS:1834980,1834980 FLOAT_SSE_REGS:1834980,1834980 FLOAT_INT_REGS:1834980,1834980 INT_SSE_REGS:364,364 FLOAT_INT_SSE_REGS:1834980,1834980 ALL_REGS:1834980,1834980 MEM:98,98
  a29(r76,l0) costs: AREG:-14,-14 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:364,364 SSE_REGS:364,364 MMX_REGS:364,364 FP_TOP_SSE_REGS:1834980,1834980 FP_SECOND_SSE_REGS:1834980,1834980 FLOAT_SSE_REGS:1834980,1834980 FLOAT_INT_REGS:1834980,1834980 INT_SSE_REGS:364,364 FLOAT_INT_SSE_REGS:1834980,1834980 ALL_REGS:1834980,1834980 MEM:98,98
  a30(r63,l1) costs: AREG:486,486 DREG:486,486 CREG:486,486 BREG:486,486 SIREG:486,486 DIREG:486,486 AD_REGS:486,486 Q_REGS:486,486 NON_Q_REGS:486,486 INDEX_REGS:486,486 GENERAL_REGS:486,486 LEGACY_REGS:486,486 CLOBBERED_REGS:486,486 SSE_FIRST_REG:49821,49821 SSE_REGS:49821,49821 MMX_REGS:49821,49821 FP_TOP_SSE_REGS:64195080,64195080 FP_SECOND_SSE_REGS:64195080,64195080 FLOAT_SSE_REGS:64195080,64195080 FLOAT_INT_REGS:64195080,64195080 INT_SSE_REGS:49821,49821 FLOAT_INT_SSE_REGS:64195080,64195080 ALL_REGS:64195080,64195080 MEM:12759,12759
  a31(r64,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,13 SSE_REGS:0,13 MMX_REGS:0,13 FP_TOP_SSE_REGS:0,65535 FP_SECOND_SSE_REGS:0,65535 FLOAT_SSE_REGS:0,65535 FLOAT_INT_REGS:0,65535 INT_SSE_REGS:0,13 FLOAT_INT_SSE_REGS:0,65535 ALL_REGS:0,65535 MEM:0,4
  a32(r66,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,13 SSE_REGS:0,13 MMX_REGS:0,13 FP_TOP_SSE_REGS:0,65535 FP_SECOND_SSE_REGS:0,65535 FLOAT_SSE_REGS:0,65535 FLOAT_INT_REGS:0,65535 INT_SSE_REGS:0,13 FLOAT_INT_SSE_REGS:0,65535 ALL_REGS:0,65535 MEM:0,4
  a33(r68,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,39 SSE_REGS:0,39 MMX_REGS:0,39 FP_TOP_SSE_REGS:0,196605 FP_SECOND_SSE_REGS:0,196605 FLOAT_SSE_REGS:0,196605 FLOAT_INT_REGS:0,196605 INT_SSE_REGS:0,39 FLOAT_INT_SSE_REGS:0,196605 ALL_REGS:0,196605 MEM:0,12
  a34(r84,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2664,2664
  a35(r244,l1) costs: AREG:162,162 DREG:162,162 CREG:162,162 BREG:162,162 SIREG:162,162 DIREG:162,162 AD_REGS:162,162 Q_REGS:162,162 NON_Q_REGS:162,162 INDEX_REGS:162,162 GENERAL_REGS:162,162 LEGACY_REGS:162,162 CLOBBERED_REGS:162,162 SSE_FIRST_REG:1215,1215 SSE_REGS:1215,1215 MMX_REGS:1215,1215 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:1215,1215 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:405,405
  a36(r257,l1) costs: AREG:162,162 DREG:162,162 CREG:162,162 BREG:162,162 SIREG:162,162 DIREG:162,162 AD_REGS:162,162 Q_REGS:162,162 NON_Q_REGS:162,162 INDEX_REGS:162,162 GENERAL_REGS:162,162 LEGACY_REGS:162,162 CLOBBERED_REGS:162,162 SSE_FIRST_REG:1215,1215 SSE_REGS:1215,1215 MMX_REGS:1215,1215 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:1215,1215 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:405,405
  a37(r270,l1) costs: AREG:162,162 DREG:162,162 CREG:162,162 BREG:162,162 SIREG:162,162 DIREG:162,162 AD_REGS:162,162 Q_REGS:162,162 NON_Q_REGS:162,162 INDEX_REGS:162,162 GENERAL_REGS:162,162 LEGACY_REGS:162,162 CLOBBERED_REGS:162,162 SSE_FIRST_REG:1215,1215 SSE_REGS:1215,1215 MMX_REGS:1215,1215 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:1215,1215 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:405,405
  a38(r292,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:317694,344448 SSE_REGS:317694,344448 MMX_REGS:317694,344448 FP_TOP_SSE_REGS:1601544330,1736415360 FP_SECOND_SSE_REGS:1601544330,1736415360 FLOAT_SSE_REGS:1601544330,1736415360 FLOAT_INT_REGS:1601544330,1736415360 INT_SSE_REGS:317694,344448 FLOAT_INT_SSE_REGS:1601544330,1736415360 ALL_REGS:1601544330,1736415360 MEM:97752,105984
  a39(r501,l1) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 INT_SSE_REGS:1000000,1000000 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:2520,2520
  a40(r502,l1) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 INT_SSE_REGS:1000000,1000000 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:1260,1260
  a41(r503,l1) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:0,458745 FP_SECOND_SSE_REGS:0,458745 FLOAT_SSE_REGS:0,458745 INT_SSE_REGS:0,458745 FLOAT_INT_SSE_REGS:0,458745 ALL_REGS:0,458745 MEM:0,49
  a42(r500,l1) costs: AREG:162,162 DREG:162,162 CREG:162,162 BREG:162,162 SIREG:162,162 DIREG:162,162 AD_REGS:162,162 Q_REGS:162,162 NON_Q_REGS:162,162 INDEX_REGS:162,162 GENERAL_REGS:162,162 LEGACY_REGS:162,162 CLOBBERED_REGS:162,162 SSE_FIRST_REG:1215,1254 SSE_REGS:1215,1254 MMX_REGS:1215,1254 FP_TOP_SSE_REGS:1000000,1196605 FP_SECOND_SSE_REGS:1000000,1196605 FLOAT_SSE_REGS:1000000,1196605 FLOAT_INT_REGS:1000000,1196605 INT_SSE_REGS:1215,1254 FLOAT_INT_SSE_REGS:1000000,1196605 ALL_REGS:1000000,1196605 MEM:486,495
  a43(r499,l1) costs: AREG:162,162 DREG:162,162 CREG:162,162 BREG:162,162 SIREG:162,162 DIREG:162,162 AD_REGS:162,162 Q_REGS:162,162 NON_Q_REGS:162,162 INDEX_REGS:162,162 GENERAL_REGS:162,162 LEGACY_REGS:162,162 CLOBBERED_REGS:162,162 SSE_FIRST_REG:1215,1228 SSE_REGS:1215,1228 MMX_REGS:1215,1228 FP_TOP_SSE_REGS:1000000,1065535 FP_SECOND_SSE_REGS:1000000,1065535 FLOAT_SSE_REGS:1000000,1065535 FLOAT_INT_REGS:1000000,1065535 INT_SSE_REGS:1215,1228 FLOAT_INT_SSE_REGS:1000000,1065535 ALL_REGS:1000000,1065535 MEM:486,489
  a44(r498,l1) costs: AREG:162,162 DREG:162,162 CREG:162,162 BREG:162,162 SIREG:162,162 DIREG:162,162 AD_REGS:162,162 Q_REGS:162,162 NON_Q_REGS:162,162 INDEX_REGS:162,162 GENERAL_REGS:162,162 LEGACY_REGS:162,162 CLOBBERED_REGS:162,162 SSE_FIRST_REG:1215,1228 SSE_REGS:1215,1228 MMX_REGS:1215,1228 FP_TOP_SSE_REGS:1000000,1065535 FP_SECOND_SSE_REGS:1000000,1065535 FLOAT_SSE_REGS:1000000,1065535 FLOAT_INT_REGS:1000000,1065535 INT_SSE_REGS:1215,1228 FLOAT_INT_SSE_REGS:1000000,1065535 ALL_REGS:1000000,1065535 MEM:486,489
  a45(r282,l1) costs: AREG:0,1820 DREG:0,1820 CREG:0,1820 BREG:0,1820 SIREG:0,1820 DIREG:0,1820 AD_REGS:0,1820 Q_REGS:0,1820 NON_Q_REGS:0,1820 INDEX_REGS:0,1820 GENERAL_REGS:0,1820 LEGACY_REGS:0,1820 CLOBBERED_REGS:0,1820 SSE_FIRST_REG:1053,50193 SSE_REGS:1053,50193 MMX_REGS:1053,50193 FP_TOP_SSE_REGS:1000000,5000000 FP_SECOND_SSE_REGS:1000000,5000000 FLOAT_SSE_REGS:1000000,5000000 FLOAT_INT_REGS:1000000,5000000 INT_SSE_REGS:1053,50193 FLOAT_INT_SSE_REGS:1000000,5000000 ALL_REGS:1000000,5000000 MEM:324,13064
  a46(r163,l1) costs: AREG:0,1820 DREG:0,1820 CREG:0,1820 BREG:0,1820 SIREG:0,1820 DIREG:0,1820 AD_REGS:0,1820 Q_REGS:0,1820 NON_Q_REGS:0,1820 INDEX_REGS:0,1820 GENERAL_REGS:0,1820 LEGACY_REGS:0,1820 CLOBBERED_REGS:0,1820 SSE_FIRST_REG:1053,14703 SSE_REGS:1053,14703 MMX_REGS:1053,14703 FP_TOP_SSE_REGS:1000000,2000000 FP_SECOND_SSE_REGS:1000000,2000000 FLOAT_SSE_REGS:1000000,2000000 FLOAT_INT_REGS:1000000,2000000 INT_SSE_REGS:1053,14703 FLOAT_INT_SSE_REGS:1000000,2000000 ALL_REGS:1000000,2000000 MEM:324,4874
  a47(r302,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:12597,12597 SSE_REGS:12597,12597 MMX_REGS:12597,12597 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:12597,12597 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:3351,3351
  a48(r85,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23088,23088 SSE_REGS:23088,23088 MMX_REGS:23088,23088 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:23088,23088 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:6216,6216
  a49(r101,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:5772,17602 SSE_REGS:5772,17602 MMX_REGS:5772,17602 FP_TOP_SSE_REGS:1000000,60636850 FP_SECOND_SSE_REGS:1000000,60636850 FLOAT_SSE_REGS:1000000,60636850 FLOAT_INT_REGS:1000000,60636850 INT_SSE_REGS:5772,17602 FLOAT_INT_SSE_REGS:1000000,60636850 ALL_REGS:1000000,60636850 MEM:1776,5416
  a50(r115,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:5772,5850 SSE_REGS:5772,5850 MMX_REGS:5772,5850 FP_TOP_SSE_REGS:1000000,1393210 FP_SECOND_SSE_REGS:1000000,1393210 FLOAT_SSE_REGS:1000000,1393210 FLOAT_INT_REGS:1000000,1393210 INT_SSE_REGS:5772,5850 FLOAT_INT_SSE_REGS:1000000,1393210 ALL_REGS:1000000,1393210 MEM:1776,1800
  a51(r380,l1) costs: AREG:4680,4680 DREG:4680,4680 CREG:4680,4680 BREG:4680,4680 SIREG:4680,4680 DIREG:4680,4680 AD_REGS:4680,4680 Q_REGS:4680,4680 NON_Q_REGS:4680,4680 INDEX_REGS:4680,4680 GENERAL_REGS:4680,4680 LEGACY_REGS:4680,4680 CLOBBERED_REGS:4680,4680 FP_TOP_REG:7560,7560 FP_SECOND_REG:7560,7560 FLOAT_REGS:7560,7560 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:6120,6120 FP_TOP_SSE_REGS:7560,7560 FP_SECOND_SSE_REGS:7560,7560 FLOAT_SSE_REGS:7560,7560 FLOAT_INT_REGS:7560,7560 INT_SSE_REGS:4680,4680 FLOAT_INT_SSE_REGS:7560,7560 ALL_REGS:7560,7560 MEM:2880,2880
  a52(r378,l1) costs: AREG:4680,4680 DREG:4680,4680 CREG:4680,4680 BREG:4680,4680 SIREG:4680,4680 DIREG:4680,4680 AD_REGS:4680,4680 Q_REGS:4680,4680 NON_Q_REGS:4680,4680 INDEX_REGS:4680,4680 GENERAL_REGS:4680,4680 LEGACY_REGS:4680,4680 CLOBBERED_REGS:4680,4680 FP_TOP_REG:7560,7560 FP_SECOND_REG:7560,7560 FLOAT_REGS:7560,7560 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:6120,6120 FP_TOP_SSE_REGS:7560,7560 FP_SECOND_SSE_REGS:7560,7560 FLOAT_SSE_REGS:7560,7560 FLOAT_INT_REGS:7560,7560 INT_SSE_REGS:4680,4680 FLOAT_INT_SSE_REGS:7560,7560 ALL_REGS:7560,7560 MEM:2880,2880
  a53(r149,l1) costs: AREG:13540,13540 DREG:13540,13540 CREG:13540,13540 BREG:13540,13540 SIREG:13540,13540 DIREG:13540,13540 AD_REGS:13540,13540 Q_REGS:13540,13540 NON_Q_REGS:13540,13540 INDEX_REGS:13540,13540 GENERAL_REGS:13540,13540 LEGACY_REGS:13540,13540 CLOBBERED_REGS:13540,13540 FP_TOP_REG:28180,28180 FP_SECOND_REG:28180,28180 FLOAT_REGS:28180,28180 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:22660,22660 FP_TOP_SSE_REGS:28180,28180 FP_SECOND_SSE_REGS:28180,28180 FLOAT_SSE_REGS:28180,28180 FLOAT_INT_REGS:28180,28180 INT_SSE_REGS:17940,17940 FLOAT_INT_SSE_REGS:28180,28180 ALL_REGS:28180,28180 MEM:9660,9660
  a54(r379,l1) costs: AREG:2700,2700 DREG:2700,2700 CREG:2700,2700 BREG:2700,2700 SIREG:2700,2700 DIREG:2700,2700 AD_REGS:2700,2700 Q_REGS:2700,2700 NON_Q_REGS:2700,2700 INDEX_REGS:2700,2700 GENERAL_REGS:2700,2700 LEGACY_REGS:2700,2700 CLOBBERED_REGS:2700,2700 FP_TOP_REG:7200,7200 FP_SECOND_REG:7200,7200 FLOAT_REGS:7200,7200 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:5760,5760 FP_TOP_SSE_REGS:7200,7200 FP_SECOND_SSE_REGS:7200,7200 FLOAT_SSE_REGS:7200,7200 FLOAT_INT_REGS:7200,7200 INT_SSE_REGS:4680,4680 FLOAT_INT_SSE_REGS:7200,7200 ALL_REGS:7200,7200 MEM:720,720
  a55(r375,l1) costs: AREG:9360,9360 DREG:9360,9360 CREG:9360,9360 BREG:9360,9360 SIREG:9360,9360 DIREG:9360,9360 AD_REGS:9360,9360 Q_REGS:9360,9360 NON_Q_REGS:9360,9360 INDEX_REGS:9360,9360 GENERAL_REGS:9360,9360 LEGACY_REGS:9360,9360 CLOBBERED_REGS:9360,9360 FP_TOP_REG:15120,15120 FP_SECOND_REG:15120,15120 FLOAT_REGS:15120,15120 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:15120,15120 FP_SECOND_SSE_REGS:15120,15120 FLOAT_SSE_REGS:15120,15120 FLOAT_INT_REGS:15120,15120 INT_SSE_REGS:9360,9360 FLOAT_INT_SSE_REGS:15120,15120 ALL_REGS:2000000,2000000 MEM:5760,5760
  a56(r373,l1) costs: AREG:9360,9360 DREG:9360,9360 CREG:9360,9360 BREG:9360,9360 SIREG:9360,9360 DIREG:9360,9360 AD_REGS:9360,9360 Q_REGS:9360,9360 NON_Q_REGS:9360,9360 INDEX_REGS:9360,9360 GENERAL_REGS:9360,9360 LEGACY_REGS:9360,9360 CLOBBERED_REGS:9360,9360 FP_TOP_REG:15120,15120 FP_SECOND_REG:15120,15120 FLOAT_REGS:15120,15120 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:15120,15120 FP_SECOND_SSE_REGS:15120,15120 FLOAT_SSE_REGS:15120,15120 FLOAT_INT_REGS:15120,15120 INT_SSE_REGS:9360,9360 FLOAT_INT_SSE_REGS:15120,15120 ALL_REGS:2000000,2000000 MEM:5760,5760
  a57(r372,l1) costs: AREG:9360,9360 DREG:9360,9360 CREG:9360,9360 BREG:9360,9360 SIREG:9360,9360 DIREG:9360,9360 AD_REGS:9360,9360 Q_REGS:9360,9360 NON_Q_REGS:9360,9360 INDEX_REGS:9360,9360 GENERAL_REGS:9360,9360 LEGACY_REGS:9360,9360 CLOBBERED_REGS:9360,9360 FP_TOP_REG:15120,15120 FP_SECOND_REG:15120,15120 FLOAT_REGS:15120,15120 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:15120,15120 FP_SECOND_SSE_REGS:15120,15120 FLOAT_SSE_REGS:15120,15120 FLOAT_INT_REGS:15120,15120 INT_SSE_REGS:9360,9360 FLOAT_INT_SSE_REGS:15120,15120 ALL_REGS:2000000,2000000 MEM:5400,5400
  a58(r374,l1) costs: AREG:5400,5400 DREG:5400,5400 CREG:5400,5400 BREG:5400,5400 SIREG:5400,5400 DIREG:5400,5400 AD_REGS:5400,5400 Q_REGS:5400,5400 NON_Q_REGS:5400,5400 INDEX_REGS:5400,5400 GENERAL_REGS:5400,5400 LEGACY_REGS:5400,5400 CLOBBERED_REGS:5400,5400 FP_TOP_REG:14400,14400 FP_SECOND_REG:14400,14400 FLOAT_REGS:14400,14400 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:14400,14400 FP_SECOND_SSE_REGS:14400,14400 FLOAT_SSE_REGS:14400,14400 FLOAT_INT_REGS:14400,14400 INT_SSE_REGS:9360,9360 FLOAT_INT_SSE_REGS:14400,14400 ALL_REGS:2000000,2000000 MEM:5040,5040
  a59(r371,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:9360,9360 SSE_REGS:9360,9360 MMX_REGS:9360,9360 FP_TOP_SSE_REGS:24592600,24592600 FP_SECOND_SSE_REGS:24592600,24592600 FLOAT_SSE_REGS:24592600,24592600 FLOAT_INT_REGS:24592600,24592600 INT_SSE_REGS:9360,9360 FLOAT_INT_SSE_REGS:24592600,24592600 ALL_REGS:24592600,24592600 MEM:0,0
  a60(r148,l1) costs: AREG:17112,17112 DREG:17112,17112 CREG:17112,17112 BREG:17112,17112 SIREG:17112,17112 DIREG:17112,17112 AD_REGS:17112,17112 Q_REGS:17112,17112 NON_Q_REGS:17112,17112 INDEX_REGS:17112,17112 GENERAL_REGS:17112,17112 LEGACY_REGS:17112,17112 CLOBBERED_REGS:17112,17112 FP_TOP_REG:34644,34644 FP_SECOND_REG:34644,34644 FLOAT_REGS:34644,34644 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:27876,27876 FP_TOP_SSE_REGS:34644,34644 FP_SECOND_SSE_REGS:34644,34644 FLOAT_SSE_REGS:34644,34644 FLOAT_INT_REGS:34644,34644 INT_SSE_REGS:21996,21996 FLOAT_INT_SSE_REGS:34644,34644 ALL_REGS:34644,34644 MEM:11844,11844
  a61(r349,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:22516,22516 SSE_REGS:22516,22516 MMX_REGS:22516,22516 FP_TOP_SSE_REGS:57311540,57311540 FP_SECOND_SSE_REGS:57311540,57311540 FLOAT_SSE_REGS:57311540,57311540 FLOAT_INT_REGS:57311540,57311540 INT_SSE_REGS:22516,22516 FLOAT_INT_SSE_REGS:57311540,57311540 ALL_REGS:57311540,57311540 MEM:6484,6484
  a62(r370,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-444,-444 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a63(r369,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-444,-444 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a64(r350,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-444,-444 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3108,3108
  a65(r368,l1) costs: AREG:0,0 DREG:0,0 CREG:-444,-444 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a66(r366,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-444,-444 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a67(r365,l1) costs: AREG:0,0 DREG:-444,-444 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a68(r364,l1) costs: AREG:0,0 DREG:0,0 CREG:-444,-444 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a69(r139,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:30097540,30097540 FP_SECOND_SSE_REGS:30097540,30097540 FLOAT_SSE_REGS:30097540,30097540 FLOAT_INT_REGS:30097540,30097540 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:30097540,30097540 ALL_REGS:30097540,30097540 MEM:0,0
  a70(r87,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:40404,40404 SSE_REGS:40404,40404 MMX_REGS:40404,40404 FP_TOP_SSE_REGS:5000000,5000000 FP_SECOND_SSE_REGS:5000000,5000000 FLOAT_SSE_REGS:5000000,5000000 FLOAT_INT_REGS:5000000,5000000 INT_SSE_REGS:40404,40404 FLOAT_INT_SSE_REGS:5000000,5000000 ALL_REGS:5000000,5000000 MEM:11544,11544
  a71(r363,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-444,-444 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a72(r336,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-444,-444 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:17316,17316 SSE_REGS:17316,17316 MMX_REGS:17316,17316 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:17316,17316 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:4440,4440
  a73(r362,l1) costs: AREG:0,0 DREG:0,0 CREG:-444,-444 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a74(r360,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-444,-444 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a75(r359,l1) costs: AREG:0,0 DREG:-444,-444 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a76(r358,l1) costs: AREG:0,0 DREG:0,0 CREG:-444,-444 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a77(r132,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:30097540,30097540 FP_SECOND_SSE_REGS:30097540,30097540 FLOAT_SSE_REGS:30097540,30097540 FLOAT_INT_REGS:30097540,30097540 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:30097540,30097540 ALL_REGS:30097540,30097540 MEM:0,0
  a78(r357,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-444,-444 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a79(r319,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-444,-444 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:17316,17316 SSE_REGS:17316,17316 MMX_REGS:17316,17316 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:17316,17316 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:4440,4440
  a80(r356,l1) costs: AREG:0,0 DREG:0,0 CREG:-444,-444 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a81(r354,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-444,-444 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a82(r353,l1) costs: AREG:0,0 DREG:-444,-444 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a83(r352,l1) costs: AREG:0,0 DREG:0,0 CREG:-444,-444 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a84(r125,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:30097540,30097540 FP_SECOND_SSE_REGS:30097540,30097540 FLOAT_SSE_REGS:30097540,30097540 FLOAT_INT_REGS:30097540,30097540 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:30097540,30097540 ALL_REGS:30097540,30097540 MEM:0,0
  a85(r351,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-444,-444 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:-444,-444
  a86(r348,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3108,3108
  a87(r346,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:2664,2664
  a88(r344,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:2664,2664
  a89(r342,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3108,3108
  a90(r337,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:30097540,30097540 FP_SECOND_SSE_REGS:30097540,30097540 FLOAT_SSE_REGS:30097540,30097540 FLOAT_INT_REGS:30097540,30097540 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:30097540,30097540 ALL_REGS:30097540,30097540 MEM:3552,3552
  a91(r332,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:2664,2664
  a92(r328,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3108,3108
  a93(r325,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:30097540,30097540 FP_SECOND_SSE_REGS:30097540,30097540 FLOAT_SSE_REGS:30097540,30097540 FLOAT_INT_REGS:30097540,30097540 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:30097540,30097540 ALL_REGS:30097540,30097540 MEM:3552,3552
  a94(r322,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3108,3108
  a95(r320,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3108,3108
  a96(r315,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:2664,2664
  a97(r311,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3108,3108
  a98(r307,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:30097540,30097540 FP_SECOND_SSE_REGS:30097540,30097540 FLOAT_SSE_REGS:30097540,30097540 FLOAT_INT_REGS:30097540,30097540 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:30097540,30097540 ALL_REGS:30097540,30097540 MEM:3552,3552
  a99(r304,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11544,11544 SSE_REGS:11544,11544 MMX_REGS:11544,11544 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:11544,11544 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:3552,3552
  a100(r301,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23088,23088 SSE_REGS:23088,23088 MMX_REGS:23088,23088 FP_TOP_SSE_REGS:59195080,59195080 FP_SECOND_SSE_REGS:59195080,59195080 FLOAT_SSE_REGS:59195080,59195080 FLOAT_INT_REGS:59195080,59195080 INT_SSE_REGS:23088,23088 FLOAT_INT_SSE_REGS:59195080,59195080 ALL_REGS:59195080,59195080 MEM:0,0
  a101(r63,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a102(r64,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,13 SSE_REGS:0,13 MMX_REGS:0,13 FP_TOP_SSE_REGS:0,65535 FP_SECOND_SSE_REGS:0,65535 FLOAT_SSE_REGS:0,65535 FLOAT_INT_REGS:0,65535 INT_SSE_REGS:0,13 FLOAT_INT_SSE_REGS:0,65535 ALL_REGS:0,65535 MEM:0,4
  a103(r66,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,13 SSE_REGS:0,13 MMX_REGS:0,13 FP_TOP_SSE_REGS:0,65535 FP_SECOND_SSE_REGS:0,65535 FLOAT_SSE_REGS:0,65535 FLOAT_INT_REGS:0,65535 INT_SSE_REGS:0,13 FLOAT_INT_SSE_REGS:0,65535 ALL_REGS:0,65535 MEM:0,4
  a104(r68,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,39 SSE_REGS:0,39 MMX_REGS:0,39 FP_TOP_SSE_REGS:0,196605 FP_SECOND_SSE_REGS:0,196605 FLOAT_SSE_REGS:0,196605 FLOAT_INT_REGS:0,196605 INT_SSE_REGS:0,39 FLOAT_INT_SSE_REGS:0,196605 ALL_REGS:0,196605 MEM:0,12
  a105(r84,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a106(r85,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a107(r101,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:11830,11830 SSE_REGS:11830,11830 MMX_REGS:11830,11830 FP_TOP_SSE_REGS:59636850,59636850 FP_SECOND_SSE_REGS:59636850,59636850 FLOAT_SSE_REGS:59636850,59636850 FLOAT_INT_REGS:59636850,59636850 INT_SSE_REGS:11830,11830 FLOAT_INT_SSE_REGS:59636850,59636850 ALL_REGS:59636850,59636850 MEM:3640,3640
  a108(r115,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:24,24
  a109(r163,l2) costs: AREG:1820,1820 DREG:1820,1820 CREG:1820,1820 BREG:1820,1820 SIREG:1820,1820 DIREG:1820,1820 AD_REGS:1820,1820 Q_REGS:1820,1820 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 GENERAL_REGS:1820,1820 LEGACY_REGS:1820,1820 CLOBBERED_REGS:1820,1820 SSE_FIRST_REG:13650,13650 SSE_REGS:13650,13650 MMX_REGS:13650,13650 FP_TOP_SSE_REGS:1000000,1000000 FP_SECOND_SSE_REGS:1000000,1000000 FLOAT_SSE_REGS:1000000,1000000 FLOAT_INT_REGS:1000000,1000000 INT_SSE_REGS:13650,13650 FLOAT_INT_SSE_REGS:1000000,1000000 ALL_REGS:1000000,1000000 MEM:4550,4550
  a110(r244,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a111(r257,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a112(r270,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a113(r282,l2) costs: AREG:1820,1820 DREG:1820,1820 CREG:1820,1820 BREG:1820,1820 SIREG:1820,1820 DIREG:1820,1820 AD_REGS:1820,1820 Q_REGS:1820,1820 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 GENERAL_REGS:1820,1820 LEGACY_REGS:1820,1820 CLOBBERED_REGS:1820,1820 SSE_FIRST_REG:49140,49140 SSE_REGS:49140,49140 MMX_REGS:49140,49140 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:49140,49140 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:12740,12740
  a114(r292,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:22919,26754 SSE_REGS:22919,26754 MMX_REGS:22919,26754 FP_TOP_SSE_REGS:115538205,134871030 FP_SECOND_SSE_REGS:115538205,134871030 FLOAT_SSE_REGS:115538205,134871030 FLOAT_INT_REGS:115538205,134871030 INT_SSE_REGS:22919,26754 FLOAT_INT_SSE_REGS:115538205,134871030 ALL_REGS:115538205,134871030 MEM:7052,8232
  a115(r498,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,13 SSE_REGS:0,13 MMX_REGS:0,13 FP_TOP_SSE_REGS:0,65535 FP_SECOND_SSE_REGS:0,65535 FLOAT_SSE_REGS:0,65535 FLOAT_INT_REGS:0,65535 INT_SSE_REGS:0,13 FLOAT_INT_SSE_REGS:0,65535 ALL_REGS:0,65535 MEM:0,3
  a116(r499,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,13 SSE_REGS:0,13 MMX_REGS:0,13 FP_TOP_SSE_REGS:0,65535 FP_SECOND_SSE_REGS:0,65535 FLOAT_SSE_REGS:0,65535 FLOAT_INT_REGS:0,65535 INT_SSE_REGS:0,13 FLOAT_INT_SSE_REGS:0,65535 ALL_REGS:0,65535 MEM:0,3
  a117(r500,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,39 SSE_REGS:0,39 MMX_REGS:0,39 FP_TOP_SSE_REGS:0,196605 FP_SECOND_SSE_REGS:0,196605 FLOAT_SSE_REGS:0,196605 FLOAT_INT_REGS:0,196605 INT_SSE_REGS:0,39 FLOAT_INT_SSE_REGS:0,196605 ALL_REGS:0,196605 MEM:0,9
  a118(r501,l2) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a119(r502,l2) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a120(r503,l2) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:458745,458745 FP_SECOND_SSE_REGS:458745,458745 FLOAT_SSE_REGS:458745,458745 INT_SSE_REGS:458745,458745 FLOAT_INT_SSE_REGS:458745,458745 ALL_REGS:458745,458745 MEM:49,49
  a121(r481,l2) costs: AREG:19,19 DREG:19,19 CREG:19,19 BREG:19,19 SIREG:19,19 DIREG:19,19 AD_REGS:19,19 Q_REGS:19,19 NON_Q_REGS:19,19 INDEX_REGS:19,19 GENERAL_REGS:19,19 LEGACY_REGS:19,19 CLOBBERED_REGS:19,19 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_SSE_REGS:42,42 FP_SECOND_SSE_REGS:42,42 FLOAT_SSE_REGS:42,42 FLOAT_INT_REGS:42,42 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:42,42 ALL_REGS:42,42 MEM:16,16
  a122(r480,l2) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 INDEX_REGS:26,26 GENERAL_REGS:26,26 LEGACY_REGS:26,26 CLOBBERED_REGS:26,26 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_SSE_REGS:42,42 FP_SECOND_SSE_REGS:42,42 FLOAT_SSE_REGS:42,42 FLOAT_INT_REGS:42,42 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:42,42 ALL_REGS:42,42 MEM:15,15
  a123(r479,l2) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 INDEX_REGS:26,26 GENERAL_REGS:26,26 LEGACY_REGS:26,26 CLOBBERED_REGS:26,26 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_SSE_REGS:42,42 FP_SECOND_SSE_REGS:42,42 FLOAT_SSE_REGS:42,42 FLOAT_INT_REGS:42,42 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:42,42 ALL_REGS:42,42 MEM:15,15
  a124(r291,l2) costs: AREG:69,69 DREG:69,69 CREG:69,69 BREG:69,69 SIREG:69,69 DIREG:69,69 AD_REGS:69,69 Q_REGS:69,69 NON_Q_REGS:69,69 INDEX_REGS:69,69 GENERAL_REGS:69,69 LEGACY_REGS:69,69 CLOBBERED_REGS:69,69 FP_TOP_REG:109,109 FP_SECOND_REG:109,109 FLOAT_REGS:109,109 SSE_FIRST_REG:4,4 SSE_REGS:4,4 MMX_REGS:89,89 FP_TOP_SSE_REGS:109,109 FP_SECOND_SSE_REGS:109,109 FLOAT_SSE_REGS:109,109 FLOAT_INT_REGS:109,109 INT_SSE_REGS:69,69 FLOAT_INT_SSE_REGS:109,109 ALL_REGS:109,109 MEM:40,40
  a125(r290,l2) costs: AREG:69,69 DREG:69,69 CREG:69,69 BREG:69,69 SIREG:69,69 DIREG:69,69 AD_REGS:69,69 Q_REGS:69,69 NON_Q_REGS:69,69 INDEX_REGS:69,69 GENERAL_REGS:69,69 LEGACY_REGS:69,69 CLOBBERED_REGS:69,69 FP_TOP_REG:109,109 FP_SECOND_REG:109,109 FLOAT_REGS:109,109 SSE_FIRST_REG:4,4 SSE_REGS:4,4 MMX_REGS:89,89 FP_TOP_SSE_REGS:109,109 FP_SECOND_SSE_REGS:109,109 FLOAT_SSE_REGS:109,109 FLOAT_INT_REGS:109,109 INT_SSE_REGS:69,69 FLOAT_INT_SSE_REGS:109,109 ALL_REGS:109,109 MEM:40,40
  a126(r152,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:37271,37271 SSE_REGS:37271,37271 MMX_REGS:37271,37271 FP_TOP_SSE_REGS:129251995,129251995 FP_SECOND_SSE_REGS:129251995,129251995 FLOAT_SSE_REGS:129251995,129251995 FLOAT_INT_REGS:129251995,129251995 INT_SSE_REGS:37271,37271 FLOAT_INT_SSE_REGS:129251995,129251995 ALL_REGS:129251995,129251995 MEM:11468,11468
  a127(r475,l2) costs: AREG:39,39 DREG:39,39 CREG:39,39 BREG:39,39 SIREG:39,39 DIREG:39,39 AD_REGS:39,39 Q_REGS:39,39 NON_Q_REGS:39,39 INDEX_REGS:39,39 GENERAL_REGS:39,39 LEGACY_REGS:39,39 CLOBBERED_REGS:39,39 FP_TOP_REG:63,63 FP_SECOND_REG:63,63 FLOAT_REGS:63,63 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:51,51 FP_TOP_SSE_REGS:63,63 FP_SECOND_SSE_REGS:63,63 FLOAT_SSE_REGS:63,63 FLOAT_INT_REGS:63,63 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:63,63 ALL_REGS:63,63 MEM:23,23
  a128(r478,l2) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 INDEX_REGS:26,26 GENERAL_REGS:26,26 LEGACY_REGS:26,26 CLOBBERED_REGS:26,26 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_SSE_REGS:42,42 FP_SECOND_SSE_REGS:42,42 FLOAT_SSE_REGS:42,42 FLOAT_INT_REGS:42,42 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:42,42 ALL_REGS:42,42 MEM:15,15
  a129(r477,l2) costs: AREG:28,28 DREG:28,28 CREG:28,28 BREG:28,28 SIREG:28,28 DIREG:28,28 AD_REGS:28,28 Q_REGS:28,28 NON_Q_REGS:28,28 INDEX_REGS:28,28 GENERAL_REGS:28,28 LEGACY_REGS:28,28 CLOBBERED_REGS:28,28 FP_TOP_REG:44,44 FP_SECOND_REG:44,44 FLOAT_REGS:44,44 SSE_FIRST_REG:2,2 SSE_REGS:2,2 MMX_REGS:36,36 FP_TOP_SSE_REGS:44,44 FP_SECOND_SSE_REGS:44,44 FLOAT_SSE_REGS:44,44 FLOAT_INT_REGS:44,44 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:44,44 ALL_REGS:44,44 MEM:17,17
  a130(r476,l2) costs: AREG:28,28 DREG:28,28 CREG:28,28 BREG:28,28 SIREG:28,28 DIREG:28,28 AD_REGS:28,28 Q_REGS:28,28 NON_Q_REGS:28,28 INDEX_REGS:28,28 GENERAL_REGS:28,28 LEGACY_REGS:28,28 CLOBBERED_REGS:28,28 FP_TOP_REG:44,44 FP_SECOND_REG:44,44 FLOAT_REGS:44,44 SSE_FIRST_REG:2,2 SSE_REGS:2,2 MMX_REGS:36,36 FP_TOP_SSE_REGS:44,44 FP_SECOND_SSE_REGS:44,44 FLOAT_SSE_REGS:44,44 FLOAT_INT_REGS:44,44 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:44,44 ALL_REGS:44,44 MEM:17,17
  a131(r472,l2) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 INDEX_REGS:26,26 GENERAL_REGS:26,26 LEGACY_REGS:26,26 CLOBBERED_REGS:26,26 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_SSE_REGS:42,42 FP_SECOND_SSE_REGS:42,42 FLOAT_SSE_REGS:42,42 FLOAT_INT_REGS:42,42 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:42,42 ALL_REGS:42,42 MEM:16,16
  a132(r471,l2) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 INT_SSE_REGS:196605,196605 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:22,22
  a133(r473,l2) costs: AREG:15,15 DREG:15,15 CREG:15,15 BREG:15,15 SIREG:15,15 DIREG:15,15 AD_REGS:15,15 Q_REGS:15,15 NON_Q_REGS:15,15 INDEX_REGS:15,15 GENERAL_REGS:15,15 LEGACY_REGS:15,15 CLOBBERED_REGS:15,15 FP_TOP_REG:40,40 FP_SECOND_REG:40,40 FLOAT_REGS:40,40 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:32,32 FP_TOP_SSE_REGS:40,40 FP_SECOND_SSE_REGS:40,40 FLOAT_SSE_REGS:40,40 FLOAT_INT_REGS:40,40 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:40,40 ALL_REGS:40,40 MEM:4,4
  a134(r469,l2) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 INDEX_REGS:26,26 GENERAL_REGS:26,26 LEGACY_REGS:26,26 CLOBBERED_REGS:26,26 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_SSE_REGS:42,42 FP_SECOND_SSE_REGS:42,42 FLOAT_SSE_REGS:42,42 FLOAT_INT_REGS:42,42 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:42,42 ALL_REGS:42,42 MEM:16,16
  a135(r470,l2) costs: AREG:15,15 DREG:15,15 CREG:15,15 BREG:15,15 SIREG:15,15 DIREG:15,15 AD_REGS:15,15 Q_REGS:15,15 NON_Q_REGS:15,15 INDEX_REGS:15,15 GENERAL_REGS:15,15 LEGACY_REGS:15,15 CLOBBERED_REGS:15,15 FP_TOP_REG:40,40 FP_SECOND_REG:40,40 FLOAT_REGS:40,40 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:32,32 FP_TOP_SSE_REGS:40,40 FP_SECOND_SSE_REGS:40,40 FLOAT_SSE_REGS:40,40 FLOAT_INT_REGS:40,40 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:40,40 ALL_REGS:40,40 MEM:4,4
  a136(r186,l2) costs: AREG:28,28 DREG:28,28 CREG:28,28 BREG:28,28 SIREG:28,28 DIREG:28,28 AD_REGS:28,28 Q_REGS:28,28 NON_Q_REGS:28,28 INDEX_REGS:28,28 GENERAL_REGS:28,28 LEGACY_REGS:28,28 CLOBBERED_REGS:28,28 FP_TOP_REG:61,61 FP_SECOND_REG:61,61 FLOAT_REGS:61,61 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:49,49 FP_TOP_SSE_REGS:61,61 FP_SECOND_SSE_REGS:61,61 FLOAT_SSE_REGS:61,61 FLOAT_INT_REGS:61,61 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:61,61 ALL_REGS:61,61 MEM:11,11
  a137(r197,l2) costs: AREG:19,19 DREG:19,19 CREG:19,19 BREG:19,19 SIREG:19,19 DIREG:19,19 AD_REGS:19,19 Q_REGS:19,19 NON_Q_REGS:19,19 INDEX_REGS:19,19 GENERAL_REGS:19,19 LEGACY_REGS:19,19 CLOBBERED_REGS:19,19 FP_TOP_REG:78,78 FP_SECOND_REG:78,78 FLOAT_REGS:78,78 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:62,62 FP_TOP_SSE_REGS:78,78 FP_SECOND_SSE_REGS:78,78 FLOAT_SSE_REGS:78,78 FLOAT_INT_REGS:78,78 INT_SSE_REGS:52,52 FLOAT_INT_SSE_REGS:78,78 ALL_REGS:78,78 MEM:26,26
  a138(r200,l2) costs: AREG:19,19 DREG:19,19 CREG:19,19 BREG:19,19 SIREG:19,19 DIREG:19,19 AD_REGS:19,19 Q_REGS:19,19 NON_Q_REGS:19,19 INDEX_REGS:19,19 GENERAL_REGS:19,19 LEGACY_REGS:19,19 CLOBBERED_REGS:19,19 FP_TOP_REG:78,78 FP_SECOND_REG:78,78 FLOAT_REGS:78,78 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:62,62 FP_TOP_SSE_REGS:78,78 FP_SECOND_SSE_REGS:78,78 FLOAT_SSE_REGS:78,78 FLOAT_INT_REGS:78,78 INT_SSE_REGS:52,52 FLOAT_INT_SSE_REGS:78,78 ALL_REGS:78,78 MEM:25,25
  a139(r209,l2) costs: AREG:78,143 DREG:78,143 CREG:78,143 BREG:78,143 SIREG:78,143 DIREG:78,143 AD_REGS:78,143 Q_REGS:78,143 NON_Q_REGS:78,143 INDEX_REGS:78,143 GENERAL_REGS:78,143 LEGACY_REGS:78,143 CLOBBERED_REGS:78,143 FP_TOP_REG:126,231 FP_SECOND_REG:126,231 FLOAT_REGS:126,231 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:102,187 FP_TOP_SSE_REGS:126,231 FP_SECOND_SSE_REGS:126,231 FLOAT_SSE_REGS:126,231 FLOAT_INT_REGS:126,231 INT_SSE_REGS:78,143 FLOAT_INT_SSE_REGS:126,231 ALL_REGS:126,231 MEM:48,83
  a140(r214,l2) costs: AREG:52,117 DREG:52,117 CREG:52,117 BREG:52,117 SIREG:52,117 DIREG:52,117 AD_REGS:52,117 Q_REGS:52,117 NON_Q_REGS:52,117 INDEX_REGS:52,117 GENERAL_REGS:52,117 LEGACY_REGS:52,117 CLOBBERED_REGS:52,117 FP_TOP_REG:84,189 FP_SECOND_REG:84,189 FLOAT_REGS:84,189 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:68,153 FP_TOP_SSE_REGS:84,189 FP_SECOND_SSE_REGS:84,189 FLOAT_SSE_REGS:84,189 FLOAT_INT_REGS:84,189 INT_SSE_REGS:52,117 FLOAT_INT_SSE_REGS:84,189 ALL_REGS:84,189 MEM:32,67
  a141(r467,l2) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 INDEX_REGS:26,26 GENERAL_REGS:26,26 LEGACY_REGS:26,26 CLOBBERED_REGS:26,26 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:42,42 FP_SECOND_SSE_REGS:42,42 FLOAT_SSE_REGS:42,42 FLOAT_INT_REGS:42,42 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:42,42 ALL_REGS:131070,131070 MEM:15,15
  a142(r468,l2) costs: AREG:15,15 DREG:15,15 CREG:15,15 BREG:15,15 SIREG:15,15 DIREG:15,15 AD_REGS:15,15 Q_REGS:15,15 NON_Q_REGS:15,15 INDEX_REGS:15,15 GENERAL_REGS:15,15 LEGACY_REGS:15,15 CLOBBERED_REGS:15,15 FP_TOP_REG:40,40 FP_SECOND_REG:40,40 FLOAT_REGS:40,40 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:40,40 FP_SECOND_SSE_REGS:40,40 FLOAT_SSE_REGS:40,40 FLOAT_INT_REGS:40,40 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:40,40 ALL_REGS:131070,131070 MEM:4,4
  a143(r465,l2) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 INDEX_REGS:26,26 GENERAL_REGS:26,26 LEGACY_REGS:26,26 CLOBBERED_REGS:26,26 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_SSE_REGS:42,42 FP_SECOND_SSE_REGS:42,42 FLOAT_SSE_REGS:42,42 FLOAT_INT_REGS:42,42 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:42,42 ALL_REGS:42,42 MEM:15,15
  a144(r466,l2) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 INT_SSE_REGS:131070,131070 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:16,16
  a145(r281,l2) costs: AREG:0,8 DREG:0,8 CREG:0,8 BREG:0,8 SIREG:0,8 DIREG:0,8 AD_REGS:0,8 Q_REGS:0,8 NON_Q_REGS:0,8 INDEX_REGS:0,8 GENERAL_REGS:0,8 LEGACY_REGS:0,8 CLOBBERED_REGS:0,8 SSE_FIRST_REG:13,1022 SSE_REGS:13,1022 MMX_REGS:13,1022 FP_TOP_SSE_REGS:65535,4393218 FP_SECOND_SSE_REGS:65535,4393218 FLOAT_SSE_REGS:65535,4393218 FLOAT_INT_REGS:65535,4393218 INT_SSE_REGS:13,1022 FLOAT_INT_SSE_REGS:65535,4393218 ALL_REGS:65535,4393218 MEM:4,265
  a146(r202,l2) costs: AREG:13,923 DREG:13,923 CREG:13,923 BREG:13,923 SIREG:13,923 DIREG:13,923 AD_REGS:13,923 Q_REGS:13,923 NON_Q_REGS:13,923 INDEX_REGS:13,923 GENERAL_REGS:13,923 LEGACY_REGS:13,923 CLOBBERED_REGS:13,923 FP_TOP_REG:21,1491 FP_SECOND_REG:21,1491 FLOAT_REGS:21,1491 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:21,1491 FP_SECOND_SSE_REGS:21,1491 FLOAT_SSE_REGS:21,1491 FLOAT_INT_REGS:21,1491 INT_SSE_REGS:13,923 FLOAT_INT_SSE_REGS:21,1491 ALL_REGS:65535,2065535 MEM:8,545
  a147(r424,l2) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 INDEX_REGS:26,26 GENERAL_REGS:26,26 LEGACY_REGS:26,26 CLOBBERED_REGS:26,26 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_SSE_REGS:42,42 FP_SECOND_SSE_REGS:42,42 FLOAT_SSE_REGS:42,42 FLOAT_INT_REGS:42,42 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:42,42 ALL_REGS:42,42 MEM:15,15
  a148(r422,l2) costs: AREG:78,78 DREG:78,78 CREG:78,78 BREG:78,78 SIREG:78,78 DIREG:78,78 AD_REGS:78,78 Q_REGS:78,78 NON_Q_REGS:78,78 INDEX_REGS:78,78 GENERAL_REGS:78,78 LEGACY_REGS:78,78 CLOBBERED_REGS:78,78 FP_TOP_REG:126,126 FP_SECOND_REG:126,126 FLOAT_REGS:126,126 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:126,126 FP_SECOND_SSE_REGS:126,126 FLOAT_SSE_REGS:126,126 FLOAT_INT_REGS:126,126 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:126,126 ALL_REGS:393210,393210 MEM:45,45
  a149(r423,l2) costs: AREG:45,45 DREG:45,45 CREG:45,45 BREG:45,45 SIREG:45,45 DIREG:45,45 AD_REGS:45,45 Q_REGS:45,45 NON_Q_REGS:45,45 INDEX_REGS:45,45 GENERAL_REGS:45,45 LEGACY_REGS:45,45 CLOBBERED_REGS:45,45 FP_TOP_REG:120,120 FP_SECOND_REG:120,120 FLOAT_REGS:120,120 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:120,120 FP_SECOND_SSE_REGS:120,120 FLOAT_SSE_REGS:120,120 FLOAT_INT_REGS:120,120 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:120,120 ALL_REGS:393210,393210 MEM:12,12
  a150(r420,l2) costs: AREG:78,78 DREG:78,78 CREG:78,78 BREG:78,78 SIREG:78,78 DIREG:78,78 AD_REGS:78,78 Q_REGS:78,78 NON_Q_REGS:78,78 INDEX_REGS:78,78 GENERAL_REGS:78,78 LEGACY_REGS:78,78 CLOBBERED_REGS:78,78 FP_TOP_REG:126,126 FP_SECOND_REG:126,126 FLOAT_REGS:126,126 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:102,102 FP_TOP_SSE_REGS:126,126 FP_SECOND_SSE_REGS:126,126 FLOAT_SSE_REGS:126,126 FLOAT_INT_REGS:126,126 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:126,126 ALL_REGS:126,126 MEM:45,45
  a151(r421,l2) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 INT_SSE_REGS:393210,393210 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:48,48
  a152(r419,l2) costs: AREG:45,45 DREG:45,45 CREG:45,45 BREG:45,45 SIREG:45,45 DIREG:45,45 AD_REGS:45,45 Q_REGS:45,45 NON_Q_REGS:45,45 INDEX_REGS:45,45 GENERAL_REGS:45,45 LEGACY_REGS:45,45 CLOBBERED_REGS:45,45 FP_TOP_REG:120,120 FP_SECOND_REG:120,120 FLOAT_REGS:120,120 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:96,96 FP_TOP_SSE_REGS:120,120 FP_SECOND_SSE_REGS:120,120 FLOAT_SSE_REGS:120,120 FLOAT_INT_REGS:120,120 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:120,120 ALL_REGS:120,120 MEM:42,42
  a153(r417,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:0,0
  a154(r418,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:0,0
  a155(r415,l2) costs: AREG:78,78 DREG:78,78 CREG:78,78 BREG:78,78 SIREG:78,78 DIREG:78,78 AD_REGS:78,78 Q_REGS:78,78 NON_Q_REGS:78,78 INDEX_REGS:78,78 GENERAL_REGS:78,78 LEGACY_REGS:78,78 CLOBBERED_REGS:78,78 FP_TOP_REG:126,126 FP_SECOND_REG:126,126 FLOAT_REGS:126,126 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:126,126 FP_SECOND_SSE_REGS:126,126 FLOAT_SSE_REGS:126,126 FLOAT_INT_REGS:126,126 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:126,126 ALL_REGS:393210,393210 MEM:45,45
  a156(r208,l2) costs: AREG:57,57 DREG:57,57 CREG:57,57 BREG:57,57 SIREG:57,57 DIREG:57,57 AD_REGS:57,57 Q_REGS:57,57 NON_Q_REGS:57,57 INDEX_REGS:57,57 GENERAL_REGS:57,57 LEGACY_REGS:57,57 CLOBBERED_REGS:57,57 FP_TOP_REG:126,126 FP_SECOND_REG:126,126 FLOAT_REGS:126,126 SSE_FIRST_REG:-3,-3 SSE_REGS:0,0 FP_TOP_SSE_REGS:126,126 FP_SECOND_SSE_REGS:126,126 FLOAT_SSE_REGS:126,126 FLOAT_INT_REGS:126,126 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:126,126 ALL_REGS:393210,393210 MEM:48,48
  a157(r416,l2) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 INT_SSE_REGS:393210,393210 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:45,45
  a158(r414,l2) costs: AREG:57,57 DREG:57,57 CREG:57,57 BREG:57,57 SIREG:57,57 DIREG:57,57 AD_REGS:57,57 Q_REGS:57,57 NON_Q_REGS:57,57 INDEX_REGS:57,57 GENERAL_REGS:57,57 LEGACY_REGS:57,57 CLOBBERED_REGS:57,57 FP_TOP_REG:126,126 FP_SECOND_REG:126,126 FLOAT_REGS:126,126 SSE_FIRST_REG:-3,-3 SSE_REGS:0,0 FP_TOP_SSE_REGS:126,126 FP_SECOND_SSE_REGS:126,126 FLOAT_SSE_REGS:126,126 FLOAT_INT_REGS:126,126 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:126,126 ALL_REGS:393210,393210 MEM:48,48
  a159(r412,l2) costs: AREG:78,78 DREG:78,78 CREG:78,78 BREG:78,78 SIREG:78,78 DIREG:78,78 AD_REGS:78,78 Q_REGS:78,78 NON_Q_REGS:78,78 INDEX_REGS:78,78 GENERAL_REGS:78,78 LEGACY_REGS:78,78 CLOBBERED_REGS:78,78 FP_TOP_REG:126,126 FP_SECOND_REG:126,126 FLOAT_REGS:126,126 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:102,102 FP_TOP_SSE_REGS:126,126 FP_SECOND_SSE_REGS:126,126 FLOAT_SSE_REGS:126,126 FLOAT_INT_REGS:126,126 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:126,126 ALL_REGS:126,126 MEM:45,45
  a160(r413,l2) costs: AREG:45,45 DREG:45,45 CREG:45,45 BREG:45,45 SIREG:45,45 DIREG:45,45 AD_REGS:45,45 Q_REGS:45,45 NON_Q_REGS:45,45 INDEX_REGS:45,45 GENERAL_REGS:45,45 LEGACY_REGS:45,45 CLOBBERED_REGS:45,45 FP_TOP_REG:120,120 FP_SECOND_REG:120,120 FLOAT_REGS:120,120 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:96,96 FP_TOP_SSE_REGS:120,120 FP_SECOND_SSE_REGS:120,120 FLOAT_SSE_REGS:120,120 FLOAT_INT_REGS:120,120 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:120,120 ALL_REGS:120,120 MEM:42,42
  a161(r411,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:0,0
  a162(r199,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:117,117 SSE_REGS:117,117 MMX_REGS:117,117 FP_TOP_SSE_REGS:589815,589815 FP_SECOND_SSE_REGS:589815,589815 FLOAT_SSE_REGS:589815,589815 FLOAT_INT_REGS:589815,589815 INT_SSE_REGS:117,117 FLOAT_INT_SSE_REGS:589815,589815 ALL_REGS:589815,589815 MEM:12,12
  a163(r410,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:0,0
  a164(r179,l2) costs: AREG:182,182 DREG:182,182 CREG:182,182 BREG:182,182 SIREG:182,182 DIREG:182,182 AD_REGS:182,182 Q_REGS:182,182 NON_Q_REGS:182,182 INDEX_REGS:182,182 GENERAL_REGS:182,182 LEGACY_REGS:182,182 CLOBBERED_REGS:182,182 FP_TOP_REG:294,294 FP_SECOND_REG:294,294 FLOAT_REGS:294,294 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:294,294 FP_SECOND_SSE_REGS:294,294 FLOAT_SSE_REGS:294,294 FLOAT_INT_REGS:294,294 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:294,294 ALL_REGS:917490,917490 MEM:105,105
  a165(r408,l2) costs: AREG:182,182 DREG:182,182 CREG:182,182 BREG:182,182 SIREG:182,182 DIREG:182,182 AD_REGS:182,182 Q_REGS:182,182 NON_Q_REGS:182,182 INDEX_REGS:182,182 GENERAL_REGS:182,182 LEGACY_REGS:182,182 CLOBBERED_REGS:182,182 FP_TOP_REG:294,294 FP_SECOND_REG:294,294 FLOAT_REGS:294,294 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:294,294 FP_SECOND_SSE_REGS:294,294 FLOAT_SSE_REGS:294,294 FLOAT_INT_REGS:294,294 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:294,294 ALL_REGS:917490,917490 MEM:112,112
  a166(r406,l2) costs: AREG:182,182 DREG:182,182 CREG:182,182 BREG:182,182 SIREG:182,182 DIREG:182,182 AD_REGS:182,182 Q_REGS:182,182 NON_Q_REGS:182,182 INDEX_REGS:182,182 GENERAL_REGS:182,182 LEGACY_REGS:182,182 CLOBBERED_REGS:182,182 FP_TOP_REG:294,294 FP_SECOND_REG:294,294 FLOAT_REGS:294,294 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:294,294 FP_SECOND_SSE_REGS:294,294 FLOAT_SSE_REGS:294,294 FLOAT_INT_REGS:294,294 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:294,294 ALL_REGS:917490,917490 MEM:112,112
  a167(r404,l2) costs: AREG:133,133 DREG:133,133 CREG:133,133 BREG:133,133 SIREG:133,133 DIREG:133,133 AD_REGS:133,133 Q_REGS:133,133 NON_Q_REGS:133,133 INDEX_REGS:133,133 GENERAL_REGS:133,133 LEGACY_REGS:133,133 CLOBBERED_REGS:133,133 FP_TOP_REG:294,294 FP_SECOND_REG:294,294 FLOAT_REGS:294,294 SSE_FIRST_REG:-7,-7 SSE_REGS:0,0 FP_TOP_SSE_REGS:294,294 FP_SECOND_SSE_REGS:294,294 FLOAT_SSE_REGS:294,294 FLOAT_INT_REGS:294,294 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:294,294 ALL_REGS:917490,917490 MEM:105,105
  a168(r407,l2) costs: AREG:105,105 DREG:105,105 CREG:105,105 BREG:105,105 SIREG:105,105 DIREG:105,105 AD_REGS:105,105 Q_REGS:105,105 NON_Q_REGS:105,105 INDEX_REGS:105,105 GENERAL_REGS:105,105 LEGACY_REGS:105,105 CLOBBERED_REGS:105,105 FP_TOP_REG:280,280 FP_SECOND_REG:280,280 FLOAT_REGS:280,280 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:280,280 FP_SECOND_SSE_REGS:280,280 FLOAT_SSE_REGS:280,280 FLOAT_INT_REGS:280,280 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:280,280 ALL_REGS:917490,917490 MEM:28,28
  a169(r166,l2) costs: AREG:22974,22974 DREG:22974,22974 CREG:22974,22974 BREG:22974,22974 SIREG:22974,22974 DIREG:22974,22974 AD_REGS:22974,22974 Q_REGS:22974,22974 NON_Q_REGS:22974,22974 INDEX_REGS:22974,22974 GENERAL_REGS:22974,22974 LEGACY_REGS:22974,22974 CLOBBERED_REGS:22974,22974 FP_TOP_REG:36183,36183 FP_SECOND_REG:36183,36183 FLOAT_REGS:36183,36183 SSE_FIRST_REG:1631,1631 SSE_REGS:1638,1638 FP_TOP_SSE_REGS:36183,36183 FP_SECOND_SSE_REGS:36183,36183 FLOAT_SSE_REGS:36183,36183 FLOAT_INT_REGS:36183,36183 INT_SSE_REGS:23023,23023 FLOAT_INT_SSE_REGS:36183,36183 ALL_REGS:2458745,2458745 MEM:14798,14798
  a170(r400,l2) costs: AREG:182,182 DREG:182,182 CREG:182,182 BREG:182,182 SIREG:182,182 DIREG:182,182 AD_REGS:182,182 Q_REGS:182,182 NON_Q_REGS:182,182 INDEX_REGS:182,182 GENERAL_REGS:182,182 LEGACY_REGS:182,182 CLOBBERED_REGS:182,182 FP_TOP_REG:294,294 FP_SECOND_REG:294,294 FLOAT_REGS:294,294 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:238,238 FP_TOP_SSE_REGS:294,294 FP_SECOND_SSE_REGS:294,294 FLOAT_SSE_REGS:294,294 FLOAT_INT_REGS:294,294 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:294,294 ALL_REGS:294,294 MEM:105,105
  a171(r401,l2) costs: AREG:105,105 DREG:105,105 CREG:105,105 BREG:105,105 SIREG:105,105 DIREG:105,105 AD_REGS:105,105 Q_REGS:105,105 NON_Q_REGS:105,105 INDEX_REGS:105,105 GENERAL_REGS:105,105 LEGACY_REGS:105,105 CLOBBERED_REGS:105,105 FP_TOP_REG:280,280 FP_SECOND_REG:280,280 FLOAT_REGS:280,280 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:224,224 FP_TOP_SSE_REGS:280,280 FP_SECOND_SSE_REGS:280,280 FLOAT_SSE_REGS:280,280 FLOAT_INT_REGS:280,280 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:280,280 ALL_REGS:280,280 MEM:28,28
  a172(r398,l2) costs: AREG:650,650 DREG:650,650 CREG:650,650 BREG:650,650 SIREG:650,650 DIREG:650,650 AD_REGS:650,650 Q_REGS:650,650 NON_Q_REGS:650,650 INDEX_REGS:650,650 GENERAL_REGS:650,650 LEGACY_REGS:650,650 CLOBBERED_REGS:650,650 FP_TOP_REG:1050,1050 FP_SECOND_REG:1050,1050 FLOAT_REGS:1050,1050 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:850,850 FP_TOP_SSE_REGS:1050,1050 FP_SECOND_SSE_REGS:1050,1050 FLOAT_SSE_REGS:1050,1050 FLOAT_INT_REGS:1050,1050 INT_SSE_REGS:650,650 FLOAT_INT_SSE_REGS:1050,1050 ALL_REGS:1050,1050 MEM:400,400
  a173(r175,l2) costs: AREG:1090,1090 DREG:1090,1090 CREG:1090,1090 BREG:1090,1090 SIREG:1090,1090 DIREG:1090,1090 AD_REGS:1090,1090 Q_REGS:1090,1090 NON_Q_REGS:1090,1090 INDEX_REGS:1090,1090 GENERAL_REGS:1090,1090 LEGACY_REGS:1090,1090 CLOBBERED_REGS:1090,1090 FP_TOP_REG:2565,2565 FP_SECOND_REG:2565,2565 FLOAT_REGS:2565,2565 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:2057,2057 FP_TOP_SSE_REGS:2565,2565 FP_SECOND_SSE_REGS:2565,2565 FLOAT_SSE_REGS:2565,2565 FLOAT_INT_REGS:2565,2565 INT_SSE_REGS:1651,1651 FLOAT_INT_SSE_REGS:2565,2565 ALL_REGS:2565,2565 MEM:838,838
  a174(r399,l2) costs: AREG:375,375 DREG:375,375 CREG:375,375 BREG:375,375 SIREG:375,375 DIREG:375,375 AD_REGS:375,375 Q_REGS:375,375 NON_Q_REGS:375,375 INDEX_REGS:375,375 GENERAL_REGS:375,375 LEGACY_REGS:375,375 CLOBBERED_REGS:375,375 FP_TOP_REG:1000,1000 FP_SECOND_REG:1000,1000 FLOAT_REGS:1000,1000 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:800,800 FP_TOP_SSE_REGS:1000,1000 FP_SECOND_SSE_REGS:1000,1000 FLOAT_SSE_REGS:1000,1000 FLOAT_INT_REGS:1000,1000 INT_SSE_REGS:650,650 FLOAT_INT_SSE_REGS:1000,1000 ALL_REGS:1000,1000 MEM:100,100
  a175(r397,l2) costs: AREG:765,765 DREG:765,765 CREG:765,765 BREG:765,765 SIREG:765,765 DIREG:765,765 AD_REGS:765,765 Q_REGS:765,765 NON_Q_REGS:765,765 INDEX_REGS:765,765 GENERAL_REGS:765,765 LEGACY_REGS:765,765 CLOBBERED_REGS:765,765 FP_TOP_REG:2040,2040 FP_SECOND_REG:2040,2040 FLOAT_REGS:2040,2040 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:1632,1632 FP_TOP_SSE_REGS:2040,2040 FP_SECOND_SSE_REGS:2040,2040 FLOAT_SSE_REGS:2040,2040 FLOAT_INT_REGS:2040,2040 INT_SSE_REGS:1326,1326 FLOAT_INT_SSE_REGS:2040,2040 ALL_REGS:2040,2040 MEM:204,204
  a176(r395,l2) costs: AREG:2652,2652 DREG:2652,2652 CREG:2652,2652 BREG:2652,2652 SIREG:2652,2652 DIREG:2652,2652 AD_REGS:2652,2652 Q_REGS:2652,2652 NON_Q_REGS:2652,2652 INDEX_REGS:2652,2652 GENERAL_REGS:2652,2652 LEGACY_REGS:2652,2652 CLOBBERED_REGS:2652,2652 FP_TOP_REG:4284,4284 FP_SECOND_REG:4284,4284 FLOAT_REGS:4284,4284 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:4284,4284 FP_SECOND_SSE_REGS:4284,4284 FLOAT_SSE_REGS:4284,4284 FLOAT_INT_REGS:4284,4284 INT_SSE_REGS:2652,2652 FLOAT_INT_SSE_REGS:4284,4284 ALL_REGS:2000000,2000000 MEM:1632,1632
  a177(r394,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2652,2652 SSE_REGS:2652,2652 MMX_REGS:2652,2652 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:2652,2652 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:714,714
  a178(r392,l2) costs: AREG:204,204 DREG:204,204 CREG:204,204 BREG:204,204 SIREG:204,204 DIREG:204,204 AD_REGS:204,204 Q_REGS:204,204 NON_Q_REGS:204,204 INDEX_REGS:204,204 GENERAL_REGS:204,204 LEGACY_REGS:204,204 CLOBBERED_REGS:204,204 SSE_FIRST_REG:4182,4182 SSE_REGS:4182,4182 MMX_REGS:4182,4182 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:4182,4182 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:1122,1122
  a179(r393,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2652,2652 SSE_REGS:2652,2652 MMX_REGS:2652,2652 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:2652,2652 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:612,612
  a180(r390,l2) costs: AREG:204,204 DREG:204,204 CREG:204,204 BREG:204,204 SIREG:204,204 DIREG:204,204 AD_REGS:204,204 Q_REGS:204,204 NON_Q_REGS:204,204 INDEX_REGS:204,204 GENERAL_REGS:204,204 LEGACY_REGS:204,204 CLOBBERED_REGS:204,204 SSE_FIRST_REG:4182,4182 SSE_REGS:4182,4182 MMX_REGS:4182,4182 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:4182,4182 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:1224,1224
  a181(r164,l2) costs: AREG:33449,33449 DREG:33449,33449 CREG:33449,33449 BREG:33449,33449 SIREG:33449,33449 DIREG:33449,33449 AD_REGS:33449,33449 Q_REGS:33449,33449 NON_Q_REGS:33449,33449 INDEX_REGS:33449,33449 GENERAL_REGS:33449,33449 LEGACY_REGS:33449,33449 CLOBBERED_REGS:33449,33449 FP_TOP_REG:68383,68383 FP_SECOND_REG:68383,68383 FLOAT_REGS:68383,68383 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:55011,55011 FP_TOP_SSE_REGS:68383,68383 FP_SECOND_SSE_REGS:68383,68383 FLOAT_SSE_REGS:68383,68383 FLOAT_INT_REGS:68383,68383 INT_SSE_REGS:43459,43459 FLOAT_INT_SSE_REGS:68383,68383 ALL_REGS:68383,68383 MEM:23605,23605
  a182(r389,l2) costs: AREG:6135,6135 DREG:6135,6135 CREG:6135,6135 BREG:6135,6135 SIREG:6135,6135 DIREG:6135,6135 AD_REGS:6135,6135 Q_REGS:6135,6135 NON_Q_REGS:6135,6135 INDEX_REGS:6135,6135 GENERAL_REGS:6135,6135 LEGACY_REGS:6135,6135 CLOBBERED_REGS:6135,6135 FP_TOP_REG:16360,16360 FP_SECOND_REG:16360,16360 FLOAT_REGS:16360,16360 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:13088,13088 FP_TOP_SSE_REGS:16360,16360 FP_SECOND_SSE_REGS:16360,16360 FLOAT_SSE_REGS:16360,16360 FLOAT_INT_REGS:16360,16360 INT_SSE_REGS:10634,10634 FLOAT_INT_SSE_REGS:16360,16360 ALL_REGS:16360,16360 MEM:1636,1636
  a183(r387,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:21294,21294 SSE_REGS:21294,21294 MMX_REGS:21294,21294 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:21294,21294 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6552,6552
  a184(r385,l2) costs: AREG:22932,22932 DREG:22932,22932 CREG:22932,22932 BREG:22932,22932 SIREG:22932,22932 DIREG:22932,22932 AD_REGS:22932,22932 Q_REGS:22932,22932 NON_Q_REGS:22932,22932 INDEX_REGS:22932,22932 GENERAL_REGS:22932,22932 LEGACY_REGS:22932,22932 CLOBBERED_REGS:22932,22932 FP_TOP_REG:36036,36036 FP_SECOND_REG:36036,36036 FLOAT_REGS:36036,36036 SSE_FIRST_REG:1638,1638 SSE_REGS:1638,1638 FP_TOP_SSE_REGS:36036,36036 FP_SECOND_SSE_REGS:36036,36036 FLOAT_SSE_REGS:36036,36036 FLOAT_INT_REGS:36036,36036 INT_SSE_REGS:22932,22932 FLOAT_INT_SSE_REGS:36036,36036 ALL_REGS:2000000,2000000 MEM:14742,14742
  a185(r384,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23660,23660 SSE_REGS:23660,23660 MMX_REGS:23660,23660 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:23660,23660 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6370,6370
  a186(r382,l2) costs: AREG:1820,1820 DREG:1820,1820 CREG:1820,1820 BREG:1820,1820 SIREG:1820,1820 DIREG:1820,1820 AD_REGS:1820,1820 Q_REGS:1820,1820 NON_Q_REGS:1820,1820 INDEX_REGS:1820,1820 GENERAL_REGS:1820,1820 LEGACY_REGS:1820,1820 CLOBBERED_REGS:1820,1820 SSE_FIRST_REG:25480,25480 SSE_REGS:25480,25480 MMX_REGS:25480,25480 FP_TOP_SSE_REGS:60636850,60636850 FP_SECOND_SSE_REGS:60636850,60636850 FLOAT_SSE_REGS:60636850,60636850 FLOAT_INT_REGS:60636850,60636850 INT_SSE_REGS:25480,25480 FLOAT_INT_SSE_REGS:60636850,60636850 ALL_REGS:60636850,60636850 MEM:9100,9100
  a187(r63,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a188(r64,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,13 SSE_REGS:0,13 MMX_REGS:0,13 FP_TOP_SSE_REGS:0,65535 FP_SECOND_SSE_REGS:0,65535 FLOAT_SSE_REGS:0,65535 FLOAT_INT_REGS:0,65535 INT_SSE_REGS:0,13 FLOAT_INT_SSE_REGS:0,65535 ALL_REGS:0,65535 MEM:0,4
  a189(r66,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,13 SSE_REGS:0,13 MMX_REGS:0,13 FP_TOP_SSE_REGS:0,65535 FP_SECOND_SSE_REGS:0,65535 FLOAT_SSE_REGS:0,65535 FLOAT_INT_REGS:0,65535 INT_SSE_REGS:0,13 FLOAT_INT_SSE_REGS:0,65535 ALL_REGS:0,65535 MEM:0,4
  a190(r68,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,39 SSE_REGS:0,39 MMX_REGS:0,39 FP_TOP_SSE_REGS:0,196605 FP_SECOND_SSE_REGS:0,196605 FLOAT_SSE_REGS:0,196605 FLOAT_INT_REGS:0,196605 INT_SSE_REGS:0,39 FLOAT_INT_SSE_REGS:0,196605 ALL_REGS:0,196605 MEM:0,12
  a191(r84,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a192(r85,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a193(r101,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a194(r115,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a195(r163,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a196(r202,l3) costs: AREG:0,910 DREG:0,910 CREG:0,910 BREG:0,910 SIREG:0,910 DIREG:0,910 AD_REGS:0,910 Q_REGS:0,910 NON_Q_REGS:0,910 INDEX_REGS:0,910 GENERAL_REGS:0,910 LEGACY_REGS:0,910 CLOBBERED_REGS:0,910 FP_TOP_REG:0,1470 FP_SECOND_REG:0,1470 FLOAT_REGS:0,1470 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:0,1470 FP_SECOND_SSE_REGS:0,1470 FLOAT_SSE_REGS:0,1470 FLOAT_INT_REGS:0,1470 INT_SSE_REGS:0,910 FLOAT_INT_SSE_REGS:0,1470 ALL_REGS:0,2000000 MEM:0,537
  a197(r209,l3) costs: AREG:0,65 DREG:0,65 CREG:0,65 BREG:0,65 SIREG:0,65 DIREG:0,65 AD_REGS:0,65 Q_REGS:0,65 NON_Q_REGS:0,65 INDEX_REGS:0,65 GENERAL_REGS:0,65 LEGACY_REGS:0,65 CLOBBERED_REGS:0,65 FP_TOP_REG:0,105 FP_SECOND_REG:0,105 FLOAT_REGS:0,105 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,85 FP_TOP_SSE_REGS:0,105 FP_SECOND_SSE_REGS:0,105 FLOAT_SSE_REGS:0,105 FLOAT_INT_REGS:0,105 INT_SSE_REGS:0,65 FLOAT_INT_SSE_REGS:0,105 ALL_REGS:0,105 MEM:0,35
  a198(r214,l3) costs: AREG:0,65 DREG:0,65 CREG:0,65 BREG:0,65 SIREG:0,65 DIREG:0,65 AD_REGS:0,65 Q_REGS:0,65 NON_Q_REGS:0,65 INDEX_REGS:0,65 GENERAL_REGS:0,65 LEGACY_REGS:0,65 CLOBBERED_REGS:0,65 FP_TOP_REG:0,105 FP_SECOND_REG:0,105 FLOAT_REGS:0,105 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,85 FP_TOP_SSE_REGS:0,105 FP_SECOND_SSE_REGS:0,105 FLOAT_SSE_REGS:0,105 FLOAT_INT_REGS:0,105 INT_SSE_REGS:0,65 FLOAT_INT_SSE_REGS:0,105 ALL_REGS:0,105 MEM:0,35
  a199(r244,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a200(r257,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a201(r270,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a202(r281,l3) costs: AREG:0,8 DREG:0,8 CREG:0,8 BREG:0,8 SIREG:0,8 DIREG:0,8 AD_REGS:0,8 Q_REGS:0,8 NON_Q_REGS:0,8 INDEX_REGS:0,8 GENERAL_REGS:0,8 LEGACY_REGS:0,8 CLOBBERED_REGS:0,8 SSE_FIRST_REG:936,1009 SSE_REGS:936,1009 MMX_REGS:936,1009 FP_TOP_SSE_REGS:4000000,4327683 FP_SECOND_SSE_REGS:4000000,4327683 FLOAT_SSE_REGS:4000000,4327683 FLOAT_INT_REGS:4000000,4327683 INT_SSE_REGS:936,1009 FLOAT_INT_SSE_REGS:4000000,4327683 ALL_REGS:4000000,4327683 MEM:234,261
  a203(r282,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a204(r292,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1456,3835 SSE_REGS:1456,3835 MMX_REGS:1456,3835 FP_TOP_SSE_REGS:7339920,19332825 FP_SECOND_SSE_REGS:7339920,19332825 FLOAT_SSE_REGS:7339920,19332825 FLOAT_INT_REGS:7339920,19332825 INT_SSE_REGS:1456,3835 FLOAT_INT_SSE_REGS:7339920,19332825 ALL_REGS:7339920,19332825 MEM:448,1180
  a205(r498,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,13 SSE_REGS:0,13 MMX_REGS:0,13 FP_TOP_SSE_REGS:0,65535 FP_SECOND_SSE_REGS:0,65535 FLOAT_SSE_REGS:0,65535 FLOAT_INT_REGS:0,65535 INT_SSE_REGS:0,13 FLOAT_INT_SSE_REGS:0,65535 ALL_REGS:0,65535 MEM:0,3
  a206(r499,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,13 SSE_REGS:0,13 MMX_REGS:0,13 FP_TOP_SSE_REGS:0,65535 FP_SECOND_SSE_REGS:0,65535 FLOAT_SSE_REGS:0,65535 FLOAT_INT_REGS:0,65535 INT_SSE_REGS:0,13 FLOAT_INT_SSE_REGS:0,65535 ALL_REGS:0,65535 MEM:0,3
  a207(r500,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,39 SSE_REGS:0,39 MMX_REGS:0,39 FP_TOP_SSE_REGS:0,196605 FP_SECOND_SSE_REGS:0,196605 FLOAT_SSE_REGS:0,196605 FLOAT_INT_REGS:0,196605 INT_SSE_REGS:0,39 FLOAT_INT_SSE_REGS:0,196605 ALL_REGS:0,196605 MEM:0,9
  a208(r501,l3) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a209(r502,l3) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a210(r503,l3) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a211(r280,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:52,2561 SSE_REGS:52,2561 MMX_REGS:52,2561 FP_TOP_SSE_REGS:262140,4589815 FP_SECOND_SSE_REGS:262140,4589815 FLOAT_SSE_REGS:262140,4589815 FLOAT_INT_REGS:262140,4589815 INT_SSE_REGS:52,2561 FLOAT_INT_SSE_REGS:262140,4589815 ALL_REGS:262140,4589815 MEM:16,595
  a212(r229,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:104,1339 SSE_REGS:104,1339 MMX_REGS:104,1339 FP_TOP_SSE_REGS:524280,2589815 FP_SECOND_SSE_REGS:524280,2589815 FLOAT_SSE_REGS:524280,2589815 FLOAT_INT_REGS:524280,2589815 INT_SSE_REGS:104,1339 FLOAT_INT_SSE_REGS:524280,2589815 ALL_REGS:524280,2589815 MEM:32,365
  a213(r220,l3) costs: AREG:387,387 DREG:387,387 CREG:387,387 BREG:387,387 SIREG:387,387 DIREG:387,387 AD_REGS:387,387 Q_REGS:387,387 NON_Q_REGS:387,387 INDEX_REGS:387,387 GENERAL_REGS:387,387 LEGACY_REGS:387,387 CLOBBERED_REGS:387,387 FP_TOP_REG:909,909 FP_SECOND_REG:909,909 FLOAT_REGS:909,909 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:729,729 FP_TOP_SSE_REGS:909,909 FP_SECOND_SSE_REGS:909,909 FLOAT_SSE_REGS:909,909 FLOAT_INT_REGS:909,909 INT_SSE_REGS:585,585 FLOAT_INT_SSE_REGS:909,909 ALL_REGS:909,909 MEM:315,315
  a214(r428,l3) costs: AREG:135,135 DREG:135,135 CREG:135,135 BREG:135,135 SIREG:135,135 DIREG:135,135 AD_REGS:135,135 Q_REGS:135,135 NON_Q_REGS:135,135 INDEX_REGS:135,135 GENERAL_REGS:135,135 LEGACY_REGS:135,135 CLOBBERED_REGS:135,135 FP_TOP_REG:360,360 FP_SECOND_REG:360,360 FLOAT_REGS:360,360 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:288,288 FP_TOP_SSE_REGS:360,360 FP_SECOND_SSE_REGS:360,360 FLOAT_SSE_REGS:360,360 FLOAT_INT_REGS:360,360 INT_SSE_REGS:234,234 FLOAT_INT_SSE_REGS:360,360 ALL_REGS:360,360 MEM:126,126
  a215(r222,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:351,351 SSE_REGS:351,351 MMX_REGS:351,351 FP_TOP_SSE_REGS:1589815,1589815 FP_SECOND_SSE_REGS:1589815,1589815 FLOAT_SSE_REGS:1589815,1589815 FLOAT_INT_REGS:1589815,1589815 INT_SSE_REGS:351,351 FLOAT_INT_SSE_REGS:1589815,1589815 ALL_REGS:1589815,1589815 MEM:108,108
  a216(r223,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:585,585 SSE_REGS:585,585 MMX_REGS:585,585 FP_TOP_SSE_REGS:2769445,2769445 FP_SECOND_SSE_REGS:2769445,2769445 FLOAT_SSE_REGS:2769445,2769445 FLOAT_INT_REGS:2769445,2769445 INT_SSE_REGS:585,585 FLOAT_INT_SSE_REGS:2769445,2769445 ALL_REGS:2769445,2769445 MEM:180,180
  a217(r427,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:702,702 SSE_REGS:702,702 MMX_REGS:702,702 FP_TOP_SSE_REGS:3179630,3179630 FP_SECOND_SSE_REGS:3179630,3179630 FLOAT_SSE_REGS:3179630,3179630 FLOAT_INT_REGS:3179630,3179630 INT_SSE_REGS:702,702 FLOAT_INT_SSE_REGS:3179630,3179630 ALL_REGS:3179630,3179630 MEM:216,216
  a218(r425,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:468,468 SSE_REGS:468,468 MMX_REGS:468,468 FP_TOP_SSE_REGS:2179630,2179630 FP_SECOND_SSE_REGS:2179630,2179630 FLOAT_SSE_REGS:2179630,2179630 FLOAT_INT_REGS:2179630,2179630 INT_SSE_REGS:468,468 FLOAT_INT_SSE_REGS:2179630,2179630 ALL_REGS:2179630,2179630 MEM:0,0
  a219(r426,l3) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:468,468 SSE_REGS:468,468 MMX_REGS:468,468 FP_TOP_SSE_REGS:2179630,2179630 FP_SECOND_SSE_REGS:2179630,2179630 FLOAT_SSE_REGS:2179630,2179630 FLOAT_INT_REGS:2179630,2179630 INT_SSE_REGS:468,468 FLOAT_INT_SSE_REGS:2179630,2179630 ALL_REGS:2179630,2179630 MEM:0,0
  a220(r63,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a221(r64,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,13 SSE_REGS:13,13 MMX_REGS:13,13 FP_TOP_SSE_REGS:65535,65535 FP_SECOND_SSE_REGS:65535,65535 FLOAT_SSE_REGS:65535,65535 FLOAT_INT_REGS:65535,65535 INT_SSE_REGS:13,13 FLOAT_INT_SSE_REGS:65535,65535 ALL_REGS:65535,65535 MEM:4,4
  a222(r66,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,13 SSE_REGS:13,13 MMX_REGS:13,13 FP_TOP_SSE_REGS:65535,65535 FP_SECOND_SSE_REGS:65535,65535 FLOAT_SSE_REGS:65535,65535 FLOAT_INT_REGS:65535,65535 INT_SSE_REGS:13,13 FLOAT_INT_SSE_REGS:65535,65535 ALL_REGS:65535,65535 MEM:4,4
  a223(r68,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:12,12
  a224(r84,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a225(r85,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a226(r101,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a227(r115,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a228(r163,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a229(r202,l4) costs: AREG:910,910 DREG:910,910 CREG:910,910 BREG:910,910 SIREG:910,910 DIREG:910,910 AD_REGS:910,910 Q_REGS:910,910 NON_Q_REGS:910,910 INDEX_REGS:910,910 GENERAL_REGS:910,910 LEGACY_REGS:910,910 CLOBBERED_REGS:910,910 FP_TOP_REG:1470,1470 FP_SECOND_REG:1470,1470 FLOAT_REGS:1470,1470 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:1470,1470 FP_SECOND_SSE_REGS:1470,1470 FLOAT_SSE_REGS:1470,1470 FLOAT_INT_REGS:1470,1470 INT_SSE_REGS:910,910 FLOAT_INT_SSE_REGS:1470,1470 ALL_REGS:2000000,2000000 MEM:537,537
  a230(r209,l4) costs: AREG:65,65 DREG:65,65 CREG:65,65 BREG:65,65 SIREG:65,65 DIREG:65,65 AD_REGS:65,65 Q_REGS:65,65 NON_Q_REGS:65,65 INDEX_REGS:65,65 GENERAL_REGS:65,65 LEGACY_REGS:65,65 CLOBBERED_REGS:65,65 FP_TOP_REG:105,105 FP_SECOND_REG:105,105 FLOAT_REGS:105,105 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:85,85 FP_TOP_SSE_REGS:105,105 FP_SECOND_SSE_REGS:105,105 FLOAT_SSE_REGS:105,105 FLOAT_INT_REGS:105,105 INT_SSE_REGS:65,65 FLOAT_INT_SSE_REGS:105,105 ALL_REGS:105,105 MEM:35,35
  a231(r214,l4) costs: AREG:65,65 DREG:65,65 CREG:65,65 BREG:65,65 SIREG:65,65 DIREG:65,65 AD_REGS:65,65 Q_REGS:65,65 NON_Q_REGS:65,65 INDEX_REGS:65,65 GENERAL_REGS:65,65 LEGACY_REGS:65,65 CLOBBERED_REGS:65,65 FP_TOP_REG:105,105 FP_SECOND_REG:105,105 FLOAT_REGS:105,105 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:85,85 FP_TOP_SSE_REGS:105,105 FP_SECOND_SSE_REGS:105,105 FLOAT_SSE_REGS:105,105 FLOAT_INT_REGS:105,105 INT_SSE_REGS:65,65 FLOAT_INT_SSE_REGS:105,105 ALL_REGS:105,105 MEM:35,35
  a232(r229,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1235,1235 SSE_REGS:1235,1235 MMX_REGS:1235,1235 FP_TOP_SSE_REGS:2065535,2065535 FP_SECOND_SSE_REGS:2065535,2065535 FLOAT_SSE_REGS:2065535,2065535 FLOAT_INT_REGS:2065535,2065535 INT_SSE_REGS:1235,1235 FLOAT_INT_SSE_REGS:2065535,2065535 ALL_REGS:2065535,2065535 MEM:333,333
  a233(r244,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a234(r257,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a235(r270,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a236(r280,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2509,2509 SSE_REGS:2509,2509 MMX_REGS:2509,2509 FP_TOP_SSE_REGS:4327675,4327675 FP_SECOND_SSE_REGS:4327675,4327675 FLOAT_SSE_REGS:4327675,4327675 FLOAT_INT_REGS:4327675,4327675 INT_SSE_REGS:2509,2509 FLOAT_INT_SSE_REGS:4327675,4327675 ALL_REGS:4327675,4327675 MEM:579,579
  a237(r281,l4) costs: AREG:8,8 DREG:8,8 CREG:8,8 BREG:8,8 SIREG:8,8 DIREG:8,8 AD_REGS:8,8 Q_REGS:8,8 NON_Q_REGS:8,8 INDEX_REGS:8,8 GENERAL_REGS:8,8 LEGACY_REGS:8,8 CLOBBERED_REGS:8,8 SSE_FIRST_REG:73,73 SSE_REGS:73,73 MMX_REGS:73,73 FP_TOP_SSE_REGS:327683,327683 FP_SECOND_SSE_REGS:327683,327683 FLOAT_SSE_REGS:327683,327683 FLOAT_INT_REGS:327683,327683 INT_SSE_REGS:73,73 FLOAT_INT_SSE_REGS:327683,327683 ALL_REGS:327683,327683 MEM:27,27
  a238(r282,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 FLOAT_INT_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a239(r292,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:2379,2379 SSE_REGS:2379,2379 MMX_REGS:2379,2379 FP_TOP_SSE_REGS:11992905,11992905 FP_SECOND_SSE_REGS:11992905,11992905 FLOAT_SSE_REGS:11992905,11992905 FLOAT_INT_REGS:11992905,11992905 INT_SSE_REGS:2379,2379 FLOAT_INT_SSE_REGS:11992905,11992905 ALL_REGS:11992905,11992905 MEM:732,732
  a240(r498,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,13 SSE_REGS:13,13 MMX_REGS:13,13 FP_TOP_SSE_REGS:65535,65535 FP_SECOND_SSE_REGS:65535,65535 FLOAT_SSE_REGS:65535,65535 FLOAT_INT_REGS:65535,65535 INT_SSE_REGS:13,13 FLOAT_INT_SSE_REGS:65535,65535 ALL_REGS:65535,65535 MEM:3,3
  a241(r499,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13,13 SSE_REGS:13,13 MMX_REGS:13,13 FP_TOP_SSE_REGS:65535,65535 FP_SECOND_SSE_REGS:65535,65535 FLOAT_SSE_REGS:65535,65535 FLOAT_INT_REGS:65535,65535 INT_SSE_REGS:13,13 FLOAT_INT_SSE_REGS:65535,65535 ALL_REGS:65535,65535 MEM:3,3
  a242(r500,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:9,9
  a243(r501,l4) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a244(r502,l4) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a245(r503,l4) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_SSE_REGS:0,0 INT_SSE_REGS:0,0 FLOAT_INT_SSE_REGS:0,0 ALL_REGS:0,0 MEM:0,0
  a246(r461,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a247(r247,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:11,11
  a248(r463,l4) costs: AREG:8,8 DREG:8,8 CREG:8,8 BREG:8,8 SIREG:8,8 DIREG:8,8 AD_REGS:8,8 Q_REGS:8,8 NON_Q_REGS:8,8 INDEX_REGS:8,8 GENERAL_REGS:8,8 LEGACY_REGS:8,8 CLOBBERED_REGS:8,8 FP_TOP_REG:40,40 FP_SECOND_REG:40,40 FLOAT_REGS:40,40 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 FP_TOP_SSE_REGS:40,40 FP_SECOND_SSE_REGS:40,40 FLOAT_SSE_REGS:40,40 FLOAT_INT_REGS:40,40 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:40,40 ALL_REGS:131070,131070 MEM:14,14
  a249(r508,l4) costs: AREG:15,15 DREG:15,15 CREG:15,15 BREG:15,15 SIREG:15,15 DIREG:15,15 AD_REGS:15,15 Q_REGS:15,15 NON_Q_REGS:15,15 INDEX_REGS:15,15 GENERAL_REGS:15,15 LEGACY_REGS:15,15 CLOBBERED_REGS:15,15 FP_TOP_REG:40,40 FP_SECOND_REG:40,40 FLOAT_REGS:40,40 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:40,40 FP_SECOND_SSE_REGS:40,40 FLOAT_SSE_REGS:40,40 FLOAT_INT_REGS:40,40 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:40,40 ALL_REGS:131070,131070 MEM:13,13
  a250(r460,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a251(r458,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a252(r457,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a253(r456,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a254(r452,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:8,8
  a255(r261,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 FP_TOP_SSE_REGS:196605,196605 FP_SECOND_SSE_REGS:196605,196605 FLOAT_SSE_REGS:196605,196605 FLOAT_INT_REGS:196605,196605 INT_SSE_REGS:39,39 FLOAT_INT_SSE_REGS:196605,196605 ALL_REGS:196605,196605 MEM:11,11
  a256(r454,l4) costs: AREG:8,8 DREG:8,8 CREG:8,8 BREG:8,8 SIREG:8,8 DIREG:8,8 AD_REGS:8,8 Q_REGS:8,8 NON_Q_REGS:8,8 INDEX_REGS:8,8 GENERAL_REGS:8,8 LEGACY_REGS:8,8 CLOBBERED_REGS:8,8 FP_TOP_REG:40,40 FP_SECOND_REG:40,40 FLOAT_REGS:40,40 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 FP_TOP_SSE_REGS:40,40 FP_SECOND_SSE_REGS:40,40 FLOAT_SSE_REGS:40,40 FLOAT_INT_REGS:40,40 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:40,40 ALL_REGS:131070,131070 MEM:14,14
  a257(r507,l4) costs: AREG:15,15 DREG:15,15 CREG:15,15 BREG:15,15 SIREG:15,15 DIREG:15,15 AD_REGS:15,15 Q_REGS:15,15 NON_Q_REGS:15,15 INDEX_REGS:15,15 GENERAL_REGS:15,15 LEGACY_REGS:15,15 CLOBBERED_REGS:15,15 FP_TOP_REG:40,40 FP_SECOND_REG:40,40 FLOAT_REGS:40,40 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:40,40 FP_SECOND_SSE_REGS:40,40 FLOAT_SSE_REGS:40,40 FLOAT_INT_REGS:40,40 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:40,40 ALL_REGS:131070,131070 MEM:13,13
  a258(r451,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a259(r449,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a260(r448,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a261(r447,l4) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 INDEX_REGS:2,2 GENERAL_REGS:2,2 LEGACY_REGS:2,2 CLOBBERED_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 FP_TOP_SSE_REGS:131072,131072 FP_SECOND_SSE_REGS:131072,131072 FLOAT_SSE_REGS:131072,131072 FLOAT_INT_REGS:131072,131072 INT_SSE_REGS:28,28 FLOAT_INT_SSE_REGS:131072,131072 ALL_REGS:131072,131072 MEM:9,9
  a262(r443,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:24,24
  a263(r274,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-3,-3 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:117,117 SSE_REGS:117,117 MMX_REGS:117,117 FP_TOP_SSE_REGS:589815,589815 FP_SECOND_SSE_REGS:589815,589815 FLOAT_SSE_REGS:589815,589815 FLOAT_INT_REGS:589815,589815 INT_SSE_REGS:117,117 FLOAT_INT_SSE_REGS:589815,589815 ALL_REGS:589815,589815 MEM:33,33
  a264(r445,l4) costs: AREG:24,24 DREG:24,24 CREG:24,24 BREG:24,24 SIREG:24,24 DIREG:24,24 AD_REGS:24,24 Q_REGS:24,24 NON_Q_REGS:24,24 INDEX_REGS:24,24 GENERAL_REGS:24,24 LEGACY_REGS:24,24 CLOBBERED_REGS:24,24 FP_TOP_REG:120,120 FP_SECOND_REG:120,120 FLOAT_REGS:120,120 SSE_FIRST_REG:-3,-3 SSE_REGS:0,0 FP_TOP_SSE_REGS:120,120 FP_SECOND_SSE_REGS:120,120 FLOAT_SSE_REGS:120,120 FLOAT_INT_REGS:120,120 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:120,120 ALL_REGS:393210,393210 MEM:42,42
  a265(r506,l4) costs: AREG:45,45 DREG:45,45 CREG:45,45 BREG:45,45 SIREG:45,45 DIREG:45,45 AD_REGS:45,45 Q_REGS:45,45 NON_Q_REGS:45,45 INDEX_REGS:45,45 GENERAL_REGS:45,45 LEGACY_REGS:45,45 CLOBBERED_REGS:45,45 FP_TOP_REG:120,120 FP_SECOND_REG:120,120 FLOAT_REGS:120,120 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:120,120 FP_SECOND_SSE_REGS:120,120 FLOAT_SSE_REGS:120,120 FLOAT_INT_REGS:120,120 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:120,120 ALL_REGS:393210,393210 MEM:39,39
  a266(r442,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:21,21
  a267(r440,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:21,21
  a268(r439,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 FP_TOP_SSE_REGS:393210,393210 FP_SECOND_SSE_REGS:393210,393210 FLOAT_SSE_REGS:393210,393210 FLOAT_INT_REGS:393210,393210 INT_SSE_REGS:78,78 FLOAT_INT_SSE_REGS:393210,393210 ALL_REGS:393210,393210 MEM:18,18
  a269(r438,l4) costs: AREG:6,6 DREG:6,6 CREG:6,6 BREG:6,6 SIREG:6,6 DIREG:6,6 AD_REGS:6,6 Q_REGS:6,6 NON_Q_REGS:6,6 INDEX_REGS:6,6 GENERAL_REGS:6,6 LEGACY_REGS:6,6 CLOBBERED_REGS:6,6 SSE_FIRST_REG:84,84 SSE_REGS:84,84 MMX_REGS:84,84 FP_TOP_SSE_REGS:393216,393216 FP_SECOND_SSE_REGS:393216,393216 FLOAT_SSE_REGS:393216,393216 FLOAT_INT_REGS:393216,393216 INT_SSE_REGS:84,84 FLOAT_INT_SSE_REGS:393216,393216 ALL_REGS:393216,393216 MEM:27,27
  a270(r436,l4) costs: AREG:182,182 DREG:182,182 CREG:182,182 BREG:182,182 SIREG:182,182 DIREG:182,182 AD_REGS:182,182 Q_REGS:182,182 NON_Q_REGS:182,182 INDEX_REGS:182,182 GENERAL_REGS:182,182 LEGACY_REGS:182,182 CLOBBERED_REGS:182,182 FP_TOP_REG:294,294 FP_SECOND_REG:294,294 FLOAT_REGS:294,294 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:294,294 FP_SECOND_SSE_REGS:294,294 FLOAT_SSE_REGS:294,294 FLOAT_INT_REGS:294,294 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:294,294 ALL_REGS:917490,917490 MEM:105,105
  a271(r437,l4) costs: AREG:105,105 DREG:105,105 CREG:105,105 BREG:105,105 SIREG:105,105 DIREG:105,105 AD_REGS:105,105 Q_REGS:105,105 NON_Q_REGS:105,105 INDEX_REGS:105,105 GENERAL_REGS:105,105 LEGACY_REGS:105,105 CLOBBERED_REGS:105,105 FP_TOP_REG:280,280 FP_SECOND_REG:280,280 FLOAT_REGS:280,280 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:280,280 FP_SECOND_SSE_REGS:280,280 FLOAT_SSE_REGS:280,280 FLOAT_INT_REGS:280,280 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:280,280 ALL_REGS:917490,917490 MEM:28,28
  a272(r434,l4) costs: AREG:182,182 DREG:182,182 CREG:182,182 BREG:182,182 SIREG:182,182 DIREG:182,182 AD_REGS:182,182 Q_REGS:182,182 NON_Q_REGS:182,182 INDEX_REGS:182,182 GENERAL_REGS:182,182 LEGACY_REGS:182,182 CLOBBERED_REGS:182,182 FP_TOP_REG:294,294 FP_SECOND_REG:294,294 FLOAT_REGS:294,294 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:294,294 FP_SECOND_SSE_REGS:294,294 FLOAT_SSE_REGS:294,294 FLOAT_INT_REGS:294,294 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:294,294 ALL_REGS:917490,917490 MEM:105,105
  a273(r435,l4) costs: AREG:105,105 DREG:105,105 CREG:105,105 BREG:105,105 SIREG:105,105 DIREG:105,105 AD_REGS:105,105 Q_REGS:105,105 NON_Q_REGS:105,105 INDEX_REGS:105,105 GENERAL_REGS:105,105 LEGACY_REGS:105,105 CLOBBERED_REGS:105,105 FP_TOP_REG:280,280 FP_SECOND_REG:280,280 FLOAT_REGS:280,280 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:280,280 FP_SECOND_SSE_REGS:280,280 FLOAT_SSE_REGS:280,280 FLOAT_INT_REGS:280,280 INT_SSE_REGS:182,182 FLOAT_INT_SSE_REGS:280,280 ALL_REGS:917490,917490 MEM:28,28
  a274(r432,l4) costs: AREG:286,286 DREG:286,286 CREG:286,286 BREG:286,286 SIREG:286,286 DIREG:286,286 AD_REGS:286,286 Q_REGS:286,286 NON_Q_REGS:286,286 INDEX_REGS:286,286 GENERAL_REGS:286,286 LEGACY_REGS:286,286 CLOBBERED_REGS:286,286 FP_TOP_REG:462,462 FP_SECOND_REG:462,462 FLOAT_REGS:462,462 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:462,462 FP_SECOND_SSE_REGS:462,462 FLOAT_SSE_REGS:462,462 FLOAT_INT_REGS:462,462 INT_SSE_REGS:286,286 FLOAT_INT_SSE_REGS:462,462 ALL_REGS:1441770,1441770 MEM:165,165
  a275(r433,l4) costs: AREG:165,165 DREG:165,165 CREG:165,165 BREG:165,165 SIREG:165,165 DIREG:165,165 AD_REGS:165,165 Q_REGS:165,165 NON_Q_REGS:165,165 INDEX_REGS:165,165 GENERAL_REGS:165,165 LEGACY_REGS:165,165 CLOBBERED_REGS:165,165 FP_TOP_REG:440,440 FP_SECOND_REG:440,440 FLOAT_REGS:440,440 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:440,440 FP_SECOND_SSE_REGS:440,440 FLOAT_SSE_REGS:440,440 FLOAT_INT_REGS:440,440 INT_SSE_REGS:286,286 FLOAT_INT_SSE_REGS:440,440 ALL_REGS:1441770,1441770 MEM:44,44
  a276(r431,l4) costs: AREG:598,598 DREG:598,598 CREG:598,598 BREG:598,598 SIREG:598,598 DIREG:598,598 AD_REGS:598,598 Q_REGS:598,598 NON_Q_REGS:598,598 INDEX_REGS:598,598 GENERAL_REGS:598,598 LEGACY_REGS:598,598 CLOBBERED_REGS:598,598 FP_TOP_REG:966,966 FP_SECOND_REG:966,966 FLOAT_REGS:966,966 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:966,966 FP_SECOND_SSE_REGS:966,966 FLOAT_SSE_REGS:966,966 FLOAT_INT_REGS:966,966 INT_SSE_REGS:598,598 FLOAT_INT_SSE_REGS:966,966 ALL_REGS:2000000,2000000 MEM:368,368
  a277(r231,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:910,910 SSE_REGS:910,910 MMX_REGS:910,910 FP_TOP_SSE_REGS:2507305,2507305 FP_SECOND_SSE_REGS:2507305,2507305 FLOAT_SSE_REGS:2507305,2507305 FLOAT_INT_REGS:2507305,2507305 INT_SSE_REGS:910,910 FLOAT_INT_SSE_REGS:2507305,2507305 ALL_REGS:2507305,2507305 MEM:280,280
  a278(r232,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1521,1521 SSE_REGS:1521,1521 MMX_REGS:1521,1521 FP_TOP_SSE_REGS:5587450,5587450 FP_SECOND_SSE_REGS:5587450,5587450 FLOAT_SSE_REGS:5587450,5587450 FLOAT_INT_REGS:5587450,5587450 INT_SSE_REGS:1521,1521 FLOAT_INT_SSE_REGS:5587450,5587450 ALL_REGS:5587450,5587450 MEM:468,468
  a279(r430,l4) costs: AREG:1222,1222 DREG:1222,1222 CREG:1222,1222 BREG:1222,1222 SIREG:1222,1222 DIREG:1222,1222 AD_REGS:1222,1222 Q_REGS:1222,1222 NON_Q_REGS:1222,1222 INDEX_REGS:1222,1222 GENERAL_REGS:1222,1222 LEGACY_REGS:1222,1222 CLOBBERED_REGS:1222,1222 FP_TOP_REG:1974,1974 FP_SECOND_REG:1974,1974 FLOAT_REGS:1974,1974 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_SSE_REGS:1974,1974 FP_SECOND_SSE_REGS:1974,1974 FLOAT_SSE_REGS:1974,1974 FLOAT_INT_REGS:1974,1974 INT_SSE_REGS:1222,1222 FLOAT_INT_SSE_REGS:1974,1974 ALL_REGS:2000000,2000000 MEM:705,705
  a280(r429,l4) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:1833,1833 SSE_REGS:1833,1833 MMX_REGS:1833,1833 FP_TOP_SSE_REGS:5080145,5080145 FP_SECOND_SSE_REGS:5080145,5080145 FLOAT_SSE_REGS:5080145,5080145 FLOAT_INT_REGS:5080145,5080145 INT_SSE_REGS:1833,1833 FLOAT_INT_SSE_REGS:5080145,5080145 ALL_REGS:5080145,5080145 MEM:564,564

   Insn 695(l0): point = 1
   Insn 357(l0): point = 4
   Insn 278(l0): point = 6
   Insn 269(l0): point = 8
   Insn 49(l0): point = 10
   Insn 48(l0): point = 12
   Insn 47(l0): point = 14
   Insn 46(l0): point = 16
   Insn 44(l0): point = 18
   Insn 42(l0): point = 21
   Insn 41(l0): point = 23
   Insn 40(l0): point = 25
   Insn 39(l0): point = 27
   Insn 38(l0): point = 29
   Insn 726(l0): point = 32
   Insn 6(l0): point = 34
   Insn 648(l0): point = 36
   Insn 36(l0): point = 39
   Insn 35(l0): point = 41
   Insn 34(l0): point = 43
   Insn 32(l0): point = 45
   Insn 31(l0): point = 47
   Insn 30(l0): point = 50
   Insn 29(l0): point = 52
   Insn 28(l0): point = 54
   Insn 27(l0): point = 56
   Insn 26(l0): point = 58
   Insn 25(l0): point = 60
   Insn 24(l0): point = 62
   Insn 23(l0): point = 64
   Insn 22(l0): point = 66
   Insn 21(l0): point = 68
   Insn 20(l0): point = 70
   Insn 18(l0): point = 72
   Insn 17(l0): point = 74
   Insn 15(l0): point = 76
   Insn 14(l0): point = 78
   Insn 12(l0): point = 80
   Insn 4(l0): point = 82
   Insn 724(l1): point = 85
   Insn 509(l1): point = 87
   Insn 532(l1): point = 89
   Insn 555(l1): point = 91
   Insn 7(l1): point = 93
   Insn 635(l1): point = 95
   Insn 58(l1): point = 98
   Insn 57(l1): point = 100
   Insn 55(l1): point = 102
   Insn 54(l1): point = 104
   Insn 53(l1): point = 106
   Insn 66(l1): point = 109
   Insn 65(l1): point = 111
   Insn 63(l1): point = 113
   Insn 697(l1): point = 116
   Insn 75(l1): point = 118
   Insn 74(l1): point = 120
   Insn 73(l1): point = 122
   Insn 702(l1): point = 125
   Insn 291(l1): point = 127
   Insn 290(l1): point = 129
   Insn 289(l1): point = 131
   Insn 632(l1): point = 134
   Insn 631(l1): point = 136
   Insn 627(l1): point = 139
   Insn 700(l1): point = 142
   Insn 284(l1): point = 145
   Insn 283(l1): point = 147
   Insn 281(l1): point = 150
   Insn 280(l1): point = 152
   Insn 279(l1): point = 154
   Insn 277(l1): point = 156
   Insn 276(l1): point = 158
   Insn 273(l1): point = 161
   Insn 272(l1): point = 163
   Insn 270(l1): point = 165
   Insn 268(l1): point = 167
   Insn 267(l1): point = 169
   Insn 266(l1): point = 171
   Insn 265(l1): point = 173
   Insn 262(l1): point = 176
   Insn 261(l1): point = 178
   Insn 259(l1): point = 180
   Insn 257(l1): point = 183
   Insn 256(l1): point = 185
   Insn 254(l1): point = 187
   Insn 252(l1): point = 189
   Insn 251(l1): point = 191
   Insn 250(l1): point = 193
   Insn 249(l1): point = 195
   Insn 248(l1): point = 197
   Insn 247(l1): point = 199
   Insn 246(l1): point = 201
   Insn 245(l1): point = 203
   Insn 244(l1): point = 205
   Insn 243(l1): point = 207
   Insn 242(l1): point = 209
   Insn 241(l1): point = 211
   Insn 239(l1): point = 213
   Insn 238(l1): point = 215
   Insn 237(l1): point = 217
   Insn 236(l1): point = 219
   Insn 235(l1): point = 221
   Insn 234(l1): point = 223
   Insn 233(l1): point = 225
   Insn 232(l1): point = 227
   Insn 231(l1): point = 229
   Insn 230(l1): point = 231
   Insn 229(l1): point = 233
   Insn 228(l1): point = 235
   Insn 227(l1): point = 237
   Insn 226(l1): point = 239
   Insn 225(l1): point = 241
   Insn 224(l1): point = 243
   Insn 223(l1): point = 245
   Insn 222(l1): point = 247
   Insn 221(l1): point = 249
   Insn 220(l1): point = 251
   Insn 219(l1): point = 253
   Insn 217(l1): point = 255
   Insn 216(l1): point = 257
   Insn 215(l1): point = 259
   Insn 214(l1): point = 261
   Insn 213(l1): point = 263
   Insn 212(l1): point = 265
   Insn 211(l1): point = 267
   Insn 210(l1): point = 269
   Insn 209(l1): point = 271
   Insn 208(l1): point = 273
   Insn 207(l1): point = 275
   Insn 206(l1): point = 277
   Insn 205(l1): point = 279
   Insn 204(l1): point = 281
   Insn 203(l1): point = 283
   Insn 202(l1): point = 285
   Insn 201(l1): point = 287
   Insn 200(l1): point = 289
   Insn 199(l1): point = 291
   Insn 198(l1): point = 293
   Insn 197(l1): point = 295
   Insn 195(l1): point = 297
   Insn 194(l1): point = 299
   Insn 193(l1): point = 301
   Insn 192(l1): point = 303
   Insn 191(l1): point = 305
   Insn 190(l1): point = 307
   Insn 189(l1): point = 309
   Insn 188(l1): point = 311
   Insn 187(l1): point = 313
   Insn 186(l1): point = 315
   Insn 185(l1): point = 317
   Insn 184(l1): point = 319
   Insn 182(l1): point = 321
   Insn 181(l1): point = 323
   Insn 180(l1): point = 325
   Insn 177(l1): point = 327
   Insn 176(l1): point = 329
   Insn 175(l1): point = 331
   Insn 173(l1): point = 333
   Insn 172(l1): point = 335
   Insn 171(l1): point = 337
   Insn 170(l1): point = 339
   Insn 164(l1): point = 341
   Insn 155(l1): point = 343
   Insn 154(l1): point = 345
   Insn 150(l1): point = 347
   Insn 149(l1): point = 349
   Insn 147(l1): point = 351
   Insn 143(l1): point = 353
   Insn 140(l1): point = 355
   Insn 124(l1): point = 357
   Insn 117(l1): point = 359
   Insn 116(l1): point = 361
   Insn 112(l1): point = 363
   Insn 111(l1): point = 365
   Insn 109(l1): point = 367
   Insn 105(l1): point = 369
   Insn 102(l1): point = 371
   Insn 86(l1): point = 373
   Insn 692(l1): point = 376
   Insn 705(l1): point = 379
   Insn 8(l2): point = 382
   Insn 423(l2): point = 384
   Insn 422(l2): point = 386
   Insn 303(l2): point = 389
   Insn 302(l2): point = 391
   Insn 300(l2): point = 393
   Insn 299(l2): point = 395
   Insn 297(l2): point = 397
   Insn 311(l2): point = 400
   Insn 310(l2): point = 402
   Insn 309(l2): point = 404
   Insn 305(l2): point = 406
   Insn 325(l2): point = 409
   Insn 324(l2): point = 411
   Insn 322(l2): point = 413
   Insn 321(l2): point = 415
   Insn 318(l2): point = 417
   Insn 329(l2): point = 420
   Insn 328(l2): point = 422
   Insn 327(l2): point = 424
   Insn 332(l2): point = 427
   Insn 331(l2): point = 429
   Insn 342(l2): point = 432
   Insn 341(l2): point = 434
   Insn 339(l2): point = 436
   Insn 338(l2): point = 438
   Insn 337(l2): point = 440
   Insn 336(l2): point = 442
   Insn 335(l2): point = 444
   Insn 347(l2): point = 447
   Insn 346(l2): point = 449
   Insn 345(l2): point = 451
   Insn 344(l2): point = 453
   Insn 352(l2): point = 456
   Insn 351(l2): point = 458
   Insn 350(l2): point = 460
   Insn 349(l2): point = 462
   Insn 420(l2): point = 465
   Insn 419(l2): point = 467
   Insn 720(l2): point = 470
   Insn 579(l2): point = 473
   Insn 578(l2): point = 475
   Insn 577(l2): point = 477
   Insn 576(l2): point = 479
   Insn 575(l2): point = 481
   Insn 574(l2): point = 483
   Insn 416(l2): point = 486
   Insn 415(l2): point = 488
   Insn 414(l2): point = 490
   Insn 413(l2): point = 492
   Insn 412(l2): point = 494
   Insn 411(l2): point = 496
   Insn 407(l2): point = 498
   Insn 406(l2): point = 500
   Insn 405(l2): point = 502
   Insn 404(l2): point = 504
   Insn 402(l2): point = 506
   Insn 401(l2): point = 508
   Insn 400(l2): point = 510
   Insn 397(l2): point = 512
   Insn 396(l2): point = 514
   Insn 395(l2): point = 516
   Insn 394(l2): point = 518
   Insn 393(l2): point = 520
   Insn 392(l2): point = 522
   Insn 391(l2): point = 524
   Insn 388(l2): point = 526
   Insn 387(l2): point = 528
   Insn 386(l2): point = 530
   Insn 385(l2): point = 532
   Insn 590(l2): point = 535
   Insn 589(l2): point = 537
   Insn 586(l2): point = 539
   Insn 611(l2): point = 542
   Insn 610(l2): point = 544
   Insn 609(l2): point = 546
   Insn 608(l2): point = 548
   Insn 607(l2): point = 550
   Insn 606(l2): point = 552
   Insn 604(l2): point = 554
   Insn 602(l2): point = 556
   Insn 601(l2): point = 558
   Insn 597(l2): point = 560
   Insn 596(l2): point = 562
   Insn 595(l2): point = 564
   Insn 594(l2): point = 566
   Insn 383(l2): point = 569
   Insn 382(l2): point = 571
   Insn 722(l2): point = 574
   Insn 619(l2): point = 576
   Insn 618(l2): point = 578
   Insn 617(l2): point = 580
   Insn 616(l2): point = 582
   Insn 615(l2): point = 584
   Insn 374(l2): point = 587
   Insn 373(l2): point = 589
   Insn 372(l2): point = 591
   Insn 370(l2): point = 593
   Insn 369(l2): point = 595
   Insn 366(l2): point = 597
   Insn 365(l2): point = 599
   Insn 364(l2): point = 601
   Insn 363(l2): point = 603
   Insn 359(l2): point = 605
   Insn 358(l2): point = 607
   Insn 356(l2): point = 609
   Insn 708(l2): point = 612
   Insn 9(l3): point = 615
   Insn 433(l3): point = 618
   Insn 432(l3): point = 620
   Insn 431(l3): point = 622
   Insn 430(l3): point = 624
   Insn 429(l3): point = 626
   Insn 428(l3): point = 628
   Insn 427(l3): point = 630
   Insn 426(l3): point = 632
   Insn 439(l3): point = 635
   Insn 438(l3): point = 637
   Insn 435(l3): point = 639
   Insn 457(l3): point = 642
   Insn 456(l3): point = 644
   Insn 455(l3): point = 646
   Insn 449(l3): point = 649
   Insn 448(l3): point = 651
   Insn 447(l3): point = 653
   Insn 711(l3): point = 656
   Insn 466(l4): point = 659
   Insn 465(l4): point = 661
   Insn 464(l4): point = 663
   Insn 463(l4): point = 665
   Insn 462(l4): point = 667
   Insn 461(l4): point = 669
   Insn 473(l4): point = 672
   Insn 472(l4): point = 674
   Insn 471(l4): point = 676
   Insn 468(l4): point = 678
   Insn 501(l4): point = 681
   Insn 500(l4): point = 683
   Insn 499(l4): point = 685
   Insn 498(l4): point = 687
   Insn 715(l4): point = 690
   Insn 543(l4): point = 692
   Insn 542(l4): point = 694
   Insn 541(l4): point = 696
   Insn 729(l4): point = 698
   Insn 540(l4): point = 700
   Insn 538(l4): point = 702
   Insn 536(l4): point = 704
   Insn 534(l4): point = 706
   Insn 533(l4): point = 708
   Insn 531(l4): point = 710
   Insn 530(l4): point = 712
   Insn 529(l4): point = 714
   Insn 483(l4): point = 717
   Insn 482(l4): point = 719
   Insn 481(l4): point = 721
   Insn 713(l4): point = 724
   Insn 520(l4): point = 726
   Insn 519(l4): point = 728
   Insn 518(l4): point = 730
   Insn 728(l4): point = 732
   Insn 517(l4): point = 734
   Insn 515(l4): point = 736
   Insn 513(l4): point = 738
   Insn 511(l4): point = 740
   Insn 510(l4): point = 742
   Insn 508(l4): point = 744
   Insn 507(l4): point = 746
   Insn 506(l4): point = 748
   Insn 527(l4): point = 751
   Insn 526(l4): point = 753
   Insn 496(l4): point = 756
   Insn 495(l4): point = 758
   Insn 494(l4): point = 760
   Insn 493(l4): point = 762
   Insn 717(l4): point = 765
   Insn 566(l4): point = 767
   Insn 565(l4): point = 769
   Insn 564(l4): point = 771
   Insn 730(l4): point = 773
   Insn 563(l4): point = 775
   Insn 561(l4): point = 777
   Insn 559(l4): point = 779
   Insn 557(l4): point = 781
   Insn 556(l4): point = 783
   Insn 554(l4): point = 785
   Insn 553(l4): point = 787
   Insn 552(l4): point = 789
   Insn 550(l4): point = 792
   Insn 549(l4): point = 794
   Insn 491(l4): point = 797
   Insn 490(l4): point = 799
   Insn 489(l4): point = 801
   Insn 488(l4): point = 803
 a0(r62): [39..43] [28..34]
 a1(r61): [39..45] [26..36]
 a2(r295): [37..47]
 a3(r64): [4..80]
 a4(r65): [13..78]
 a5(r66): [4..76]
 a6(r67): [15..74]
 a7(r68): [4..72]
 a8(r69): [11..70]
 a9(r71): [17..68]
 a10(r79): [30..56]
 a11(r292): [4..82]
 a12(r503): [4..4]
 a13(r502): [4..6]
 a14(r501): [4..8]
 a15(r270): [4..10]
 a16(r257): [4..12]
 a17(r244): [4..14]
 a18(r84): [4..16]
 a19(r83): [17..25]
 a20(r63): [4..18]
 a21(r82): [19..27]
 a22(r299): [28..29]
 a23(r296): [42..48]
 a24(r77): [48..62]
 a25(r80): [49..50]
 a26(r293): [51..52]
 a27(r294): [53..54]
 a28(r78): [57..58]
 a29(r76): [63..64]
 a30(r63): [85..381]
 a31(r64): [85..381]
 a32(r66): [85..381]
 a33(r68): [85..381]
 a34(r84): [85..381]
 a35(r244): [85..381]
 a36(r257): [85..381]
 a37(r270): [85..381]
 a38(r292): [85..381]
 a39(r501): [85..381]
 a40(r502): [85..381]
 a41(r503): [85..381]
 a42(r500): [85..87]
 a43(r499): [85..89]
 a44(r498): [85..91]
 a45(r282): [85..93]
 a46(r163): [85..95]
 a47(r302): [134..373] [96..97]
 a48(r85): [128..381] [119..124] [85..106]
 a49(r101): [134..359] [85..97]
 a50(r115): [134..343] [85..97]
 a51(r380): [153..154]
 a52(r378): [155..156]
 a53(r149): [157..180]
 a54(r379): [157..158]
 a55(r375): [164..165]
 a56(r373): [166..167]
 a57(r372): [168..171]
 a58(r374): [168..169]
 a59(r371): [170..173]
 a60(r148): [172..187]
 a61(r349): [181..329]
 a62(r370): [192..193]
 a63(r369): [198..209]
 a64(r350): [200..327]
 a65(r368): [204..211]
 a66(r366): [216..227]
 a67(r365): [220..229]
 a68(r364): [222..231]
 a69(r139): [234..235]
 a70(r87): [234..378] [98..102]
 a71(r363): [240..251]
 a72(r336): [242..345]
 a73(r362): [246..253]
 a74(r360): [258..269]
 a75(r359): [262..271]
 a76(r358): [264..273]
 a77(r132): [276..277]
 a78(r357): [282..293]
 a79(r319): [284..361]
 a80(r356): [288..295]
 a81(r354): [300..311]
 a82(r353): [304..313]
 a83(r352): [306..315]
 a84(r125): [318..319]
 a85(r351): [324..325]
 a86(r348): [330..331]
 a87(r346): [334..335]
 a88(r344): [336..337]
 a89(r342): [338..339]
 a90(r337): [340..341]
 a91(r332): [348..349]
 a92(r328): [350..351]
 a93(r325): [352..353]
 a94(r322): [354..355]
 a95(r320): [354..357]
 a96(r315): [364..365]
 a97(r311): [366..367]
 a98(r307): [368..369]
 a99(r304): [370..371]
 a100(r301): [103..104]
 a101(r63): [382..614]
 a102(r64): [382..614]
 a103(r66): [382..614]
 a104(r68): [382..614]
 a105(r84): [382..614]
 a106(r85): [382..614]
 a107(r101): [382..614]
 a108(r115): [382..614]
 a109(r163): [382..614]
 a110(r244): [382..614]
 a111(r257): [382..614]
 a112(r270): [382..614]
 a113(r282): [382..614]
 a114(r292): [382..614]
 a115(r498): [382..614]
 a116(r499): [382..614]
 a117(r500): [382..614]
 a118(r501): [382..614]
 a119(r502): [382..614]
 a120(r503): [382..614]
 a121(r481): [579..580]
 a122(r480): [581..582]
 a123(r479): [581..584]
 a124(r291): [583..586] [542..554]
 a125(r290): [585..586] [542..560]
 a126(r152): [499..611] [409..464] [389..395]
 a127(r475): [545..546]
 a128(r478): [547..548]
 a129(r477): [549..550]
 a130(r476): [549..552]
 a131(r472): [555..556]
 a132(r471): [555..562]
 a133(r473): [557..558]
 a134(r469): [561..564]
 a135(r470): [565..566]
 a136(r186): [538..539]
 a137(r197): [465..532] [387..388]
 a138(r200): [465..526] [387..388]
 a139(r209): [465..506] [382..388]
 a140(r214): [465..498] [382..388]
 a141(r467): [476..479]
 a142(r468): [476..477]
 a143(r465): [480..481]
 a144(r466): [482..483]
 a145(r281): [382..382]
 a146(r202): [382..384]
 a147(r424): [385..386]
 a148(r422): [489..492]
 a149(r423): [489..490]
 a150(r420): [493..494]
 a151(r421): [495..496]
 a152(r419): [499..500]
 a153(r417): [501..504]
 a154(r418): [501..502]
 a155(r415): [507..508]
 a156(r208): [509..512]
 a157(r416): [509..510]
 a158(r414): [517..518]
 a159(r412): [519..520]
 a160(r413): [521..522]
 a161(r411): [523..524]
 a162(r199): [523..530]
 a163(r410): [527..528]
 a164(r179): [590..605]
 a165(r408): [590..591]
 a166(r406): [592..593]
 a167(r404): [594..597]
 a168(r407): [594..595]
 a169(r166): [602..611] [420..464] [409..417]
 a170(r400): [606..607]
 a171(r401): [608..609]
 a172(r398): [459..460]
 a173(r175): [461..464] [447..453]
 a174(r399): [461..462]
 a175(r397): [450..451]
 a176(r395): [435..436]
 a177(r394): [437..438]
 a178(r392): [439..442]
 a179(r393): [439..440]
 a180(r390): [441..444]
 a181(r164): [430..431] [409..426] [389..393]
 a182(r389): [423..424]
 a183(r387): [412..413]
 a184(r385): [414..415]
 a185(r384): [403..404]
 a186(r382): [396..397]
 a187(r63): [615..658]
 a188(r64): [615..658]
 a189(r66): [615..658]
 a190(r68): [615..658]
 a191(r84): [615..658]
 a192(r85): [615..658]
 a193(r101): [615..658]
 a194(r115): [615..658]
 a195(r163): [615..658]
 a196(r202): [615..658]
 a197(r209): [615..658]
 a198(r214): [615..658]
 a199(r244): [615..658]
 a200(r257): [615..658]
 a201(r270): [615..658]
 a202(r281): [615..658]
 a203(r282): [615..658]
 a204(r292): [615..658]
 a205(r498): [615..658]
 a206(r499): [615..658]
 a207(r500): [615..658]
 a208(r501): [615..658]
 a209(r502): [615..658]
 a210(r503): [615..658]
 a211(r280): [615..615]
 a212(r229): [642..646] [615..617]
 a213(r220): [652..655] [618..628]
 a214(r428): [652..653]
 a215(r222): [654..655] [618..624]
 a216(r223): [654..655] [618..622]
 a217(r427): [621..626]
 a218(r425): [629..632]
 a219(r426): [629..630]
 a220(r63): [659..805]
 a221(r64): [659..805]
 a222(r66): [659..805]
 a223(r68): [659..805]
 a224(r84): [659..805]
 a225(r85): [659..805]
 a226(r101): [659..805]
 a227(r115): [659..805]
 a228(r163): [659..805]
 a229(r202): [659..805]
 a230(r209): [659..805]
 a231(r214): [659..805]
 a232(r229): [790..805] [717..723] [659..676]
 a233(r244): [659..805]
 a234(r257): [659..805]
 a235(r270): [659..805]
 a236(r280): [659..805]
 a237(r281): [659..805]
 a238(r282): [659..805]
 a239(r292): [659..805]
 a240(r498): [659..805]
 a241(r499): [659..805]
 a242(r500): [659..805]
 a243(r501): [659..805]
 a244(r502): [659..805]
 a245(r503): [659..805]
 a246(r461): [768..779]
 a247(r247): [770..781]
 a248(r463): [772..773]
 a249(r508): [774..777]
 a250(r460): [782..783]
 a251(r458): [784..785]
 a252(r457): [786..787]
 a253(r456): [788..789]
 a254(r452): [693..704]
 a255(r261): [695..706]
 a256(r454): [697..698]
 a257(r507): [699..702]
 a258(r451): [707..708]
 a259(r449): [709..710]
 a260(r448): [711..712]
 a261(r447): [713..714]
 a262(r443): [727..738]
 a263(r274): [729..740]
 a264(r445): [731..732]
 a265(r506): [733..736]
 a266(r442): [741..742]
 a267(r440): [743..744]
 a268(r439): [745..746]
 a269(r438): [747..748]
 a270(r436): [684..687]
 a271(r437): [684..685]
 a272(r434): [759..762]
 a273(r435): [759..760]
 a274(r432): [800..803]
 a275(r433): [800..801]
 a276(r431): [720..721]
 a277(r231): [722..723] [659..667]
 a278(r232): [722..723] [659..665]
 a279(r430): [662..663]
 a280(r429): [664..669]
Compressing live ranges: from 806 to 269 - 33%
Ranges after the compression:
 a0(r62): [14..19]
 a1(r61): [12..19]
 a2(r295): [18..19]
 a3(r64): [0..30]
 a4(r65): [4..30]
 a5(r66): [0..30]
 a6(r67): [6..30]
 a7(r68): [0..30]
 a8(r69): [2..30]
 a9(r71): [8..30]
 a10(r79): [16..26]
 a11(r292): [0..30]
 a12(r503): [0..0]
 a13(r502): [0..1]
 a14(r501): [0..1]
 a15(r270): [0..1]
 a16(r257): [0..3]
 a17(r244): [0..5]
 a18(r84): [0..7]
 a19(r83): [8..11]
 a20(r63): [0..9]
 a21(r82): [10..13]
 a22(r299): [14..15]
 a23(r296): [18..20]
 a24(r77): [20..28]
 a25(r80): [21..22]
 a26(r293): [23..24]
 a27(r294): [25..26]
 a28(r78): [27..28]
 a29(r76): [29..30]
 a30(r63): [31..106]
 a31(r64): [31..106]
 a32(r66): [31..106]
 a33(r68): [31..106]
 a34(r84): [31..106]
 a35(r244): [31..106]
 a36(r257): [31..106]
 a37(r270): [31..106]
 a38(r292): [31..106]
 a39(r501): [31..106]
 a40(r502): [31..106]
 a41(r503): [31..106]
 a42(r500): [31..32]
 a43(r499): [31..32]
 a44(r498): [31..32]
 a45(r282): [31..32]
 a46(r163): [31..32]
 a47(r302): [41..106] [33..34]
 a48(r85): [31..106]
 a49(r101): [41..98] [31..34]
 a50(r115): [41..90] [31..34]
 a51(r380): [41..42]
 a52(r378): [43..44]
 a53(r149): [45..56]
 a54(r379): [45..46]
 a55(r375): [47..48]
 a56(r373): [49..50]
 a57(r372): [51..54]
 a58(r374): [51..52]
 a59(r371): [53..56]
 a60(r148): [55..58]
 a61(r349): [57..80]
 a62(r370): [59..60]
 a63(r369): [61..62]
 a64(r350): [61..80]
 a65(r368): [61..62]
 a66(r366): [63..64]
 a67(r365): [63..64]
 a68(r364): [63..64]
 a69(r139): [65..66]
 a70(r87): [65..106] [35..36]
 a71(r363): [67..68]
 a72(r336): [67..90]
 a73(r362): [67..68]
 a74(r360): [69..70]
 a75(r359): [69..70]
 a76(r358): [69..70]
 a77(r132): [71..72]
 a78(r357): [73..74]
 a79(r319): [73..98]
 a80(r356): [73..74]
 a81(r354): [75..76]
 a82(r353): [75..76]
 a83(r352): [75..76]
 a84(r125): [77..78]
 a85(r351): [79..80]
 a86(r348): [81..82]
 a87(r346): [83..84]
 a88(r344): [85..86]
 a89(r342): [87..88]
 a90(r337): [89..90]
 a91(r332): [91..92]
 a92(r328): [93..94]
 a93(r325): [95..96]
 a94(r322): [97..98]
 a95(r320): [97..98]
 a96(r315): [99..100]
 a97(r311): [101..102]
 a98(r307): [103..104]
 a99(r304): [105..106]
 a100(r301): [37..38]
 a101(r63): [107..206]
 a102(r64): [107..206]
 a103(r66): [107..206]
 a104(r68): [107..206]
 a105(r84): [107..206]
 a106(r85): [107..206]
 a107(r101): [107..206]
 a108(r115): [107..206]
 a109(r163): [107..206]
 a110(r244): [107..206]
 a111(r257): [107..206]
 a112(r270): [107..206]
 a113(r282): [107..206]
 a114(r292): [107..206]
 a115(r498): [107..206]
 a116(r499): [107..206]
 a117(r500): [107..206]
 a118(r501): [107..206]
 a119(r502): [107..206]
 a120(r503): [107..206]
 a121(r481): [187..188]
 a122(r480): [189..190]
 a123(r479): [189..192]
 a124(r291): [191..194] [173..178]
 a125(r290): [193..194] [173..182]
 a126(r152): [153..206] [119..140] [113..114]
 a127(r475): [173..174]
 a128(r478): [175..176]
 a129(r477): [177..178]
 a130(r476): [177..178]
 a131(r472): [179..180]
 a132(r471): [179..184]
 a133(r473): [181..182]
 a134(r469): [183..184]
 a135(r470): [185..186]
 a136(r186): [171..172]
 a137(r197): [141..170] [111..112]
 a138(r200): [141..168] [111..112]
 a139(r209): [141..156] [107..112]
 a140(r214): [141..152] [107..112]
 a141(r467): [141..142]
 a142(r468): [141..142]
 a143(r465): [143..144]
 a144(r466): [145..146]
 a145(r281): [107..107]
 a146(r202): [107..108]
 a147(r424): [109..110]
 a148(r422): [147..148]
 a149(r423): [147..148]
 a150(r420): [149..150]
 a151(r421): [151..152]
 a152(r419): [153..154]
 a153(r417): [155..156]
 a154(r418): [155..156]
 a155(r415): [157..158]
 a156(r208): [159..160]
 a157(r416): [159..160]
 a158(r414): [161..162]
 a159(r412): [163..164]
 a160(r413): [165..166]
 a161(r411): [167..168]
 a162(r199): [167..170]
 a163(r410): [169..170]
 a164(r179): [195..202]
 a165(r408): [195..196]
 a166(r406): [197..198]
 a167(r404): [199..200]
 a168(r407): [199..200]
 a169(r166): [201..206] [119..140]
 a170(r400): [203..204]
 a171(r401): [205..206]
 a172(r398): [137..138]
 a173(r175): [139..140] [135..136]
 a174(r399): [139..140]
 a175(r397): [135..136]
 a176(r395): [127..128]
 a177(r394): [129..130]
 a178(r392): [131..134]
 a179(r393): [131..132]
 a180(r390): [133..134]
 a181(r164): [119..126] [113..114]
 a182(r389): [123..124]
 a183(r387): [119..120]
 a184(r385): [121..122]
 a185(r384): [117..118]
 a186(r382): [115..116]
 a187(r63): [207..218]
 a188(r64): [207..218]
 a189(r66): [207..218]
 a190(r68): [207..218]
 a191(r84): [207..218]
 a192(r85): [207..218]
 a193(r101): [207..218]
 a194(r115): [207..218]
 a195(r163): [207..218]
 a196(r202): [207..218]
 a197(r209): [207..218]
 a198(r214): [207..218]
 a199(r244): [207..218]
 a200(r257): [207..218]
 a201(r270): [207..218]
 a202(r281): [207..218]
 a203(r282): [207..218]
 a204(r292): [207..218]
 a205(r498): [207..218]
 a206(r499): [207..218]
 a207(r500): [207..218]
 a208(r501): [207..218]
 a209(r502): [207..218]
 a210(r503): [207..218]
 a211(r280): [207..207]
 a212(r229): [213..214] [207..208]
 a213(r220): [215..218] [209..210]
 a214(r428): [215..216]
 a215(r222): [217..218] [209..210]
 a216(r223): [217..218] [209..210]
 a217(r427): [209..210]
 a218(r425): [211..212]
 a219(r426): [211..212]
 a220(r63): [219..268]
 a221(r64): [219..268]
 a222(r66): [219..268]
 a223(r68): [219..268]
 a224(r84): [219..268]
 a225(r85): [219..268]
 a226(r101): [219..268]
 a227(r115): [219..268]
 a228(r163): [219..268]
 a229(r202): [219..268]
 a230(r209): [219..268]
 a231(r214): [219..268]
 a232(r229): [267..268] [237..240] [219..222]
 a233(r244): [219..268]
 a234(r257): [219..268]
 a235(r270): [219..268]
 a236(r280): [219..268]
 a237(r281): [219..268]
 a238(r282): [219..268]
 a239(r292): [219..268]
 a240(r498): [219..268]
 a241(r499): [219..268]
 a242(r500): [219..268]
 a243(r501): [219..268]
 a244(r502): [219..268]
 a245(r503): [219..268]
 a246(r461): [255..258]
 a247(r247): [255..258]
 a248(r463): [255..256]
 a249(r508): [257..258]
 a250(r460): [259..260]
 a251(r458): [261..262]
 a252(r457): [263..264]
 a253(r456): [265..266]
 a254(r452): [225..228]
 a255(r261): [225..228]
 a256(r454): [225..226]
 a257(r507): [227..228]
 a258(r451): [229..230]
 a259(r449): [231..232]
 a260(r448): [233..234]
 a261(r447): [235..236]
 a262(r443): [241..244]
 a263(r274): [241..244]
 a264(r445): [241..242]
 a265(r506): [243..244]
 a266(r442): [245..246]
 a267(r440): [247..248]
 a268(r439): [249..250]
 a269(r438): [251..252]
 a270(r436): [223..224]
 a271(r437): [223..224]
 a272(r434): [253..254]
 a273(r435): [253..254]
 a274(r432): [267..268]
 a275(r433): [267..268]
 a276(r431): [237..238]
 a277(r231): [239..240] [219..222]
 a278(r232): [239..240] [219..222]
 a279(r430): [219..220]
 a280(r429): [221..222]
    Creating cap  a281(r500,l0: a42(r500,l1))
    Creating cap  a282(r499,l0: a43(r499,l1))
    Creating cap  a283(r498,l0: a44(r498,l1))
    Creating cap  a284(r282,l0: a45(r282,l1))
    Creating cap  a285(r163,l0: a46(r163,l1))
    Creating cap  a286(r302,l0: a47(r302,l1))
    Creating cap  a287(r85,l0: a48(r85,l1))
    Creating cap  a288(r101,l0: a49(r101,l1))
    Creating cap  a289(r115,l0: a50(r115,l1))
    Creating cap  a290(r380,l0: a51(r380,l1))
    Creating cap  a291(r378,l0: a52(r378,l1))
    Creating cap  a292(r149,l0: a53(r149,l1))
    Creating cap  a293(r379,l0: a54(r379,l1))
    Creating cap  a294(r375,l0: a55(r375,l1))
    Creating cap  a295(r373,l0: a56(r373,l1))
    Creating cap  a296(r372,l0: a57(r372,l1))
    Creating cap  a297(r374,l0: a58(r374,l1))
    Creating cap  a298(r371,l0: a59(r371,l1))
    Creating cap  a299(r148,l0: a60(r148,l1))
    Creating cap  a300(r349,l0: a61(r349,l1))
    Creating cap  a301(r370,l0: a62(r370,l1))
    Creating cap  a302(r369,l0: a63(r369,l1))
    Creating cap  a303(r350,l0: a64(r350,l1))
    Creating cap  a304(r368,l0: a65(r368,l1))
    Creating cap  a305(r366,l0: a66(r366,l1))
    Creating cap  a306(r365,l0: a67(r365,l1))
    Creating cap  a307(r364,l0: a68(r364,l1))
    Creating cap  a308(r139,l0: a69(r139,l1))
    Creating cap  a309(r87,l0: a70(r87,l1))
    Creating cap  a310(r363,l0: a71(r363,l1))
    Creating cap  a311(r336,l0: a72(r336,l1))
    Creating cap  a312(r362,l0: a73(r362,l1))
    Creating cap  a313(r360,l0: a74(r360,l1))
    Creating cap  a314(r359,l0: a75(r359,l1))
    Creating cap  a315(r358,l0: a76(r358,l1))
    Creating cap  a316(r132,l0: a77(r132,l1))
    Creating cap  a317(r357,l0: a78(r357,l1))
    Creating cap  a318(r319,l0: a79(r319,l1))
    Creating cap  a319(r356,l0: a80(r356,l1))
    Creating cap  a320(r354,l0: a81(r354,l1))
    Creating cap  a321(r353,l0: a82(r353,l1))
    Creating cap  a322(r352,l0: a83(r352,l1))
    Creating cap  a323(r125,l0: a84(r125,l1))
    Creating cap  a324(r351,l0: a85(r351,l1))
    Creating cap  a325(r348,l0: a86(r348,l1))
    Creating cap  a326(r346,l0: a87(r346,l1))
    Creating cap  a327(r344,l0: a88(r344,l1))
    Creating cap  a328(r342,l0: a89(r342,l1))
    Creating cap  a329(r337,l0: a90(r337,l1))
    Creating cap  a330(r332,l0: a91(r332,l1))
    Creating cap  a331(r328,l0: a92(r328,l1))
    Creating cap  a332(r325,l0: a93(r325,l1))
    Creating cap  a333(r322,l0: a94(r322,l1))
    Creating cap  a334(r320,l0: a95(r320,l1))
    Creating cap  a335(r315,l0: a96(r315,l1))
    Creating cap  a336(r311,l0: a97(r311,l1))
    Creating cap  a337(r307,l0: a98(r307,l1))
    Creating cap  a338(r304,l0: a99(r304,l1))
    Creating cap  a339(r301,l0: a100(r301,l1))
    Creating cap  a340(r481,l1: a121(r481,l2))
    Creating cap  a341(r480,l1: a122(r480,l2))
    Creating cap  a342(r479,l1: a123(r479,l2))
    Creating cap  a343(r291,l1: a124(r291,l2))
    Creating cap  a344(r290,l1: a125(r290,l2))
    Creating cap  a345(r152,l1: a126(r152,l2))
    Creating cap  a346(r475,l1: a127(r475,l2))
    Creating cap  a347(r478,l1: a128(r478,l2))
    Creating cap  a348(r477,l1: a129(r477,l2))
    Creating cap  a349(r476,l1: a130(r476,l2))
    Creating cap  a350(r472,l1: a131(r472,l2))
    Creating cap  a351(r471,l1: a132(r471,l2))
    Creating cap  a352(r473,l1: a133(r473,l2))
    Creating cap  a353(r469,l1: a134(r469,l2))
    Creating cap  a354(r470,l1: a135(r470,l2))
    Creating cap  a355(r186,l1: a136(r186,l2))
    Creating cap  a356(r197,l1: a137(r197,l2))
    Creating cap  a357(r200,l1: a138(r200,l2))
    Creating cap  a358(r209,l1: a139(r209,l2))
    Creating cap  a359(r214,l1: a140(r214,l2))
    Creating cap  a360(r467,l1: a141(r467,l2))
    Creating cap  a361(r468,l1: a142(r468,l2))
    Creating cap  a362(r465,l1: a143(r465,l2))
    Creating cap  a363(r466,l1: a144(r466,l2))
    Creating cap  a364(r281,l1: a145(r281,l2))
    Creating cap  a365(r202,l1: a146(r202,l2))
    Creating cap  a366(r424,l1: a147(r424,l2))
    Creating cap  a367(r422,l1: a148(r422,l2))
    Creating cap  a368(r423,l1: a149(r423,l2))
    Creating cap  a369(r420,l1: a150(r420,l2))
    Creating cap  a370(r421,l1: a151(r421,l2))
    Creating cap  a371(r419,l1: a152(r419,l2))
    Creating cap  a372(r417,l1: a153(r417,l2))
    Creating cap  a373(r418,l1: a154(r418,l2))
    Creating cap  a374(r415,l1: a155(r415,l2))
    Creating cap  a375(r208,l1: a156(r208,l2))
    Creating cap  a376(r416,l1: a157(r416,l2))
    Creating cap  a377(r414,l1: a158(r414,l2))
    Creating cap  a378(r412,l1: a159(r412,l2))
    Creating cap  a379(r413,l1: a160(r413,l2))
    Creating cap  a380(r411,l1: a161(r411,l2))
    Creating cap  a381(r199,l1: a162(r199,l2))
    Creating cap  a382(r410,l1: a163(r410,l2))
    Creating cap  a383(r179,l1: a164(r179,l2))
    Creating cap  a384(r408,l1: a165(r408,l2))
    Creating cap  a385(r406,l1: a166(r406,l2))
    Creating cap  a386(r404,l1: a167(r404,l2))
    Creating cap  a387(r407,l1: a168(r407,l2))
    Creating cap  a388(r166,l1: a169(r166,l2))
    Creating cap  a389(r400,l1: a170(r400,l2))
    Creating cap  a390(r401,l1: a171(r401,l2))
    Creating cap  a391(r398,l1: a172(r398,l2))
    Creating cap  a392(r175,l1: a173(r175,l2))
    Creating cap  a393(r399,l1: a174(r399,l2))
    Creating cap  a394(r397,l1: a175(r397,l2))
    Creating cap  a395(r395,l1: a176(r395,l2))
    Creating cap  a396(r394,l1: a177(r394,l2))
    Creating cap  a397(r392,l1: a178(r392,l2))
    Creating cap  a398(r393,l1: a179(r393,l2))
    Creating cap  a399(r390,l1: a180(r390,l2))
    Creating cap  a400(r164,l1: a181(r164,l2))
    Creating cap  a401(r389,l1: a182(r389,l2))
    Creating cap  a402(r387,l1: a183(r387,l2))
    Creating cap  a403(r385,l1: a184(r385,l2))
    Creating cap  a404(r384,l1: a185(r384,l2))
    Creating cap  a405(r382,l1: a186(r382,l2))
    Creating cap  a406(r280,l2: a211(r280,l3))
    Creating cap  a407(r229,l2: a212(r229,l3))
    Creating cap  a408(r220,l2: a213(r220,l3))
    Creating cap  a409(r428,l2: a214(r428,l3))
    Creating cap  a410(r222,l2: a215(r222,l3))
    Creating cap  a411(r223,l2: a216(r223,l3))
    Creating cap  a412(r427,l2: a217(r427,l3))
    Creating cap  a413(r425,l2: a218(r425,l3))
    Creating cap  a414(r426,l2: a219(r426,l3))
    Creating cap  a415(r461,l3: a246(r461,l4))
    Creating cap  a416(r247,l3: a247(r247,l4))
    Creating cap  a417(r463,l3: a248(r463,l4))
    Creating cap  a418(r508,l3: a249(r508,l4))
    Creating cap  a419(r460,l3: a250(r460,l4))
    Creating cap  a420(r458,l3: a251(r458,l4))
    Creating cap  a421(r457,l3: a252(r457,l4))
    Creating cap  a422(r456,l3: a253(r456,l4))
    Creating cap  a423(r452,l3: a254(r452,l4))
    Creating cap  a424(r261,l3: a255(r261,l4))
    Creating cap  a425(r454,l3: a256(r454,l4))
    Creating cap  a426(r507,l3: a257(r507,l4))
    Creating cap  a427(r451,l3: a258(r451,l4))
    Creating cap  a428(r449,l3: a259(r449,l4))
    Creating cap  a429(r448,l3: a260(r448,l4))
    Creating cap  a430(r447,l3: a261(r447,l4))
    Creating cap  a431(r443,l3: a262(r443,l4))
    Creating cap  a432(r274,l3: a263(r274,l4))
    Creating cap  a433(r445,l3: a264(r445,l4))
    Creating cap  a434(r506,l3: a265(r506,l4))
    Creating cap  a435(r442,l3: a266(r442,l4))
    Creating cap  a436(r440,l3: a267(r440,l4))
    Creating cap  a437(r439,l3: a268(r439,l4))
    Creating cap  a438(r438,l3: a269(r438,l4))
    Creating cap  a439(r436,l3: a270(r436,l4))
    Creating cap  a440(r437,l3: a271(r437,l4))
    Creating cap  a441(r434,l3: a272(r434,l4))
    Creating cap  a442(r435,l3: a273(r435,l4))
    Creating cap  a443(r432,l3: a274(r432,l4))
    Creating cap  a444(r433,l3: a275(r433,l4))
    Creating cap  a445(r431,l3: a276(r431,l4))
    Creating cap  a446(r231,l3: a277(r231,l4))
    Creating cap  a447(r232,l3: a278(r232,l4))
    Creating cap  a448(r430,l3: a279(r430,l4))
    Creating cap  a449(r429,l3: a280(r429,l4))
    Creating cap  a450(r481,l0: a340(r481,l1: a121(r481,l2)))
    Creating cap  a451(r480,l0: a341(r480,l1: a122(r480,l2)))
    Creating cap  a452(r479,l0: a342(r479,l1: a123(r479,l2)))
    Creating cap  a453(r291,l0: a343(r291,l1: a124(r291,l2)))
    Creating cap  a454(r290,l0: a344(r290,l1: a125(r290,l2)))
    Creating cap  a455(r152,l0: a345(r152,l1: a126(r152,l2)))
    Creating cap  a456(r475,l0: a346(r475,l1: a127(r475,l2)))
    Creating cap  a457(r478,l0: a347(r478,l1: a128(r478,l2)))
    Creating cap  a458(r477,l0: a348(r477,l1: a129(r477,l2)))
    Creating cap  a459(r476,l0: a349(r476,l1: a130(r476,l2)))
    Creating cap  a460(r472,l0: a350(r472,l1: a131(r472,l2)))
    Creating cap  a461(r471,l0: a351(r471,l1: a132(r471,l2)))
    Creating cap  a462(r473,l0: a352(r473,l1: a133(r473,l2)))
    Creating cap  a463(r469,l0: a353(r469,l1: a134(r469,l2)))
    Creating cap  a464(r470,l0: a354(r470,l1: a135(r470,l2)))
    Creating cap  a465(r186,l0: a355(r186,l1: a136(r186,l2)))
    Creating cap  a466(r197,l0: a356(r197,l1: a137(r197,l2)))
    Creating cap  a467(r200,l0: a357(r200,l1: a138(r200,l2)))
    Creating cap  a468(r209,l0: a358(r209,l1: a139(r209,l2)))
    Creating cap  a469(r214,l0: a359(r214,l1: a140(r214,l2)))
    Creating cap  a470(r467,l0: a360(r467,l1: a141(r467,l2)))
    Creating cap  a471(r468,l0: a361(r468,l1: a142(r468,l2)))
    Creating cap  a472(r465,l0: a362(r465,l1: a143(r465,l2)))
    Creating cap  a473(r466,l0: a363(r466,l1: a144(r466,l2)))
    Creating cap  a474(r281,l0: a364(r281,l1: a145(r281,l2)))
    Creating cap  a475(r202,l0: a365(r202,l1: a146(r202,l2)))
    Creating cap  a476(r424,l0: a366(r424,l1: a147(r424,l2)))
    Creating cap  a477(r422,l0: a367(r422,l1: a148(r422,l2)))
    Creating cap  a478(r423,l0: a368(r423,l1: a149(r423,l2)))
    Creating cap  a479(r420,l0: a369(r420,l1: a150(r420,l2)))
    Creating cap  a480(r421,l0: a370(r421,l1: a151(r421,l2)))
    Creating cap  a481(r419,l0: a371(r419,l1: a152(r419,l2)))
    Creating cap  a482(r417,l0: a372(r417,l1: a153(r417,l2)))
    Creating cap  a483(r418,l0: a373(r418,l1: a154(r418,l2)))
    Creating cap  a484(r415,l0: a374(r415,l1: a155(r415,l2)))
    Creating cap  a485(r208,l0: a375(r208,l1: a156(r208,l2)))
    Creating cap  a486(r416,l0: a376(r416,l1: a157(r416,l2)))
    Creating cap  a487(r414,l0: a377(r414,l1: a158(r414,l2)))
    Creating cap  a488(r412,l0: a378(r412,l1: a159(r412,l2)))
    Creating cap  a489(r413,l0: a379(r413,l1: a160(r413,l2)))
    Creating cap  a490(r411,l0: a380(r411,l1: a161(r411,l2)))
    Creating cap  a491(r199,l0: a381(r199,l1: a162(r199,l2)))
    Creating cap  a492(r410,l0: a382(r410,l1: a163(r410,l2)))
    Creating cap  a493(r179,l0: a383(r179,l1: a164(r179,l2)))
    Creating cap  a494(r408,l0: a384(r408,l1: a165(r408,l2)))
    Creating cap  a495(r406,l0: a385(r406,l1: a166(r406,l2)))
    Creating cap  a496(r404,l0: a386(r404,l1: a167(r404,l2)))
    Creating cap  a497(r407,l0: a387(r407,l1: a168(r407,l2)))
    Creating cap  a498(r166,l0: a388(r166,l1: a169(r166,l2)))
    Creating cap  a499(r400,l0: a389(r400,l1: a170(r400,l2)))
    Creating cap  a500(r401,l0: a390(r401,l1: a171(r401,l2)))
    Creating cap  a501(r398,l0: a391(r398,l1: a172(r398,l2)))
    Creating cap  a502(r175,l0: a392(r175,l1: a173(r175,l2)))
    Creating cap  a503(r399,l0: a393(r399,l1: a174(r399,l2)))
    Creating cap  a504(r397,l0: a394(r397,l1: a175(r397,l2)))
    Creating cap  a505(r395,l0: a395(r395,l1: a176(r395,l2)))
    Creating cap  a506(r394,l0: a396(r394,l1: a177(r394,l2)))
    Creating cap  a507(r392,l0: a397(r392,l1: a178(r392,l2)))
    Creating cap  a508(r393,l0: a398(r393,l1: a179(r393,l2)))
    Creating cap  a509(r390,l0: a399(r390,l1: a180(r390,l2)))
    Creating cap  a510(r164,l0: a400(r164,l1: a181(r164,l2)))
    Creating cap  a511(r389,l0: a401(r389,l1: a182(r389,l2)))
    Creating cap  a512(r387,l0: a402(r387,l1: a183(r387,l2)))
    Creating cap  a513(r385,l0: a403(r385,l1: a184(r385,l2)))
    Creating cap  a514(r384,l0: a404(r384,l1: a185(r384,l2)))
    Creating cap  a515(r382,l0: a405(r382,l1: a186(r382,l2)))
    Creating cap  a516(r280,l1: a406(r280,l2: a211(r280,l3)))
    Creating cap  a517(r229,l1: a407(r229,l2: a212(r229,l3)))
    Creating cap  a518(r220,l1: a408(r220,l2: a213(r220,l3)))
    Creating cap  a519(r428,l1: a409(r428,l2: a214(r428,l3)))
    Creating cap  a520(r222,l1: a410(r222,l2: a215(r222,l3)))
    Creating cap  a521(r223,l1: a411(r223,l2: a216(r223,l3)))
    Creating cap  a522(r427,l1: a412(r427,l2: a217(r427,l3)))
    Creating cap  a523(r425,l1: a413(r425,l2: a218(r425,l3)))
    Creating cap  a524(r426,l1: a414(r426,l2: a219(r426,l3)))
    Creating cap  a525(r461,l2: a415(r461,l3: a246(r461,l4)))
    Creating cap  a526(r247,l2: a416(r247,l3: a247(r247,l4)))
    Creating cap  a527(r463,l2: a417(r463,l3: a248(r463,l4)))
    Creating cap  a528(r508,l2: a418(r508,l3: a249(r508,l4)))
    Creating cap  a529(r460,l2: a419(r460,l3: a250(r460,l4)))
    Creating cap  a530(r458,l2: a420(r458,l3: a251(r458,l4)))
    Creating cap  a531(r457,l2: a421(r457,l3: a252(r457,l4)))
    Creating cap  a532(r456,l2: a422(r456,l3: a253(r456,l4)))
    Creating cap  a533(r452,l2: a423(r452,l3: a254(r452,l4)))
    Creating cap  a534(r261,l2: a424(r261,l3: a255(r261,l4)))
    Creating cap  a535(r454,l2: a425(r454,l3: a256(r454,l4)))
    Creating cap  a536(r507,l2: a426(r507,l3: a257(r507,l4)))
    Creating cap  a537(r451,l2: a427(r451,l3: a258(r451,l4)))
    Creating cap  a538(r449,l2: a428(r449,l3: a259(r449,l4)))
    Creating cap  a539(r448,l2: a429(r448,l3: a260(r448,l4)))
    Creating cap  a540(r447,l2: a430(r447,l3: a261(r447,l4)))
    Creating cap  a541(r443,l2: a431(r443,l3: a262(r443,l4)))
    Creating cap  a542(r274,l2: a432(r274,l3: a263(r274,l4)))
    Creating cap  a543(r445,l2: a433(r445,l3: a264(r445,l4)))
    Creating cap  a544(r506,l2: a434(r506,l3: a265(r506,l4)))
    Creating cap  a545(r442,l2: a435(r442,l3: a266(r442,l4)))
    Creating cap  a546(r440,l2: a436(r440,l3: a267(r440,l4)))
    Creating cap  a547(r439,l2: a437(r439,l3: a268(r439,l4)))
    Creating cap  a548(r438,l2: a438(r438,l3: a269(r438,l4)))
    Creating cap  a549(r436,l2: a439(r436,l3: a270(r436,l4)))
    Creating cap  a550(r437,l2: a440(r437,l3: a271(r437,l4)))
    Creating cap  a551(r434,l2: a441(r434,l3: a272(r434,l4)))
    Creating cap  a552(r435,l2: a442(r435,l3: a273(r435,l4)))
    Creating cap  a553(r432,l2: a443(r432,l3: a274(r432,l4)))
    Creating cap  a554(r433,l2: a444(r433,l3: a275(r433,l4)))
    Creating cap  a555(r431,l2: a445(r431,l3: a276(r431,l4)))
    Creating cap  a556(r231,l2: a446(r231,l3: a277(r231,l4)))
    Creating cap  a557(r232,l2: a447(r232,l3: a278(r232,l4)))
    Creating cap  a558(r430,l2: a448(r430,l3: a279(r430,l4)))
    Creating cap  a559(r429,l2: a449(r429,l3: a280(r429,l4)))
    Creating cap  a560(r280,l0: a516(r280,l1: a406(r280,l2: a211(r280,l3))))
    Creating cap  a561(r229,l0: a517(r229,l1: a407(r229,l2: a212(r229,l3))))
    Creating cap  a562(r220,l0: a518(r220,l1: a408(r220,l2: a213(r220,l3))))
    Creating cap  a563(r428,l0: a519(r428,l1: a409(r428,l2: a214(r428,l3))))
    Creating cap  a564(r222,l0: a520(r222,l1: a410(r222,l2: a215(r222,l3))))
    Creating cap  a565(r223,l0: a521(r223,l1: a411(r223,l2: a216(r223,l3))))
    Creating cap  a566(r427,l0: a522(r427,l1: a412(r427,l2: a217(r427,l3))))
    Creating cap  a567(r425,l0: a523(r425,l1: a413(r425,l2: a218(r425,l3))))
    Creating cap  a568(r426,l0: a524(r426,l1: a414(r426,l2: a219(r426,l3))))
    Creating cap  a569(r461,l1: a525(r461,l2: a415(r461,l3: a246(r461,l4))))
    Creating cap  a570(r247,l1: a526(r247,l2: a416(r247,l3: a247(r247,l4))))
    Creating cap  a571(r463,l1: a527(r463,l2: a417(r463,l3: a248(r463,l4))))
    Creating cap  a572(r508,l1: a528(r508,l2: a418(r508,l3: a249(r508,l4))))
    Creating cap  a573(r460,l1: a529(r460,l2: a419(r460,l3: a250(r460,l4))))
    Creating cap  a574(r458,l1: a530(r458,l2: a420(r458,l3: a251(r458,l4))))
    Creating cap  a575(r457,l1: a531(r457,l2: a421(r457,l3: a252(r457,l4))))
    Creating cap  a576(r456,l1: a532(r456,l2: a422(r456,l3: a253(r456,l4))))
    Creating cap  a577(r452,l1: a533(r452,l2: a423(r452,l3: a254(r452,l4))))
    Creating cap  a578(r261,l1: a534(r261,l2: a424(r261,l3: a255(r261,l4))))
    Creating cap  a579(r454,l1: a535(r454,l2: a425(r454,l3: a256(r454,l4))))
    Creating cap  a580(r507,l1: a536(r507,l2: a426(r507,l3: a257(r507,l4))))
    Creating cap  a581(r451,l1: a537(r451,l2: a427(r451,l3: a258(r451,l4))))
    Creating cap  a582(r449,l1: a538(r449,l2: a428(r449,l3: a259(r449,l4))))
    Creating cap  a583(r448,l1: a539(r448,l2: a429(r448,l3: a260(r448,l4))))
    Creating cap  a584(r447,l1: a540(r447,l2: a430(r447,l3: a261(r447,l4))))
    Creating cap  a585(r443,l1: a541(r443,l2: a431(r443,l3: a262(r443,l4))))
    Creating cap  a586(r274,l1: a542(r274,l2: a432(r274,l3: a263(r274,l4))))
    Creating cap  a587(r445,l1: a543(r445,l2: a433(r445,l3: a264(r445,l4))))
    Creating cap  a588(r506,l1: a544(r506,l2: a434(r506,l3: a265(r506,l4))))
    Creating cap  a589(r442,l1: a545(r442,l2: a435(r442,l3: a266(r442,l4))))
    Creating cap  a590(r440,l1: a546(r440,l2: a436(r440,l3: a267(r440,l4))))
    Creating cap  a591(r439,l1: a547(r439,l2: a437(r439,l3: a268(r439,l4))))
    Creating cap  a592(r438,l1: a548(r438,l2: a438(r438,l3: a269(r438,l4))))
    Creating cap  a593(r436,l1: a549(r436,l2: a439(r436,l3: a270(r436,l4))))
    Creating cap  a594(r437,l1: a550(r437,l2: a440(r437,l3: a271(r437,l4))))
    Creating cap  a595(r434,l1: a551(r434,l2: a441(r434,l3: a272(r434,l4))))
    Creating cap  a596(r435,l1: a552(r435,l2: a442(r435,l3: a273(r435,l4))))
    Creating cap  a597(r432,l1: a553(r432,l2: a443(r432,l3: a274(r432,l4))))
    Creating cap  a598(r433,l1: a554(r433,l2: a444(r433,l3: a275(r433,l4))))
    Creating cap  a599(r431,l1: a555(r431,l2: a445(r431,l3: a276(r431,l4))))
    Creating cap  a600(r231,l1: a556(r231,l2: a446(r231,l3: a277(r231,l4))))
    Creating cap  a601(r232,l1: a557(r232,l2: a447(r232,l3: a278(r232,l4))))
    Creating cap  a602(r430,l1: a558(r430,l2: a448(r430,l3: a279(r430,l4))))
    Creating cap  a603(r429,l1: a559(r429,l2: a449(r429,l3: a280(r429,l4))))
    Creating cap  a604(r461,l0: a569(r461,l1: a525(r461,l2: a415(r461,l3: a246(r461,l4)))))
    Creating cap  a605(r247,l0: a570(r247,l1: a526(r247,l2: a416(r247,l3: a247(r247,l4)))))
    Creating cap  a606(r463,l0: a571(r463,l1: a527(r463,l2: a417(r463,l3: a248(r463,l4)))))
    Creating cap  a607(r508,l0: a572(r508,l1: a528(r508,l2: a418(r508,l3: a249(r508,l4)))))
    Creating cap  a608(r460,l0: a573(r460,l1: a529(r460,l2: a419(r460,l3: a250(r460,l4)))))
    Creating cap  a609(r458,l0: a574(r458,l1: a530(r458,l2: a420(r458,l3: a251(r458,l4)))))
    Creating cap  a610(r457,l0: a575(r457,l1: a531(r457,l2: a421(r457,l3: a252(r457,l4)))))
    Creating cap  a611(r456,l0: a576(r456,l1: a532(r456,l2: a422(r456,l3: a253(r456,l4)))))
    Creating cap  a612(r452,l0: a577(r452,l1: a533(r452,l2: a423(r452,l3: a254(r452,l4)))))
    Creating cap  a613(r261,l0: a578(r261,l1: a534(r261,l2: a424(r261,l3: a255(r261,l4)))))
    Creating cap  a614(r454,l0: a579(r454,l1: a535(r454,l2: a425(r454,l3: a256(r454,l4)))))
    Creating cap  a615(r507,l0: a580(r507,l1: a536(r507,l2: a426(r507,l3: a257(r507,l4)))))
    Creating cap  a616(r451,l0: a581(r451,l1: a537(r451,l2: a427(r451,l3: a258(r451,l4)))))
    Creating cap  a617(r449,l0: a582(r449,l1: a538(r449,l2: a428(r449,l3: a259(r449,l4)))))
    Creating cap  a618(r448,l0: a583(r448,l1: a539(r448,l2: a429(r448,l3: a260(r448,l4)))))
    Creating cap  a619(r447,l0: a584(r447,l1: a540(r447,l2: a430(r447,l3: a261(r447,l4)))))
    Creating cap  a620(r443,l0: a585(r443,l1: a541(r443,l2: a431(r443,l3: a262(r443,l4)))))
    Creating cap  a621(r274,l0: a586(r274,l1: a542(r274,l2: a432(r274,l3: a263(r274,l4)))))
    Creating cap  a622(r445,l0: a587(r445,l1: a543(r445,l2: a433(r445,l3: a264(r445,l4)))))
    Creating cap  a623(r506,l0: a588(r506,l1: a544(r506,l2: a434(r506,l3: a265(r506,l4)))))
    Creating cap  a624(r442,l0: a589(r442,l1: a545(r442,l2: a435(r442,l3: a266(r442,l4)))))
    Creating cap  a625(r440,l0: a590(r440,l1: a546(r440,l2: a436(r440,l3: a267(r440,l4)))))
    Creating cap  a626(r439,l0: a591(r439,l1: a547(r439,l2: a437(r439,l3: a268(r439,l4)))))
    Creating cap  a627(r438,l0: a592(r438,l1: a548(r438,l2: a438(r438,l3: a269(r438,l4)))))
    Creating cap  a628(r436,l0: a593(r436,l1: a549(r436,l2: a439(r436,l3: a270(r436,l4)))))
    Creating cap  a629(r437,l0: a594(r437,l1: a550(r437,l2: a440(r437,l3: a271(r437,l4)))))
    Creating cap  a630(r434,l0: a595(r434,l1: a551(r434,l2: a441(r434,l3: a272(r434,l4)))))
    Creating cap  a631(r435,l0: a596(r435,l1: a552(r435,l2: a442(r435,l3: a273(r435,l4)))))
    Creating cap  a632(r432,l0: a597(r432,l1: a553(r432,l2: a443(r432,l3: a274(r432,l4)))))
    Creating cap  a633(r433,l0: a598(r433,l1: a554(r433,l2: a444(r433,l3: a275(r433,l4)))))
    Creating cap  a634(r431,l0: a599(r431,l1: a555(r431,l2: a445(r431,l3: a276(r431,l4)))))
    Creating cap  a635(r231,l0: a600(r231,l1: a556(r231,l2: a446(r231,l3: a277(r231,l4)))))
    Creating cap  a636(r232,l0: a601(r232,l1: a557(r232,l2: a447(r232,l3: a278(r232,l4)))))
    Creating cap  a637(r430,l0: a602(r430,l1: a558(r430,l2: a448(r430,l3: a279(r430,l4)))))
    Creating cap  a638(r429,l0: a603(r429,l1: a559(r429,l2: a449(r429,l3: a280(r429,l4)))))
+++Allocating 34608 bytes for conflict table (uncompressed size 51120)
;; a0(r62,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a1(r61,l0) a22(r299,l0) a10(r79,l0) a2(r295,l0) a23(r296,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r61,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a21(r82,l0) a22(r299,l0) a0(r62,l0) a10(r79,l0) a2(r295,l0) a23(r296,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r295,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a1(r61,l0) a0(r62,l0) a10(r79,l0) a23(r296,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a3(r64,l0) conflicts: a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a19(r83,l0) a9(r71,l0) a21(r82,l0) a1(r61,l0) a22(r299,l0) a0(r62,l0) a10(r79,l0) a2(r295,l0) a23(r296,l0) a24(r77,l0) a25(r80,l0) a26(r293,l0) a28(r78,l0) a29(r76,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a339(r301,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a4(r65,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a8(r69,l0) a6(r67,l0) a19(r83,l0) a9(r71,l0) a21(r82,l0) a1(r61,l0) a22(r299,l0) a0(r62,l0) a10(r79,l0) a2(r295,l0) a23(r296,l0) a24(r77,l0) a25(r80,l0) a26(r293,l0) a28(r78,l0) a29(r76,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a5(r66,l0) conflicts: a3(r64,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a19(r83,l0) a9(r71,l0) a21(r82,l0) a1(r61,l0) a22(r299,l0) a0(r62,l0) a10(r79,l0) a2(r295,l0) a23(r296,l0) a24(r77,l0) a25(r80,l0) a26(r293,l0) a28(r78,l0) a29(r76,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a339(r301,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a6(r67,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a18(r84,l0) a20(r63,l0) a8(r69,l0) a4(r65,l0) a19(r83,l0) a9(r71,l0) a21(r82,l0) a1(r61,l0) a22(r299,l0) a0(r62,l0) a10(r79,l0) a2(r295,l0) a23(r296,l0) a24(r77,l0) a25(r80,l0) a26(r293,l0) a28(r78,l0) a29(r76,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a7(r68,l0) conflicts: a3(r64,l0) a5(r66,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a19(r83,l0) a9(r71,l0) a21(r82,l0) a1(r61,l0) a22(r299,l0) a0(r62,l0) a10(r79,l0) a2(r295,l0) a23(r296,l0) a24(r77,l0) a25(r80,l0) a26(r293,l0) a28(r78,l0) a29(r76,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a339(r301,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a8(r69,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a4(r65,l0) a6(r67,l0) a19(r83,l0) a9(r71,l0) a21(r82,l0) a1(r61,l0) a22(r299,l0) a0(r62,l0) a10(r79,l0) a2(r295,l0) a23(r296,l0) a24(r77,l0) a25(r80,l0) a26(r293,l0) a28(r78,l0) a29(r76,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a9(r71,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a20(r63,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a19(r83,l0) a21(r82,l0) a1(r61,l0) a22(r299,l0) a0(r62,l0) a10(r79,l0) a2(r295,l0) a23(r296,l0) a24(r77,l0) a25(r80,l0) a26(r293,l0) a28(r78,l0) a29(r76,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a10(r79,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a1(r61,l0) a0(r62,l0) a2(r295,l0) a23(r296,l0) a24(r77,l0) a25(r80,l0) a26(r293,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

;; a11(r292,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a19(r83,l0) a9(r71,l0) a21(r82,l0) a1(r61,l0) a22(r299,l0) a0(r62,l0) a10(r79,l0) a2(r295,l0) a23(r296,l0) a24(r77,l0) a25(r80,l0) a26(r293,l0) a28(r78,l0) a29(r76,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a339(r301,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a12(r503,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r502,l0) conflicts: a14(r501,l0) a290(r380,l0) a291(r378,l0) a293(r379,l0) a292(r149,l0) a294(r375,l0) a295(r373,l0) a297(r374,l0) a296(r372,l0) a299(r148,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0) a476(r424,l0) a467(r200,l0) a466(r197,l0) a510(r164,l0) a498(r166,l0) a513(r385,l0) a511(r389,l0) a505(r395,l0) a504(r397,l0) a502(r175,l0) a501(r398,l0) a503(r399,l0) a470(r467,l0) a471(r468,l0) a472(r465,l0) a473(r466,l0) a477(r422,l0) a478(r423,l0) a479(r420,l0) a480(r421,l0) a481(r419,l0) a484(r415,l0) a485(r208,l0) a486(r416,l0) a487(r414,l0) a488(r412,l0) a489(r413,l0) a465(r186,l0) a456(r475,l0) a453(r291,l0) a454(r290,l0) a457(r478,l0) a458(r477,l0) a459(r476,l0) a460(r472,l0) a461(r471,l0) a462(r473,l0) a463(r469,l0) a464(r470,l0) a450(r481,l0) a451(r480,l0) a452(r479,l0) a494(r408,l0) a493(r179,l0) a495(r406,l0) a496(r404,l0) a497(r407,l0) a499(r400,l0) a500(r401,l0) a562(r220,l0) a563(r428,l0) a637(r430,l0) a628(r436,l0) a629(r437,l0) a614(r454,l0) a615(r507,l0) a634(r431,l0) a622(r445,l0) a623(r506,l0) a630(r434,l0) a631(r435,l0) a606(r463,l0) a607(r508,l0) a632(r432,l0) a633(r433,l0)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a14(r501,l0) conflicts: a13(r502,l0) a290(r380,l0) a291(r378,l0) a293(r379,l0) a292(r149,l0) a294(r375,l0) a295(r373,l0) a297(r374,l0) a296(r372,l0) a299(r148,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0) a476(r424,l0) a467(r200,l0) a466(r197,l0) a510(r164,l0) a498(r166,l0) a513(r385,l0) a511(r389,l0) a505(r395,l0) a504(r397,l0) a502(r175,l0) a501(r398,l0) a503(r399,l0) a470(r467,l0) a471(r468,l0) a472(r465,l0) a473(r466,l0) a477(r422,l0) a478(r423,l0) a479(r420,l0) a480(r421,l0) a481(r419,l0) a484(r415,l0) a485(r208,l0) a486(r416,l0) a487(r414,l0) a488(r412,l0) a489(r413,l0) a465(r186,l0) a456(r475,l0) a453(r291,l0) a454(r290,l0) a457(r478,l0) a458(r477,l0) a459(r476,l0) a460(r472,l0) a461(r471,l0) a462(r473,l0) a463(r469,l0) a464(r470,l0) a450(r481,l0) a451(r480,l0) a452(r479,l0) a494(r408,l0) a493(r179,l0) a495(r406,l0) a496(r404,l0) a497(r407,l0) a499(r400,l0) a500(r401,l0) a562(r220,l0) a563(r428,l0) a637(r430,l0) a628(r436,l0) a629(r437,l0) a614(r454,l0) a615(r507,l0) a634(r431,l0) a622(r445,l0) a623(r506,l0) a630(r434,l0) a631(r435,l0) a606(r463,l0) a607(r508,l0) a632(r432,l0) a633(r433,l0)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a15(r270,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a339(r301,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a16(r257,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a8(r69,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a339(r301,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a17(r244,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a18(r84,l0) a20(r63,l0) a8(r69,l0) a4(r65,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a339(r301,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a18(r84,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a20(r63,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a339(r301,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a19(r83,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a20(r63,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a21(r82,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a20(r63,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a19(r83,l0) a9(r71,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a339(r301,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a21(r82,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a19(r83,l0) a9(r71,l0) a1(r61,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a22(r299,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a1(r61,l0) a0(r62,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a23(r296,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a1(r61,l0) a0(r62,l0) a10(r79,l0) a2(r295,l0) a24(r77,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a24(r77,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a10(r79,l0) a23(r296,l0) a25(r80,l0) a26(r293,l0) a28(r78,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a25(r80,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a10(r79,l0) a24(r77,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a26(r293,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a10(r79,l0) a24(r77,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a27(r294,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a28(r78,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0) a24(r77,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a29(r76,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a8(r69,l0) a4(r65,l0) a6(r67,l0) a9(r71,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a30(r63,l1) conflicts: a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a100(r301,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a31(r64,l1) conflicts: a30(r63,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a100(r301,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a32(r66,l1) conflicts: a30(r63,l1) a31(r64,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a100(r301,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a33(r68,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a100(r301,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a34(r84,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a100(r301,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a35(r244,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a100(r301,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a36(r257,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a100(r301,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a37(r270,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a100(r301,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a38(r292,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a100(r301,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a39(r501,l1) conflicts: a40(r502,l1) a51(r380,l1) a52(r378,l1) a54(r379,l1) a53(r149,l1) a55(r375,l1) a56(r373,l1) a58(r374,l1) a57(r372,l1) a60(r148,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1) a366(r424,l1) a357(r200,l1) a356(r197,l1) a400(r164,l1) a388(r166,l1) a403(r385,l1) a401(r389,l1) a395(r395,l1) a394(r397,l1) a392(r175,l1) a391(r398,l1) a393(r399,l1) a360(r467,l1) a361(r468,l1) a362(r465,l1) a363(r466,l1) a367(r422,l1) a368(r423,l1) a369(r420,l1) a370(r421,l1) a371(r419,l1) a374(r415,l1) a375(r208,l1) a376(r416,l1) a377(r414,l1) a378(r412,l1) a379(r413,l1) a355(r186,l1) a346(r475,l1) a343(r291,l1) a344(r290,l1) a347(r478,l1) a348(r477,l1) a349(r476,l1) a350(r472,l1) a351(r471,l1) a352(r473,l1) a353(r469,l1) a354(r470,l1) a340(r481,l1) a341(r480,l1) a342(r479,l1) a384(r408,l1) a383(r179,l1) a385(r406,l1) a386(r404,l1) a387(r407,l1) a389(r400,l1) a390(r401,l1) a518(r220,l1) a519(r428,l1) a602(r430,l1) a593(r436,l1) a594(r437,l1) a579(r454,l1) a580(r507,l1) a599(r431,l1) a587(r445,l1) a588(r506,l1) a595(r434,l1) a596(r435,l1) a571(r463,l1) a572(r508,l1) a597(r432,l1) a598(r433,l1)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a40(r502,l1) conflicts: a39(r501,l1) a51(r380,l1) a52(r378,l1) a54(r379,l1) a53(r149,l1) a55(r375,l1) a56(r373,l1) a58(r374,l1) a57(r372,l1) a60(r148,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1) a366(r424,l1) a357(r200,l1) a356(r197,l1) a400(r164,l1) a388(r166,l1) a403(r385,l1) a401(r389,l1) a395(r395,l1) a394(r397,l1) a392(r175,l1) a391(r398,l1) a393(r399,l1) a360(r467,l1) a361(r468,l1) a362(r465,l1) a363(r466,l1) a367(r422,l1) a368(r423,l1) a369(r420,l1) a370(r421,l1) a371(r419,l1) a374(r415,l1) a375(r208,l1) a376(r416,l1) a377(r414,l1) a378(r412,l1) a379(r413,l1) a355(r186,l1) a346(r475,l1) a343(r291,l1) a344(r290,l1) a347(r478,l1) a348(r477,l1) a349(r476,l1) a350(r472,l1) a351(r471,l1) a352(r473,l1) a353(r469,l1) a354(r470,l1) a340(r481,l1) a341(r480,l1) a342(r479,l1) a384(r408,l1) a383(r179,l1) a385(r406,l1) a386(r404,l1) a387(r407,l1) a389(r400,l1) a390(r401,l1) a518(r220,l1) a519(r428,l1) a602(r430,l1) a593(r436,l1) a594(r437,l1) a579(r454,l1) a580(r507,l1) a599(r431,l1) a587(r445,l1) a588(r506,l1) a595(r434,l1) a596(r435,l1) a571(r463,l1) a572(r508,l1) a597(r432,l1) a598(r433,l1)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a41(r503,l1) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a42(r500,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a43(r499,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a44(r498,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a45(r282,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a46(r163,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a47(r302,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a70(r87,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a48(r85,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a100(r301,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a49(r101,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a50(r115,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a47(r302,l1) a70(r87,l1) a59(r371,l1) a61(r349,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a364(r281,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a405(r382,l1) a404(r384,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a51(r380,l1) conflicts: a39(r501,l1) a40(r502,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a52(r378,l1) conflicts: a39(r501,l1) a40(r502,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a53(r149,l1) conflicts: a39(r501,l1) a40(r502,l1) a54(r379,l1) a55(r375,l1) a56(r373,l1) a58(r374,l1) a57(r372,l1) a60(r148,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a54(r379,l1) conflicts: a39(r501,l1) a40(r502,l1) a53(r149,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a55(r375,l1) conflicts: a39(r501,l1) a40(r502,l1) a53(r149,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a56(r373,l1) conflicts: a39(r501,l1) a40(r502,l1) a53(r149,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a57(r372,l1) conflicts: a39(r501,l1) a40(r502,l1) a53(r149,l1) a58(r374,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a58(r374,l1) conflicts: a39(r501,l1) a40(r502,l1) a53(r149,l1) a57(r372,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a59(r371,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a60(r148,l1) conflicts: a39(r501,l1) a40(r502,l1) a53(r149,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a61(r349,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a62(r370,l1) a63(r369,l1) a65(r368,l1) a64(r350,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a62(r370,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a61(r349,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a63(r369,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a61(r349,l1) a64(r350,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a64(r350,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a63(r369,l1) a65(r368,l1) a66(r366,l1) a67(r365,l1) a68(r364,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a65(r368,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a61(r349,l1) a64(r350,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a66(r366,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a61(r349,l1) a64(r350,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a67(r365,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a61(r349,l1) a64(r350,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a68(r364,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a61(r349,l1) a64(r350,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a69(r139,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a70(r87,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a61(r349,l1) a64(r350,l1) a69(r139,l1) a71(r363,l1) a73(r362,l1) a72(r336,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1) a96(r315,l1) a97(r311,l1) a98(r307,l1) a99(r304,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a71(r363,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a72(r336,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a71(r363,l1) a73(r362,l1) a74(r360,l1) a75(r359,l1) a76(r358,l1) a77(r132,l1) a78(r357,l1) a80(r356,l1) a79(r319,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a73(r362,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a74(r360,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a75(r359,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a76(r358,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a77(r132,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a78(r357,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a79(r319,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1) a78(r357,l1) a80(r356,l1) a81(r354,l1) a82(r353,l1) a83(r352,l1) a84(r125,l1) a85(r351,l1) a86(r348,l1) a87(r346,l1) a88(r344,l1) a89(r342,l1) a90(r337,l1) a91(r332,l1) a92(r328,l1) a93(r325,l1) a94(r322,l1) a95(r320,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a80(r356,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a81(r354,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a82(r353,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a83(r352,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a84(r125,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a85(r351,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a61(r349,l1) a64(r350,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a86(r348,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a87(r346,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a88(r344,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a89(r342,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a90(r337,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a47(r302,l1) a70(r87,l1) a72(r336,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a91(r332,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a47(r302,l1) a70(r87,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a92(r328,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a47(r302,l1) a70(r87,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a93(r325,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a47(r302,l1) a70(r87,l1) a79(r319,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a94(r322,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a47(r302,l1) a70(r87,l1) a79(r319,l1) a95(r320,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a95(r320,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a49(r101,l1) a47(r302,l1) a70(r87,l1) a79(r319,l1) a94(r322,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a96(r315,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a47(r302,l1) a70(r87,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a97(r311,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a47(r302,l1) a70(r87,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a98(r307,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a47(r302,l1) a70(r87,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a99(r304,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1) a47(r302,l1) a70(r87,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a100(r301,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a48(r85,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a101(r63,l2) conflicts: a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a102(r64,l2) conflicts: a101(r63,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a103(r66,l2) conflicts: a101(r63,l2) a102(r64,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a104(r68,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a105(r84,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a106(r85,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a107(r101,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a108(r115,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a109(r163,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a110(r244,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a111(r257,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a112(r270,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a113(r282,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a114(r292,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a115(r498,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a116(r499,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a117(r500,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a117(r500,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a145(r281,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a186(r382,l2) a185(r384,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a118(r501,l2) conflicts: a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2) a147(r424,l2) a138(r200,l2) a137(r197,l2) a181(r164,l2) a169(r166,l2) a184(r385,l2) a182(r389,l2) a176(r395,l2) a175(r397,l2) a173(r175,l2) a172(r398,l2) a174(r399,l2) a141(r467,l2) a142(r468,l2) a143(r465,l2) a144(r466,l2) a148(r422,l2) a149(r423,l2) a150(r420,l2) a151(r421,l2) a152(r419,l2) a155(r415,l2) a156(r208,l2) a157(r416,l2) a158(r414,l2) a159(r412,l2) a160(r413,l2) a136(r186,l2) a127(r475,l2) a124(r291,l2) a125(r290,l2) a128(r478,l2) a129(r477,l2) a130(r476,l2) a131(r472,l2) a132(r471,l2) a133(r473,l2) a134(r469,l2) a135(r470,l2) a121(r481,l2) a122(r480,l2) a123(r479,l2) a165(r408,l2) a164(r179,l2) a166(r406,l2) a167(r404,l2) a168(r407,l2) a170(r400,l2) a171(r401,l2) a408(r220,l2) a409(r428,l2) a558(r430,l2) a549(r436,l2) a550(r437,l2) a535(r454,l2) a536(r507,l2) a555(r431,l2) a543(r445,l2) a544(r506,l2) a551(r434,l2) a552(r435,l2) a527(r463,l2) a528(r508,l2) a553(r432,l2) a554(r433,l2)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a119(r502,l2) conflicts: a118(r501,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2) a147(r424,l2) a138(r200,l2) a137(r197,l2) a181(r164,l2) a169(r166,l2) a184(r385,l2) a182(r389,l2) a176(r395,l2) a175(r397,l2) a173(r175,l2) a172(r398,l2) a174(r399,l2) a141(r467,l2) a142(r468,l2) a143(r465,l2) a144(r466,l2) a148(r422,l2) a149(r423,l2) a150(r420,l2) a151(r421,l2) a152(r419,l2) a155(r415,l2) a156(r208,l2) a157(r416,l2) a158(r414,l2) a159(r412,l2) a160(r413,l2) a136(r186,l2) a127(r475,l2) a124(r291,l2) a125(r290,l2) a128(r478,l2) a129(r477,l2) a130(r476,l2) a131(r472,l2) a132(r471,l2) a133(r473,l2) a134(r469,l2) a135(r470,l2) a121(r481,l2) a122(r480,l2) a123(r479,l2) a165(r408,l2) a164(r179,l2) a166(r406,l2) a167(r404,l2) a168(r407,l2) a170(r400,l2) a171(r401,l2) a408(r220,l2) a409(r428,l2) a558(r430,l2) a549(r436,l2) a550(r437,l2) a535(r454,l2) a536(r507,l2) a555(r431,l2) a543(r445,l2) a544(r506,l2) a551(r434,l2) a552(r435,l2) a527(r463,l2) a528(r508,l2) a553(r432,l2) a554(r433,l2)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a120(r503,l2) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a121(r481,l2) conflicts: a118(r501,l2) a119(r502,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a122(r480,l2) conflicts: a118(r501,l2) a119(r502,l2) a123(r479,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a123(r479,l2) conflicts: a118(r501,l2) a119(r502,l2) a124(r291,l2) a122(r480,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a124(r291,l2) conflicts: a118(r501,l2) a119(r502,l2) a127(r475,l2) a125(r290,l2) a128(r478,l2) a129(r477,l2) a130(r476,l2) a123(r479,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a125(r290,l2) conflicts: a118(r501,l2) a119(r502,l2) a127(r475,l2) a124(r291,l2) a128(r478,l2) a129(r477,l2) a130(r476,l2) a131(r472,l2) a132(r471,l2) a133(r473,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a126(r152,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a138(r200,l2) a137(r197,l2) a183(r387,l2) a177(r394,l2) a179(r393,l2) a178(r392,l2) a180(r390,l2) a153(r417,l2) a154(r418,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a127(r475,l2) conflicts: a118(r501,l2) a119(r502,l2) a124(r291,l2) a125(r290,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a128(r478,l2) conflicts: a118(r501,l2) a119(r502,l2) a124(r291,l2) a125(r290,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a129(r477,l2) conflicts: a118(r501,l2) a119(r502,l2) a124(r291,l2) a125(r290,l2) a130(r476,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a130(r476,l2) conflicts: a118(r501,l2) a119(r502,l2) a124(r291,l2) a125(r290,l2) a129(r477,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a131(r472,l2) conflicts: a118(r501,l2) a119(r502,l2) a125(r290,l2) a132(r471,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a132(r471,l2) conflicts: a118(r501,l2) a119(r502,l2) a125(r290,l2) a131(r472,l2) a133(r473,l2) a134(r469,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a133(r473,l2) conflicts: a118(r501,l2) a119(r502,l2) a125(r290,l2) a132(r471,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a134(r469,l2) conflicts: a118(r501,l2) a119(r502,l2) a132(r471,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a135(r470,l2) conflicts: a118(r501,l2) a119(r502,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a136(r186,l2) conflicts: a118(r501,l2) a119(r502,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a137(r197,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a138(r200,l2) a126(r152,l2) a141(r467,l2) a142(r468,l2) a143(r465,l2) a144(r466,l2) a148(r422,l2) a149(r423,l2) a150(r420,l2) a151(r421,l2) a152(r419,l2) a153(r417,l2) a154(r418,l2) a155(r415,l2) a156(r208,l2) a157(r416,l2) a158(r414,l2) a159(r412,l2) a160(r413,l2) a161(r411,l2) a162(r199,l2) a163(r410,l2)
;;     total conflict hard regs: 0-2 4 5 21-28 37-40 45-51
;;     conflict hard regs: 0-2 4 5 21-28 37-40 45-51

;; a138(r200,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a137(r197,l2) a126(r152,l2) a141(r467,l2) a142(r468,l2) a143(r465,l2) a144(r466,l2) a148(r422,l2) a149(r423,l2) a150(r420,l2) a151(r421,l2) a152(r419,l2) a153(r417,l2) a154(r418,l2) a155(r415,l2) a156(r208,l2) a157(r416,l2) a158(r414,l2) a159(r412,l2) a160(r413,l2) a161(r411,l2) a162(r199,l2)
;;     total conflict hard regs: 0-2 4 5 21-28 37-40 45-51
;;     conflict hard regs: 0-2 4 5 21-28 37-40 45-51

;; a139(r209,l2) conflicts: a118(r501,l2) a119(r502,l2) a140(r214,l2) a146(r202,l2) a147(r424,l2) a138(r200,l2) a137(r197,l2) a141(r467,l2) a142(r468,l2) a143(r465,l2) a144(r466,l2) a148(r422,l2) a149(r423,l2) a150(r420,l2) a151(r421,l2) a152(r419,l2) a408(r220,l2) a409(r428,l2) a558(r430,l2) a549(r436,l2) a550(r437,l2) a535(r454,l2) a536(r507,l2) a555(r431,l2) a543(r445,l2) a544(r506,l2) a551(r434,l2) a552(r435,l2) a527(r463,l2) a528(r508,l2) a553(r432,l2) a554(r433,l2)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a140(r214,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a146(r202,l2) a147(r424,l2) a138(r200,l2) a137(r197,l2) a141(r467,l2) a142(r468,l2) a143(r465,l2) a144(r466,l2) a148(r422,l2) a149(r423,l2) a150(r420,l2) a151(r421,l2) a408(r220,l2) a409(r428,l2) a558(r430,l2) a549(r436,l2) a550(r437,l2) a535(r454,l2) a536(r507,l2) a555(r431,l2) a543(r445,l2) a544(r506,l2) a551(r434,l2) a552(r435,l2) a527(r463,l2) a528(r508,l2) a553(r432,l2) a554(r433,l2)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a141(r467,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a138(r200,l2) a137(r197,l2) a142(r468,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a142(r468,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a138(r200,l2) a137(r197,l2) a141(r467,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a143(r465,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a138(r200,l2) a137(r197,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a144(r466,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a138(r200,l2) a137(r197,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a145(r281,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a406(r280,l2) a407(r229,l2) a412(r427,l2) a410(r222,l2) a411(r223,l2) a413(r425,l2) a414(r426,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a146(r202,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a408(r220,l2) a409(r428,l2) a558(r430,l2) a549(r436,l2) a550(r437,l2) a535(r454,l2) a536(r507,l2) a555(r431,l2) a543(r445,l2) a544(r506,l2) a551(r434,l2) a552(r435,l2) a527(r463,l2) a528(r508,l2) a553(r432,l2) a554(r433,l2)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a147(r424,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a148(r422,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a138(r200,l2) a137(r197,l2) a149(r423,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a149(r423,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a138(r200,l2) a137(r197,l2) a148(r422,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a150(r420,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a138(r200,l2) a137(r197,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a151(r421,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a138(r200,l2) a137(r197,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a152(r419,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a138(r200,l2) a137(r197,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a153(r417,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a154(r418,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a154(r418,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a153(r417,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a155(r415,l2) conflicts: a118(r501,l2) a119(r502,l2) a138(r200,l2) a137(r197,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a156(r208,l2) conflicts: a118(r501,l2) a119(r502,l2) a138(r200,l2) a137(r197,l2) a157(r416,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a157(r416,l2) conflicts: a118(r501,l2) a119(r502,l2) a138(r200,l2) a137(r197,l2) a156(r208,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a158(r414,l2) conflicts: a118(r501,l2) a119(r502,l2) a138(r200,l2) a137(r197,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a159(r412,l2) conflicts: a118(r501,l2) a119(r502,l2) a138(r200,l2) a137(r197,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a160(r413,l2) conflicts: a118(r501,l2) a119(r502,l2) a138(r200,l2) a137(r197,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a161(r411,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a162(r199,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a162(r199,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a138(r200,l2) a137(r197,l2) a126(r152,l2) a161(r411,l2) a163(r410,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a163(r410,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a137(r197,l2) a126(r152,l2) a162(r199,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a164(r179,l2) conflicts: a118(r501,l2) a119(r502,l2) a169(r166,l2) a165(r408,l2) a166(r406,l2) a167(r404,l2) a168(r407,l2)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a165(r408,l2) conflicts: a118(r501,l2) a119(r502,l2) a164(r179,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a166(r406,l2) conflicts: a118(r501,l2) a119(r502,l2) a164(r179,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a167(r404,l2) conflicts: a118(r501,l2) a119(r502,l2) a164(r179,l2) a168(r407,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a168(r407,l2) conflicts: a118(r501,l2) a119(r502,l2) a164(r179,l2) a167(r404,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a169(r166,l2) conflicts: a118(r501,l2) a119(r502,l2) a181(r164,l2) a184(r385,l2) a182(r389,l2) a176(r395,l2) a175(r397,l2) a173(r175,l2) a172(r398,l2) a174(r399,l2) a164(r179,l2) a170(r400,l2) a171(r401,l2)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a170(r400,l2) conflicts: a118(r501,l2) a119(r502,l2) a169(r166,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a171(r401,l2) conflicts: a118(r501,l2) a119(r502,l2) a169(r166,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a172(r398,l2) conflicts: a118(r501,l2) a119(r502,l2) a169(r166,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a173(r175,l2) conflicts: a118(r501,l2) a119(r502,l2) a169(r166,l2) a175(r397,l2) a174(r399,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a174(r399,l2) conflicts: a118(r501,l2) a119(r502,l2) a169(r166,l2) a173(r175,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a175(r397,l2) conflicts: a118(r501,l2) a119(r502,l2) a169(r166,l2) a173(r175,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a176(r395,l2) conflicts: a118(r501,l2) a119(r502,l2) a169(r166,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a177(r394,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a126(r152,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a178(r392,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a126(r152,l2) a179(r393,l2) a180(r390,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a179(r393,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a126(r152,l2) a178(r392,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a180(r390,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a126(r152,l2) a178(r392,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a181(r164,l2) conflicts: a118(r501,l2) a119(r502,l2) a169(r166,l2) a184(r385,l2) a182(r389,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a182(r389,l2) conflicts: a118(r501,l2) a119(r502,l2) a181(r164,l2) a169(r166,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a183(r387,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a126(r152,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a184(r385,l2) conflicts: a118(r501,l2) a119(r502,l2) a181(r164,l2) a169(r166,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a185(r384,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a186(r382,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a187(r63,l3) conflicts: a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a188(r64,l3) conflicts: a187(r63,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a189(r66,l3) conflicts: a187(r63,l3) a188(r64,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a190(r68,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a191(r84,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a192(r85,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a193(r101,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a194(r115,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a195(r163,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a196(r202,l3) conflicts: a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3) a213(r220,l3) a214(r428,l3) a448(r430,l3) a439(r436,l3) a440(r437,l3) a425(r454,l3) a426(r507,l3) a445(r431,l3) a433(r445,l3) a434(r506,l3) a441(r434,l3) a442(r435,l3) a417(r463,l3) a418(r508,l3) a443(r432,l3) a444(r433,l3)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a197(r209,l3) conflicts: a196(r202,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3) a213(r220,l3) a214(r428,l3) a448(r430,l3) a439(r436,l3) a440(r437,l3) a425(r454,l3) a426(r507,l3) a445(r431,l3) a433(r445,l3) a434(r506,l3) a441(r434,l3) a442(r435,l3) a417(r463,l3) a418(r508,l3) a443(r432,l3) a444(r433,l3)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a198(r214,l3) conflicts: a196(r202,l3) a197(r209,l3) a208(r501,l3) a209(r502,l3) a213(r220,l3) a214(r428,l3) a448(r430,l3) a439(r436,l3) a440(r437,l3) a425(r454,l3) a426(r507,l3) a445(r431,l3) a433(r445,l3) a434(r506,l3) a441(r434,l3) a442(r435,l3) a417(r463,l3) a418(r508,l3) a443(r432,l3) a444(r433,l3)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a199(r244,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a200(r257,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a201(r270,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a202(r281,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a203(r282,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a204(r292,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a205(r498,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a206(r499,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a207(r500,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a211(r280,l3) a212(r229,l3) a217(r427,l3) a215(r222,l3) a216(r223,l3) a218(r425,l3) a219(r426,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a208(r501,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a209(r502,l3) a213(r220,l3) a214(r428,l3) a448(r430,l3) a439(r436,l3) a440(r437,l3) a425(r454,l3) a426(r507,l3) a445(r431,l3) a433(r445,l3) a434(r506,l3) a441(r434,l3) a442(r435,l3) a417(r463,l3) a418(r508,l3) a443(r432,l3) a444(r433,l3)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a209(r502,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a213(r220,l3) a214(r428,l3) a448(r430,l3) a439(r436,l3) a440(r437,l3) a425(r454,l3) a426(r507,l3) a445(r431,l3) a433(r445,l3) a434(r506,l3) a441(r434,l3) a442(r435,l3) a417(r463,l3) a418(r508,l3) a443(r432,l3) a444(r433,l3)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a210(r503,l3) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a211(r280,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a212(r229,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3) a425(r454,l3) a423(r452,l3) a424(r261,l3) a427(r451,l3) a428(r449,l3) a429(r448,l3) a430(r447,l3) a433(r445,l3) a431(r443,l3) a432(r274,l3) a435(r442,l3) a436(r440,l3) a437(r439,l3) a438(r438,l3) a417(r463,l3) a415(r461,l3) a416(r247,l3) a419(r460,l3) a420(r458,l3) a421(r457,l3) a422(r456,l3)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a212(r229,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a446(r231,l3) a447(r232,l3) a449(r429,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a213(r220,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3) a214(r428,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a214(r428,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3) a213(r220,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a215(r222,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a217(r427,l3) a216(r223,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a216(r223,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a217(r427,l3) a215(r222,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a217(r427,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a215(r222,l3) a216(r223,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a218(r425,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a219(r426,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a219(r426,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a218(r425,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a220(r63,l4) conflicts: a277(r231,l4) a278(r232,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a221(r64,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a222(r66,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a223(r68,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a224(r84,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a225(r85,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a226(r101,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a227(r115,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a228(r163,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a229(r202,l4) conflicts: a279(r430,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4) a270(r436,l4) a271(r437,l4) a256(r454,l4) a257(r507,l4) a276(r431,l4) a264(r445,l4) a265(r506,l4) a272(r434,l4) a273(r435,l4) a248(r463,l4) a249(r508,l4) a274(r432,l4) a275(r433,l4)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a230(r209,l4) conflicts: a279(r430,l4) a229(r202,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4) a270(r436,l4) a271(r437,l4) a256(r454,l4) a257(r507,l4) a276(r431,l4) a264(r445,l4) a265(r506,l4) a272(r434,l4) a273(r435,l4) a248(r463,l4) a249(r508,l4) a274(r432,l4) a275(r433,l4)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a231(r214,l4) conflicts: a279(r430,l4) a229(r202,l4) a230(r209,l4) a243(r501,l4) a244(r502,l4) a270(r436,l4) a271(r437,l4) a256(r454,l4) a257(r507,l4) a276(r431,l4) a264(r445,l4) a265(r506,l4) a272(r434,l4) a273(r435,l4) a248(r463,l4) a249(r508,l4) a274(r432,l4) a275(r433,l4)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a232(r229,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a233(r244,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a234(r257,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a235(r270,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a236(r280,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a237(r281,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a238(r282,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a239(r292,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a240(r498,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a241(r499,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a242(r500,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a242(r500,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a280(r429,l4) a256(r454,l4) a254(r452,l4) a255(r261,l4) a258(r451,l4) a259(r449,l4) a260(r448,l4) a261(r447,l4) a264(r445,l4) a262(r443,l4) a263(r274,l4) a266(r442,l4) a267(r440,l4) a268(r439,l4) a269(r438,l4) a248(r463,l4) a246(r461,l4) a247(r247,l4) a250(r460,l4) a251(r458,l4) a252(r457,l4) a253(r456,l4)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a243(r501,l4) conflicts: a279(r430,l4) a229(r202,l4) a230(r209,l4) a231(r214,l4) a244(r502,l4) a270(r436,l4) a271(r437,l4) a256(r454,l4) a257(r507,l4) a276(r431,l4) a264(r445,l4) a265(r506,l4) a272(r434,l4) a273(r435,l4) a248(r463,l4) a249(r508,l4) a274(r432,l4) a275(r433,l4)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a244(r502,l4) conflicts: a279(r430,l4) a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a270(r436,l4) a271(r437,l4) a256(r454,l4) a257(r507,l4) a276(r431,l4) a264(r445,l4) a265(r506,l4) a272(r434,l4) a273(r435,l4) a248(r463,l4) a249(r508,l4) a274(r432,l4) a275(r433,l4)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a245(r503,l4) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a246(r461,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a248(r463,l4) a247(r247,l4)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a247(r247,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a248(r463,l4) a246(r461,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a248(r463,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a229(r202,l4) a230(r209,l4) a231(r214,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a243(r501,l4) a244(r502,l4) a246(r461,l4) a247(r247,l4)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a249(r508,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a250(r460,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a251(r458,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a252(r457,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a253(r456,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a254(r452,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a256(r454,l4) a255(r261,l4)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a255(r261,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a256(r454,l4) a254(r452,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a256(r454,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a229(r202,l4) a230(r209,l4) a231(r214,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a243(r501,l4) a244(r502,l4) a254(r452,l4) a255(r261,l4)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a257(r507,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a258(r451,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a259(r449,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a260(r448,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a261(r447,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a262(r443,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a264(r445,l4) a263(r274,l4)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a263(r274,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a264(r445,l4) a262(r443,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a264(r445,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a229(r202,l4) a230(r209,l4) a231(r214,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a243(r501,l4) a244(r502,l4) a262(r443,l4) a263(r274,l4)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a265(r506,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a266(r442,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a267(r440,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a268(r439,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a269(r438,l4) conflicts: a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a270(r436,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4) a271(r437,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a271(r437,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4) a270(r436,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a272(r434,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4) a273(r435,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a273(r435,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4) a272(r434,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a274(r432,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4) a275(r433,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a275(r433,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4) a274(r432,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a276(r431,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a277(r231,l4) conflicts: a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a278(r232,l4) conflicts: a277(r231,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4) a280(r429,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a279(r430,l4) conflicts: a229(r202,l4) a230(r209,l4) a231(r214,l4) a243(r501,l4) a244(r502,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a280(r429,l4) conflicts: a277(r231,l4) a278(r232,l4) a220(r63,l4) a221(r64,l4) a222(r66,l4) a223(r68,l4) a224(r84,l4) a225(r85,l4) a226(r101,l4) a227(r115,l4) a228(r163,l4) a232(r229,l4) a233(r244,l4) a234(r257,l4) a235(r270,l4) a236(r280,l4) a237(r281,l4) a238(r282,l4) a239(r292,l4) a240(r498,l4) a241(r499,l4) a242(r500,l4)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a281(r500,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a282(r499,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a283(r498,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a284(r282,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a285(r163,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a286(r302,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a309(r87,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a287(r85,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a339(r301,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a288(r101,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a289(r115,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a286(r302,l0) a309(r87,l0) a298(r371,l0) a300(r349,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a474(r281,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a515(r382,l0) a514(r384,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a290(r380,l0) conflicts: a13(r502,l0) a14(r501,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a291(r378,l0) conflicts: a13(r502,l0) a14(r501,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a292(r149,l0) conflicts: a13(r502,l0) a14(r501,l0) a293(r379,l0) a294(r375,l0) a295(r373,l0) a297(r374,l0) a296(r372,l0) a299(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a293(r379,l0) conflicts: a13(r502,l0) a14(r501,l0) a292(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a294(r375,l0) conflicts: a13(r502,l0) a14(r501,l0) a292(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a295(r373,l0) conflicts: a13(r502,l0) a14(r501,l0) a292(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a296(r372,l0) conflicts: a13(r502,l0) a14(r501,l0) a292(r149,l0) a297(r374,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a297(r374,l0) conflicts: a13(r502,l0) a14(r501,l0) a292(r149,l0) a296(r372,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a298(r371,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a299(r148,l0) conflicts: a13(r502,l0) a14(r501,l0) a292(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a300(r349,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a301(r370,l0) a302(r369,l0) a304(r368,l0) a303(r350,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a301(r370,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a300(r349,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a302(r369,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a300(r349,l0) a303(r350,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a303(r350,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a302(r369,l0) a304(r368,l0) a305(r366,l0) a306(r365,l0) a307(r364,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a304(r368,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a300(r349,l0) a303(r350,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a305(r366,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a300(r349,l0) a303(r350,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a306(r365,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a300(r349,l0) a303(r350,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a307(r364,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a300(r349,l0) a303(r350,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a308(r139,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a309(r87,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a300(r349,l0) a303(r350,l0) a308(r139,l0) a310(r363,l0) a312(r362,l0) a311(r336,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0) a335(r315,l0) a336(r311,l0) a337(r307,l0) a338(r304,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a310(r363,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a311(r336,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a310(r363,l0) a312(r362,l0) a313(r360,l0) a314(r359,l0) a315(r358,l0) a316(r132,l0) a317(r357,l0) a319(r356,l0) a318(r319,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a312(r362,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a313(r360,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a314(r359,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a315(r358,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a316(r132,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a317(r357,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a318(r319,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0) a317(r357,l0) a319(r356,l0) a320(r354,l0) a321(r353,l0) a322(r352,l0) a323(r125,l0) a324(r351,l0) a325(r348,l0) a326(r346,l0) a327(r344,l0) a328(r342,l0) a329(r337,l0) a330(r332,l0) a331(r328,l0) a332(r325,l0) a333(r322,l0) a334(r320,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a319(r356,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a320(r354,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a321(r353,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a322(r352,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a323(r125,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a324(r351,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a300(r349,l0) a303(r350,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a325(r348,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a326(r346,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a327(r344,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a328(r342,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a329(r337,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a286(r302,l0) a309(r87,l0) a311(r336,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a330(r332,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a286(r302,l0) a309(r87,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a331(r328,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a286(r302,l0) a309(r87,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a332(r325,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a286(r302,l0) a309(r87,l0) a318(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a333(r322,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a286(r302,l0) a309(r87,l0) a318(r319,l0) a334(r320,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a334(r320,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a288(r101,l0) a286(r302,l0) a309(r87,l0) a318(r319,l0) a333(r322,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a335(r315,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a286(r302,l0) a309(r87,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a336(r311,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a286(r302,l0) a309(r87,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a337(r307,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a286(r302,l0) a309(r87,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a338(r304,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0) a286(r302,l0) a309(r87,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a339(r301,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a287(r85,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a340(r481,l1) conflicts: a39(r501,l1) a40(r502,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a341(r480,l1) conflicts: a39(r501,l1) a40(r502,l1) a342(r479,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a342(r479,l1) conflicts: a39(r501,l1) a40(r502,l1) a343(r291,l1) a341(r480,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a343(r291,l1) conflicts: a39(r501,l1) a40(r502,l1) a346(r475,l1) a344(r290,l1) a347(r478,l1) a348(r477,l1) a349(r476,l1) a342(r479,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a344(r290,l1) conflicts: a39(r501,l1) a40(r502,l1) a346(r475,l1) a343(r291,l1) a347(r478,l1) a348(r477,l1) a349(r476,l1) a350(r472,l1) a351(r471,l1) a352(r473,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a345(r152,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a357(r200,l1) a356(r197,l1) a402(r387,l1) a396(r394,l1) a398(r393,l1) a397(r392,l1) a399(r390,l1) a372(r417,l1) a373(r418,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a346(r475,l1) conflicts: a39(r501,l1) a40(r502,l1) a343(r291,l1) a344(r290,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a347(r478,l1) conflicts: a39(r501,l1) a40(r502,l1) a343(r291,l1) a344(r290,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a348(r477,l1) conflicts: a39(r501,l1) a40(r502,l1) a343(r291,l1) a344(r290,l1) a349(r476,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a349(r476,l1) conflicts: a39(r501,l1) a40(r502,l1) a343(r291,l1) a344(r290,l1) a348(r477,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a350(r472,l1) conflicts: a39(r501,l1) a40(r502,l1) a344(r290,l1) a351(r471,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a351(r471,l1) conflicts: a39(r501,l1) a40(r502,l1) a344(r290,l1) a350(r472,l1) a352(r473,l1) a353(r469,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a352(r473,l1) conflicts: a39(r501,l1) a40(r502,l1) a344(r290,l1) a351(r471,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a353(r469,l1) conflicts: a39(r501,l1) a40(r502,l1) a351(r471,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a354(r470,l1) conflicts: a39(r501,l1) a40(r502,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a355(r186,l1) conflicts: a39(r501,l1) a40(r502,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a356(r197,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a39(r501,l1) a40(r502,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a358(r209,l1) a359(r214,l1) a357(r200,l1) a345(r152,l1) a360(r467,l1) a361(r468,l1) a362(r465,l1) a363(r466,l1) a367(r422,l1) a368(r423,l1) a369(r420,l1) a370(r421,l1) a371(r419,l1) a372(r417,l1) a373(r418,l1) a374(r415,l1) a375(r208,l1) a376(r416,l1) a377(r414,l1) a378(r412,l1) a379(r413,l1) a380(r411,l1) a381(r199,l1) a382(r410,l1)
;;     total conflict hard regs: 0-2 4 5 21-28 37-40 45-51
;;     conflict hard regs: 0-2 4 5 21-28 37-40 45-51

;; a357(r200,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a39(r501,l1) a40(r502,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a358(r209,l1) a359(r214,l1) a356(r197,l1) a345(r152,l1) a360(r467,l1) a361(r468,l1) a362(r465,l1) a363(r466,l1) a367(r422,l1) a368(r423,l1) a369(r420,l1) a370(r421,l1) a371(r419,l1) a372(r417,l1) a373(r418,l1) a374(r415,l1) a375(r208,l1) a376(r416,l1) a377(r414,l1) a378(r412,l1) a379(r413,l1) a380(r411,l1) a381(r199,l1)
;;     total conflict hard regs: 0-2 4 5 21-28 37-40 45-51
;;     conflict hard regs: 0-2 4 5 21-28 37-40 45-51

;; a358(r209,l1) conflicts: a39(r501,l1) a40(r502,l1) a359(r214,l1) a365(r202,l1) a366(r424,l1) a357(r200,l1) a356(r197,l1) a360(r467,l1) a361(r468,l1) a362(r465,l1) a363(r466,l1) a367(r422,l1) a368(r423,l1) a369(r420,l1) a370(r421,l1) a371(r419,l1) a518(r220,l1) a519(r428,l1) a602(r430,l1) a593(r436,l1) a594(r437,l1) a579(r454,l1) a580(r507,l1) a599(r431,l1) a587(r445,l1) a588(r506,l1) a595(r434,l1) a596(r435,l1) a571(r463,l1) a572(r508,l1) a597(r432,l1) a598(r433,l1)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a359(r214,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a365(r202,l1) a366(r424,l1) a357(r200,l1) a356(r197,l1) a360(r467,l1) a361(r468,l1) a362(r465,l1) a363(r466,l1) a367(r422,l1) a368(r423,l1) a369(r420,l1) a370(r421,l1) a518(r220,l1) a519(r428,l1) a602(r430,l1) a593(r436,l1) a594(r437,l1) a579(r454,l1) a580(r507,l1) a599(r431,l1) a587(r445,l1) a588(r506,l1) a595(r434,l1) a596(r435,l1) a571(r463,l1) a572(r508,l1) a597(r432,l1) a598(r433,l1)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a360(r467,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a357(r200,l1) a356(r197,l1) a361(r468,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a361(r468,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a357(r200,l1) a356(r197,l1) a360(r467,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a362(r465,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a357(r200,l1) a356(r197,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a363(r466,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a357(r200,l1) a356(r197,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a364(r281,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a516(r280,l1) a517(r229,l1) a522(r427,l1) a520(r222,l1) a521(r223,l1) a523(r425,l1) a524(r426,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a365(r202,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a518(r220,l1) a519(r428,l1) a602(r430,l1) a593(r436,l1) a594(r437,l1) a579(r454,l1) a580(r507,l1) a599(r431,l1) a587(r445,l1) a588(r506,l1) a595(r434,l1) a596(r435,l1) a571(r463,l1) a572(r508,l1) a597(r432,l1) a598(r433,l1)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a366(r424,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a367(r422,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a357(r200,l1) a356(r197,l1) a368(r423,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a368(r423,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a357(r200,l1) a356(r197,l1) a367(r422,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a369(r420,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a357(r200,l1) a356(r197,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a370(r421,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a357(r200,l1) a356(r197,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a371(r419,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a357(r200,l1) a356(r197,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a372(r417,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a373(r418,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a373(r418,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a372(r417,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a374(r415,l1) conflicts: a39(r501,l1) a40(r502,l1) a357(r200,l1) a356(r197,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a375(r208,l1) conflicts: a39(r501,l1) a40(r502,l1) a357(r200,l1) a356(r197,l1) a376(r416,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a376(r416,l1) conflicts: a39(r501,l1) a40(r502,l1) a357(r200,l1) a356(r197,l1) a375(r208,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a377(r414,l1) conflicts: a39(r501,l1) a40(r502,l1) a357(r200,l1) a356(r197,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a378(r412,l1) conflicts: a39(r501,l1) a40(r502,l1) a357(r200,l1) a356(r197,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a379(r413,l1) conflicts: a39(r501,l1) a40(r502,l1) a357(r200,l1) a356(r197,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a380(r411,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a381(r199,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a381(r199,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a357(r200,l1) a356(r197,l1) a345(r152,l1) a380(r411,l1) a382(r410,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a382(r410,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a356(r197,l1) a345(r152,l1) a381(r199,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a383(r179,l1) conflicts: a39(r501,l1) a40(r502,l1) a388(r166,l1) a384(r408,l1) a385(r406,l1) a386(r404,l1) a387(r407,l1)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a384(r408,l1) conflicts: a39(r501,l1) a40(r502,l1) a383(r179,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a385(r406,l1) conflicts: a39(r501,l1) a40(r502,l1) a383(r179,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a386(r404,l1) conflicts: a39(r501,l1) a40(r502,l1) a383(r179,l1) a387(r407,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a387(r407,l1) conflicts: a39(r501,l1) a40(r502,l1) a383(r179,l1) a386(r404,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a388(r166,l1) conflicts: a39(r501,l1) a40(r502,l1) a400(r164,l1) a403(r385,l1) a401(r389,l1) a395(r395,l1) a394(r397,l1) a392(r175,l1) a391(r398,l1) a393(r399,l1) a383(r179,l1) a389(r400,l1) a390(r401,l1)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a389(r400,l1) conflicts: a39(r501,l1) a40(r502,l1) a388(r166,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a390(r401,l1) conflicts: a39(r501,l1) a40(r502,l1) a388(r166,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a391(r398,l1) conflicts: a39(r501,l1) a40(r502,l1) a388(r166,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a392(r175,l1) conflicts: a39(r501,l1) a40(r502,l1) a388(r166,l1) a394(r397,l1) a393(r399,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a393(r399,l1) conflicts: a39(r501,l1) a40(r502,l1) a388(r166,l1) a392(r175,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a394(r397,l1) conflicts: a39(r501,l1) a40(r502,l1) a388(r166,l1) a392(r175,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a395(r395,l1) conflicts: a39(r501,l1) a40(r502,l1) a388(r166,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a396(r394,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a345(r152,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a397(r392,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a345(r152,l1) a398(r393,l1) a399(r390,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a398(r393,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a345(r152,l1) a397(r392,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a399(r390,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a345(r152,l1) a397(r392,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a400(r164,l1) conflicts: a39(r501,l1) a40(r502,l1) a388(r166,l1) a403(r385,l1) a401(r389,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a401(r389,l1) conflicts: a39(r501,l1) a40(r502,l1) a400(r164,l1) a388(r166,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a402(r387,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a345(r152,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a403(r385,l1) conflicts: a39(r501,l1) a40(r502,l1) a400(r164,l1) a388(r166,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a404(r384,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a405(r382,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a406(r280,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a407(r229,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2) a535(r454,l2) a533(r452,l2) a534(r261,l2) a537(r451,l2) a538(r449,l2) a539(r448,l2) a540(r447,l2) a543(r445,l2) a541(r443,l2) a542(r274,l2) a545(r442,l2) a546(r440,l2) a547(r439,l2) a548(r438,l2) a527(r463,l2) a525(r461,l2) a526(r247,l2) a529(r460,l2) a530(r458,l2) a531(r457,l2) a532(r456,l2)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a407(r229,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2) a556(r231,l2) a557(r232,l2) a559(r429,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a408(r220,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2) a409(r428,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a409(r428,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2) a408(r220,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a410(r222,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a412(r427,l2) a411(r223,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a411(r223,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a412(r427,l2) a410(r222,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a412(r427,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a410(r222,l2) a411(r223,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a413(r425,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a414(r426,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a414(r426,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a413(r425,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a415(r461,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a417(r463,l3) a416(r247,l3)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a416(r247,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a417(r463,l3) a415(r461,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a417(r463,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a196(r202,l3) a197(r209,l3) a198(r214,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a208(r501,l3) a209(r502,l3) a211(r280,l3) a415(r461,l3) a416(r247,l3)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a418(r508,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a419(r460,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a420(r458,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a421(r457,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a422(r456,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a423(r452,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a425(r454,l3) a424(r261,l3)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a424(r261,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a425(r454,l3) a423(r452,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a425(r454,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a196(r202,l3) a197(r209,l3) a198(r214,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a208(r501,l3) a209(r502,l3) a211(r280,l3) a423(r452,l3) a424(r261,l3)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a426(r507,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a427(r451,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a428(r449,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a429(r448,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a430(r447,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a431(r443,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a433(r445,l3) a432(r274,l3)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a432(r274,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a433(r445,l3) a431(r443,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a433(r445,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a196(r202,l3) a197(r209,l3) a198(r214,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a208(r501,l3) a209(r502,l3) a211(r280,l3) a431(r443,l3) a432(r274,l3)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a434(r506,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a435(r442,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a436(r440,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a437(r439,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a438(r438,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a439(r436,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3) a440(r437,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a440(r437,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3) a439(r436,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a441(r434,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3) a442(r435,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a442(r435,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3) a441(r434,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a443(r432,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3) a444(r433,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a444(r433,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3) a443(r432,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a445(r431,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a446(r231,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a447(r232,l3) a449(r429,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a447(r232,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a446(r231,l3) a449(r429,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a448(r430,l3) conflicts: a196(r202,l3) a197(r209,l3) a198(r214,l3) a208(r501,l3) a209(r502,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a449(r429,l3) conflicts: a187(r63,l3) a188(r64,l3) a189(r66,l3) a190(r68,l3) a191(r84,l3) a192(r85,l3) a193(r101,l3) a194(r115,l3) a195(r163,l3) a199(r244,l3) a200(r257,l3) a201(r270,l3) a202(r281,l3) a203(r282,l3) a204(r292,l3) a205(r498,l3) a206(r499,l3) a207(r500,l3) a211(r280,l3) a212(r229,l3) a446(r231,l3) a447(r232,l3)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a450(r481,l0) conflicts: a13(r502,l0) a14(r501,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a451(r480,l0) conflicts: a13(r502,l0) a14(r501,l0) a452(r479,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a452(r479,l0) conflicts: a13(r502,l0) a14(r501,l0) a453(r291,l0) a451(r480,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a453(r291,l0) conflicts: a13(r502,l0) a14(r501,l0) a456(r475,l0) a454(r290,l0) a457(r478,l0) a458(r477,l0) a459(r476,l0) a452(r479,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a454(r290,l0) conflicts: a13(r502,l0) a14(r501,l0) a456(r475,l0) a453(r291,l0) a457(r478,l0) a458(r477,l0) a459(r476,l0) a460(r472,l0) a461(r471,l0) a462(r473,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a455(r152,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a467(r200,l0) a466(r197,l0) a512(r387,l0) a506(r394,l0) a508(r393,l0) a507(r392,l0) a509(r390,l0) a482(r417,l0) a483(r418,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a456(r475,l0) conflicts: a13(r502,l0) a14(r501,l0) a453(r291,l0) a454(r290,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a457(r478,l0) conflicts: a13(r502,l0) a14(r501,l0) a453(r291,l0) a454(r290,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a458(r477,l0) conflicts: a13(r502,l0) a14(r501,l0) a453(r291,l0) a454(r290,l0) a459(r476,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a459(r476,l0) conflicts: a13(r502,l0) a14(r501,l0) a453(r291,l0) a454(r290,l0) a458(r477,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a460(r472,l0) conflicts: a13(r502,l0) a14(r501,l0) a454(r290,l0) a461(r471,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a461(r471,l0) conflicts: a13(r502,l0) a14(r501,l0) a454(r290,l0) a460(r472,l0) a462(r473,l0) a463(r469,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a462(r473,l0) conflicts: a13(r502,l0) a14(r501,l0) a454(r290,l0) a461(r471,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a463(r469,l0) conflicts: a13(r502,l0) a14(r501,l0) a461(r471,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a464(r470,l0) conflicts: a13(r502,l0) a14(r501,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a465(r186,l0) conflicts: a13(r502,l0) a14(r501,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a466(r197,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a13(r502,l0) a14(r501,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a468(r209,l0) a469(r214,l0) a467(r200,l0) a455(r152,l0) a470(r467,l0) a471(r468,l0) a472(r465,l0) a473(r466,l0) a477(r422,l0) a478(r423,l0) a479(r420,l0) a480(r421,l0) a481(r419,l0) a482(r417,l0) a483(r418,l0) a484(r415,l0) a485(r208,l0) a486(r416,l0) a487(r414,l0) a488(r412,l0) a489(r413,l0) a490(r411,l0) a491(r199,l0) a492(r410,l0)
;;     total conflict hard regs: 0-2 4 5 21-28 37-40 45-51
;;     conflict hard regs: 0-2 4 5 21-28 37-40 45-51

;; a467(r200,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a13(r502,l0) a14(r501,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a468(r209,l0) a469(r214,l0) a466(r197,l0) a455(r152,l0) a470(r467,l0) a471(r468,l0) a472(r465,l0) a473(r466,l0) a477(r422,l0) a478(r423,l0) a479(r420,l0) a480(r421,l0) a481(r419,l0) a482(r417,l0) a483(r418,l0) a484(r415,l0) a485(r208,l0) a486(r416,l0) a487(r414,l0) a488(r412,l0) a489(r413,l0) a490(r411,l0) a491(r199,l0)
;;     total conflict hard regs: 0-2 4 5 21-28 37-40 45-51
;;     conflict hard regs: 0-2 4 5 21-28 37-40 45-51

;; a468(r209,l0) conflicts: a13(r502,l0) a14(r501,l0) a469(r214,l0) a475(r202,l0) a476(r424,l0) a467(r200,l0) a466(r197,l0) a470(r467,l0) a471(r468,l0) a472(r465,l0) a473(r466,l0) a477(r422,l0) a478(r423,l0) a479(r420,l0) a480(r421,l0) a481(r419,l0) a562(r220,l0) a563(r428,l0) a637(r430,l0) a628(r436,l0) a629(r437,l0) a614(r454,l0) a615(r507,l0) a634(r431,l0) a622(r445,l0) a623(r506,l0) a630(r434,l0) a631(r435,l0) a606(r463,l0) a607(r508,l0) a632(r432,l0) a633(r433,l0)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a469(r214,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a475(r202,l0) a476(r424,l0) a467(r200,l0) a466(r197,l0) a470(r467,l0) a471(r468,l0) a472(r465,l0) a473(r466,l0) a477(r422,l0) a478(r423,l0) a479(r420,l0) a480(r421,l0) a562(r220,l0) a563(r428,l0) a637(r430,l0) a628(r436,l0) a629(r437,l0) a614(r454,l0) a615(r507,l0) a634(r431,l0) a622(r445,l0) a623(r506,l0) a630(r434,l0) a631(r435,l0) a606(r463,l0) a607(r508,l0) a632(r432,l0) a633(r433,l0)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a470(r467,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a467(r200,l0) a466(r197,l0) a471(r468,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a471(r468,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a467(r200,l0) a466(r197,l0) a470(r467,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a472(r465,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a467(r200,l0) a466(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a473(r466,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a467(r200,l0) a466(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a474(r281,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a560(r280,l0) a561(r229,l0) a566(r427,l0) a564(r222,l0) a565(r223,l0) a567(r425,l0) a568(r426,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a475(r202,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a562(r220,l0) a563(r428,l0) a637(r430,l0) a628(r436,l0) a629(r437,l0) a614(r454,l0) a615(r507,l0) a634(r431,l0) a622(r445,l0) a623(r506,l0) a630(r434,l0) a631(r435,l0) a606(r463,l0) a607(r508,l0) a632(r432,l0) a633(r433,l0)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a476(r424,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a477(r422,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a467(r200,l0) a466(r197,l0) a478(r423,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a478(r423,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a467(r200,l0) a466(r197,l0) a477(r422,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a479(r420,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a467(r200,l0) a466(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a480(r421,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a467(r200,l0) a466(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a481(r419,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a467(r200,l0) a466(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a482(r417,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a483(r418,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a483(r418,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a482(r417,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a484(r415,l0) conflicts: a13(r502,l0) a14(r501,l0) a467(r200,l0) a466(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a485(r208,l0) conflicts: a13(r502,l0) a14(r501,l0) a467(r200,l0) a466(r197,l0) a486(r416,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a486(r416,l0) conflicts: a13(r502,l0) a14(r501,l0) a467(r200,l0) a466(r197,l0) a485(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a487(r414,l0) conflicts: a13(r502,l0) a14(r501,l0) a467(r200,l0) a466(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a488(r412,l0) conflicts: a13(r502,l0) a14(r501,l0) a467(r200,l0) a466(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a489(r413,l0) conflicts: a13(r502,l0) a14(r501,l0) a467(r200,l0) a466(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a490(r411,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a491(r199,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a491(r199,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a467(r200,l0) a466(r197,l0) a455(r152,l0) a490(r411,l0) a492(r410,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a492(r410,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a466(r197,l0) a455(r152,l0) a491(r199,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a493(r179,l0) conflicts: a13(r502,l0) a14(r501,l0) a498(r166,l0) a494(r408,l0) a495(r406,l0) a496(r404,l0) a497(r407,l0)
;;     total conflict hard regs: 21-28 45-51
;;     conflict hard regs: 21-28 45-51

;; a494(r408,l0) conflicts: a13(r502,l0) a14(r501,l0) a493(r179,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a495(r406,l0) conflicts: a13(r502,l0) a14(r501,l0) a493(r179,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a496(r404,l0) conflicts: a13(r502,l0) a14(r501,l0) a493(r179,l0) a497(r407,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a497(r407,l0) conflicts: a13(r502,l0) a14(r501,l0) a493(r179,l0) a496(r404,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a498(r166,l0) conflicts: a13(r502,l0) a14(r501,l0) a510(r164,l0) a513(r385,l0) a511(r389,l0) a505(r395,l0) a504(r397,l0) a502(r175,l0) a501(r398,l0) a503(r399,l0) a493(r179,l0) a499(r400,l0) a500(r401,l0)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a499(r400,l0) conflicts: a13(r502,l0) a14(r501,l0) a498(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a500(r401,l0) conflicts: a13(r502,l0) a14(r501,l0) a498(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a501(r398,l0) conflicts: a13(r502,l0) a14(r501,l0) a498(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a502(r175,l0) conflicts: a13(r502,l0) a14(r501,l0) a498(r166,l0) a504(r397,l0) a503(r399,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a503(r399,l0) conflicts: a13(r502,l0) a14(r501,l0) a498(r166,l0) a502(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a504(r397,l0) conflicts: a13(r502,l0) a14(r501,l0) a498(r166,l0) a502(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a505(r395,l0) conflicts: a13(r502,l0) a14(r501,l0) a498(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a506(r394,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a455(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a507(r392,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a455(r152,l0) a508(r393,l0) a509(r390,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a508(r393,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a455(r152,l0) a507(r392,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a509(r390,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a455(r152,l0) a507(r392,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a510(r164,l0) conflicts: a13(r502,l0) a14(r501,l0) a498(r166,l0) a513(r385,l0) a511(r389,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a511(r389,l0) conflicts: a13(r502,l0) a14(r501,l0) a510(r164,l0) a498(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a512(r387,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a455(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a513(r385,l0) conflicts: a13(r502,l0) a14(r501,l0) a510(r164,l0) a498(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a514(r384,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a515(r382,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a516(r280,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a517(r229,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1) a579(r454,l1) a577(r452,l1) a578(r261,l1) a581(r451,l1) a582(r449,l1) a583(r448,l1) a584(r447,l1) a587(r445,l1) a585(r443,l1) a586(r274,l1) a589(r442,l1) a590(r440,l1) a591(r439,l1) a592(r438,l1) a571(r463,l1) a569(r461,l1) a570(r247,l1) a573(r460,l1) a574(r458,l1) a575(r457,l1) a576(r456,l1)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a517(r229,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1) a600(r231,l1) a601(r232,l1) a603(r429,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a518(r220,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1) a519(r428,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a519(r428,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1) a518(r220,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a520(r222,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a522(r427,l1) a521(r223,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a521(r223,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a522(r427,l1) a520(r222,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a522(r427,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a520(r222,l1) a521(r223,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a523(r425,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a524(r426,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a524(r426,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a523(r425,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a525(r461,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2) a527(r463,l2) a526(r247,l2)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a526(r247,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2) a527(r463,l2) a525(r461,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a527(r463,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a145(r281,l2) a146(r202,l2) a406(r280,l2) a525(r461,l2) a526(r247,l2)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a528(r508,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a529(r460,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a530(r458,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a531(r457,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a532(r456,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a533(r452,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2) a535(r454,l2) a534(r261,l2)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a534(r261,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2) a535(r454,l2) a533(r452,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a535(r454,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a145(r281,l2) a146(r202,l2) a406(r280,l2) a533(r452,l2) a534(r261,l2)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a536(r507,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a537(r451,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a538(r449,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a539(r448,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a540(r447,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a541(r443,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2) a543(r445,l2) a542(r274,l2)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a542(r274,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2) a543(r445,l2) a541(r443,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a543(r445,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a145(r281,l2) a146(r202,l2) a406(r280,l2) a541(r443,l2) a542(r274,l2)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a544(r506,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a545(r442,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a546(r440,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a547(r439,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a548(r438,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a549(r436,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2) a550(r437,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a550(r437,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2) a549(r436,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a551(r434,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2) a552(r435,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a552(r435,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2) a551(r434,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a553(r432,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2) a554(r433,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a554(r433,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2) a553(r432,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a555(r431,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a556(r231,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2) a407(r229,l2) a557(r232,l2) a559(r429,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a557(r232,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2) a407(r229,l2) a556(r231,l2) a559(r429,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a558(r430,l2) conflicts: a118(r501,l2) a119(r502,l2) a139(r209,l2) a140(r214,l2) a146(r202,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a559(r429,l2) conflicts: a101(r63,l2) a102(r64,l2) a103(r66,l2) a104(r68,l2) a105(r84,l2) a106(r85,l2) a107(r101,l2) a108(r115,l2) a109(r163,l2) a110(r244,l2) a111(r257,l2) a112(r270,l2) a113(r282,l2) a114(r292,l2) a115(r498,l2) a116(r499,l2) a117(r500,l2) a145(r281,l2) a406(r280,l2) a407(r229,l2) a556(r231,l2) a557(r232,l2)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a560(r280,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a561(r229,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0) a614(r454,l0) a612(r452,l0) a613(r261,l0) a616(r451,l0) a617(r449,l0) a618(r448,l0) a619(r447,l0) a622(r445,l0) a620(r443,l0) a621(r274,l0) a624(r442,l0) a625(r440,l0) a626(r439,l0) a627(r438,l0) a606(r463,l0) a604(r461,l0) a605(r247,l0) a608(r460,l0) a609(r458,l0) a610(r457,l0) a611(r456,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a561(r229,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0) a635(r231,l0) a636(r232,l0) a638(r429,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a562(r220,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0) a563(r428,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a563(r428,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0) a562(r220,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a564(r222,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a566(r427,l0) a565(r223,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a565(r223,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a566(r427,l0) a564(r222,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a566(r427,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a564(r222,l0) a565(r223,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a567(r425,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a568(r426,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a568(r426,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a567(r425,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a569(r461,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1) a571(r463,l1) a570(r247,l1)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a570(r247,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1) a571(r463,l1) a569(r461,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a571(r463,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a39(r501,l1) a40(r502,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a358(r209,l1) a359(r214,l1) a364(r281,l1) a365(r202,l1) a516(r280,l1) a569(r461,l1) a570(r247,l1)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a572(r508,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a573(r460,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a574(r458,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a575(r457,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a576(r456,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a577(r452,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1) a579(r454,l1) a578(r261,l1)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a578(r261,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1) a579(r454,l1) a577(r452,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a579(r454,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a39(r501,l1) a40(r502,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a358(r209,l1) a359(r214,l1) a364(r281,l1) a365(r202,l1) a516(r280,l1) a577(r452,l1) a578(r261,l1)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a580(r507,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a581(r451,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a582(r449,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a583(r448,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a584(r447,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a585(r443,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1) a587(r445,l1) a586(r274,l1)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a586(r274,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1) a587(r445,l1) a585(r443,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a587(r445,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a39(r501,l1) a40(r502,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a358(r209,l1) a359(r214,l1) a364(r281,l1) a365(r202,l1) a516(r280,l1) a585(r443,l1) a586(r274,l1)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a588(r506,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a589(r442,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a590(r440,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a591(r439,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a592(r438,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a593(r436,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1) a594(r437,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a594(r437,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1) a593(r436,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a595(r434,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1) a596(r435,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a596(r435,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1) a595(r434,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a597(r432,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1) a598(r433,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a598(r433,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1) a597(r432,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a599(r431,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a600(r231,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1) a517(r229,l1) a601(r232,l1) a603(r429,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a601(r232,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1) a517(r229,l1) a600(r231,l1) a603(r429,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a602(r430,l1) conflicts: a39(r501,l1) a40(r502,l1) a358(r209,l1) a359(r214,l1) a365(r202,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a603(r429,l1) conflicts: a30(r63,l1) a31(r64,l1) a32(r66,l1) a33(r68,l1) a34(r84,l1) a35(r244,l1) a36(r257,l1) a37(r270,l1) a38(r292,l1) a42(r500,l1) a43(r499,l1) a44(r498,l1) a45(r282,l1) a46(r163,l1) a48(r85,l1) a49(r101,l1) a50(r115,l1) a364(r281,l1) a516(r280,l1) a517(r229,l1) a600(r231,l1) a601(r232,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a604(r461,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0) a606(r463,l0) a605(r247,l0)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a605(r247,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0) a606(r463,l0) a604(r461,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a606(r463,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a13(r502,l0) a14(r501,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a468(r209,l0) a469(r214,l0) a474(r281,l0) a475(r202,l0) a560(r280,l0) a604(r461,l0) a605(r247,l0)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a607(r508,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a608(r460,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a609(r458,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a610(r457,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a611(r456,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a612(r452,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0) a614(r454,l0) a613(r261,l0)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a613(r261,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0) a614(r454,l0) a612(r452,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a614(r454,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a13(r502,l0) a14(r501,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a468(r209,l0) a469(r214,l0) a474(r281,l0) a475(r202,l0) a560(r280,l0) a612(r452,l0) a613(r261,l0)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a615(r507,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a616(r451,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a617(r449,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a618(r448,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a619(r447,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a620(r443,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0) a622(r445,l0) a621(r274,l0)
;;     total conflict hard regs: 5
;;     conflict hard regs: 5

;; a621(r274,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0) a622(r445,l0) a620(r443,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a622(r445,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a13(r502,l0) a14(r501,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a468(r209,l0) a469(r214,l0) a474(r281,l0) a475(r202,l0) a560(r280,l0) a620(r443,l0) a621(r274,l0)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a623(r506,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0)
;;     total conflict hard regs: 22
;;     conflict hard regs: 22

;; a624(r442,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a625(r440,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a626(r439,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a627(r438,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a628(r436,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0) a629(r437,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a629(r437,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0) a628(r436,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a630(r434,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0) a631(r435,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a631(r435,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0) a630(r434,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a632(r432,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0) a633(r433,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a633(r433,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0) a632(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a634(r431,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a635(r231,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0) a561(r229,l0) a636(r232,l0) a638(r429,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a636(r232,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0) a561(r229,l0) a635(r231,l0) a638(r429,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a637(r430,l0) conflicts: a13(r502,l0) a14(r501,l0) a468(r209,l0) a469(r214,l0) a475(r202,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a638(r429,l0) conflicts: a3(r64,l0) a5(r66,l0) a7(r68,l0) a11(r292,l0) a15(r270,l0) a16(r257,l0) a17(r244,l0) a18(r84,l0) a20(r63,l0) a281(r500,l0) a282(r499,l0) a283(r498,l0) a284(r282,l0) a285(r163,l0) a287(r85,l0) a288(r101,l0) a289(r115,l0) a474(r281,l0) a560(r280,l0) a561(r229,l0) a635(r231,l0) a636(r232,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a20(r63)<->a21(r82)@1:shuffle
  cp1:a9(r71)<->a18(r84)@1:shuffle
  cp2:a18(r84)<->a19(r83)@1:shuffle
  cp3:a6(r67)<->a17(r244)@8:constraint
  cp4:a4(r65)<->a16(r257)@8:constraint
  cp5:a8(r69)<->a15(r270)@8:constraint
  cp6:a10(r79)<->a22(r299)@1:shuffle
  cp7:a21(r82)<->a22(r299)@1:shuffle
  cp8:a0(r62)<->a21(r82)@1:shuffle
  cp9:a1(r61)<->a19(r83)@1:shuffle
  cp10:a24(r77)<->a29(r76)@1:shuffle
  cp11:a10(r79)<->a28(r78)@1:shuffle
  cp12:a26(r293)<->a27(r294)@1:shuffle
  cp13:a25(r80)<->a26(r293)@14:constraint
  cp14:a2(r295)<->a25(r80)@14:constraint
  cp15:a23(r296)<->a25(r80)@1:shuffle
  cp16:a46(r163)<->a47(r302)@81:move
  cp17:a52(r378)<->a54(r379)@180:constraint
  cp18:a51(r380)<->a52(r378)@22:shuffle
  cp19:a57(r372)<->a60(r148)@45:shuffle
  cp20:a56(r373)<->a58(r374)@360:constraint
  cp21:a55(r375)<->a56(r373)@45:shuffle
  cp22:a98(r307)<->a99(r304)@55:shuffle
  cp23:a96(r315)<->a97(r311)@55:shuffle
  cp24:a93(r325)<->a95(r320)@55:shuffle
  cp25:a93(r325)<->a94(r322)@55:shuffle
  cp26:a91(r332)<->a92(r328)@55:shuffle
  cp27:a88(r344)<->a89(r342)@444:constraint
  cp28:a87(r346)<->a88(r344)@55:shuffle
  cp29:a61(r349)<->a86(r348)@444:constraint
  cp30:a123(r479)<->a125(r290)@2:constraint
  cp31:a122(r480)<->a124(r291)@2:constraint
  cp32:a121(r481)<->a123(r479)@1:constraint
  cp33:a121(r481)<->a122(r480)@1:constraint
  cp34:a134(r469)<->a135(r470)@1:constraint
  cp35:a125(r290)<->a134(r469)@1:shuffle
  cp36:a131(r472)<->a133(r473)@1:constraint
  cp37:a124(r291)<->a131(r472)@1:shuffle
  cp38:a124(r291)<->a132(r471)@1:shuffle
  cp39:a128(r478)<->a130(r476)@1:constraint
  cp40:a128(r478)<->a129(r477)@1:constraint
  cp41:a127(r475)<->a128(r478)@1:shuffle
  cp42:a143(r465)<->a144(r466)@1:shuffle
  cp43:a141(r467)<->a143(r465)@1:shuffle
  cp44:a137(r197)<->a147(r424)@1:constraint
  cp45:a146(r202)<->a147(r424)@1:shuffle
  cp46:a159(r412)<->a160(r413)@3:constraint
  cp47:a158(r414)<->a159(r412)@1:shuffle
  cp48:a155(r415)<->a156(r208)@1:shuffle
  cp49:a155(r415)<->a157(r416)@1:shuffle
  cp50:a139(r209)<->a155(r415)@1:shuffle
  cp51:a140(r214)<->a152(r419)@3:constraint
  cp52:a150(r420)<->a151(r421)@1:shuffle
  cp53:a148(r422)<->a150(r420)@1:shuffle
  cp54:a170(r400)<->a171(r401)@1:shuffle
  cp55:a164(r179)<->a170(r400)@1:shuffle
  cp56:a166(r406)<->a168(r407)@7:constraint
  cp57:a165(r408)<->a166(r406)@7:constraint
  cp58:a172(r398)<->a174(r399)@25:constraint
  cp59:a179(r393)<->a180(r390)@102:constraint
  cp60:a177(r394)<->a179(r393)@102:constraint
  cp61:a176(r395)<->a177(r394)@12:shuffle
  cp62:a183(r387)<->a184(r385)@102:shuffle
  cp63:a232(r229)<->a253(r456)@1:shuffle
  cp64:a252(r457)<->a253(r456)@1:shuffle
  cp65:a251(r458)<->a252(r457)@1:shuffle
  cp66:a250(r460)<->a251(r458)@1:shuffle
  cp67:a248(r463)<->a249(r508)@1:move
  cp68:a260(r448)<->a261(r447)@1:shuffle
  cp69:a259(r449)<->a260(r448)@1:shuffle
  cp70:a258(r451)<->a259(r449)@1:shuffle
  cp71:a256(r454)<->a257(r507)@1:move
  cp72:a268(r439)<->a269(r438)@1:shuffle
  cp73:a267(r440)<->a268(r439)@1:shuffle
  cp74:a266(r442)<->a267(r440)@1:shuffle
  cp75:a264(r445)<->a265(r506)@3:move
  cp76:a285(r163)<->a286(r302)@81:move
  cp77:a291(r378)<->a293(r379)@180:constraint
  cp78:a290(r380)<->a291(r378)@22:shuffle
  cp79:a296(r372)<->a299(r148)@45:shuffle
  cp80:a295(r373)<->a297(r374)@360:constraint
  cp81:a294(r375)<->a295(r373)@45:shuffle
  cp82:a337(r307)<->a338(r304)@55:shuffle
  cp83:a335(r315)<->a336(r311)@55:shuffle
  cp84:a332(r325)<->a334(r320)@55:shuffle
  cp85:a332(r325)<->a333(r322)@55:shuffle
  cp86:a330(r332)<->a331(r328)@55:shuffle
  cp87:a327(r344)<->a328(r342)@444:constraint
  cp88:a326(r346)<->a327(r344)@55:shuffle
  cp89:a300(r349)<->a325(r348)@444:constraint
  cp90:a342(r479)<->a344(r290)@2:constraint
  cp91:a341(r480)<->a343(r291)@2:constraint
  cp92:a340(r481)<->a342(r479)@1:constraint
  cp93:a340(r481)<->a341(r480)@1:constraint
  cp94:a353(r469)<->a354(r470)@1:constraint
  cp95:a344(r290)<->a353(r469)@1:shuffle
  cp96:a350(r472)<->a352(r473)@1:constraint
  cp97:a343(r291)<->a350(r472)@1:shuffle
  cp98:a343(r291)<->a351(r471)@1:shuffle
  cp99:a347(r478)<->a349(r476)@1:constraint
  cp100:a347(r478)<->a348(r477)@1:constraint
  cp101:a346(r475)<->a347(r478)@1:shuffle
  cp102:a362(r465)<->a363(r466)@1:shuffle
  cp103:a360(r467)<->a362(r465)@1:shuffle
  cp104:a356(r197)<->a366(r424)@1:constraint
  cp105:a365(r202)<->a366(r424)@1:shuffle
  cp106:a378(r412)<->a379(r413)@3:constraint
  cp107:a377(r414)<->a378(r412)@1:shuffle
  cp108:a374(r415)<->a375(r208)@1:shuffle
  cp109:a374(r415)<->a376(r416)@1:shuffle
  cp110:a358(r209)<->a374(r415)@1:shuffle
  cp111:a359(r214)<->a371(r419)@3:constraint
  cp112:a369(r420)<->a370(r421)@1:shuffle
  cp113:a367(r422)<->a369(r420)@1:shuffle
  cp114:a389(r400)<->a390(r401)@1:shuffle
  cp115:a383(r179)<->a389(r400)@1:shuffle
  cp116:a385(r406)<->a387(r407)@7:constraint
  cp117:a384(r408)<->a385(r406)@7:constraint
  cp118:a391(r398)<->a393(r399)@25:constraint
  cp119:a398(r393)<->a399(r390)@102:constraint
  cp120:a396(r394)<->a398(r393)@102:constraint
  cp121:a395(r395)<->a396(r394)@12:shuffle
  cp122:a402(r387)<->a403(r385)@102:shuffle
  cp123:a212(r229)<->a422(r456)@1:shuffle
  cp124:a421(r457)<->a422(r456)@1:shuffle
  cp125:a420(r458)<->a421(r457)@1:shuffle
  cp126:a419(r460)<->a420(r458)@1:shuffle
  cp127:a417(r463)<->a418(r508)@1:move
  cp128:a429(r448)<->a430(r447)@1:shuffle
  cp129:a428(r449)<->a429(r448)@1:shuffle
  cp130:a427(r451)<->a428(r449)@1:shuffle
  cp131:a425(r454)<->a426(r507)@1:move
  cp132:a437(r439)<->a438(r438)@1:shuffle
  cp133:a436(r440)<->a437(r439)@1:shuffle
  cp134:a435(r442)<->a436(r440)@1:shuffle
  cp135:a433(r445)<->a434(r506)@3:move
  cp136:a452(r479)<->a454(r290)@2:constraint
  cp137:a451(r480)<->a453(r291)@2:constraint
  cp138:a450(r481)<->a452(r479)@1:constraint
  cp139:a450(r481)<->a451(r480)@1:constraint
  cp140:a463(r469)<->a464(r470)@1:constraint
  cp141:a454(r290)<->a463(r469)@1:shuffle
  cp142:a460(r472)<->a462(r473)@1:constraint
  cp143:a453(r291)<->a460(r472)@1:shuffle
  cp144:a453(r291)<->a461(r471)@1:shuffle
  cp145:a457(r478)<->a459(r476)@1:constraint
  cp146:a457(r478)<->a458(r477)@1:constraint
  cp147:a456(r475)<->a457(r478)@1:shuffle
  cp148:a472(r465)<->a473(r466)@1:shuffle
  cp149:a470(r467)<->a472(r465)@1:shuffle
  cp150:a466(r197)<->a476(r424)@1:constraint
  cp151:a475(r202)<->a476(r424)@1:shuffle
  cp152:a488(r412)<->a489(r413)@3:constraint
  cp153:a487(r414)<->a488(r412)@1:shuffle
  cp154:a484(r415)<->a485(r208)@1:shuffle
  cp155:a484(r415)<->a486(r416)@1:shuffle
  cp156:a468(r209)<->a484(r415)@1:shuffle
  cp157:a469(r214)<->a481(r419)@3:constraint
  cp158:a479(r420)<->a480(r421)@1:shuffle
  cp159:a477(r422)<->a479(r420)@1:shuffle
  cp160:a499(r400)<->a500(r401)@1:shuffle
  cp161:a493(r179)<->a499(r400)@1:shuffle
  cp162:a495(r406)<->a497(r407)@7:constraint
  cp163:a494(r408)<->a495(r406)@7:constraint
  cp164:a501(r398)<->a503(r399)@25:constraint
  cp165:a508(r393)<->a509(r390)@102:constraint
  cp166:a506(r394)<->a508(r393)@102:constraint
  cp167:a505(r395)<->a506(r394)@12:shuffle
  cp168:a512(r387)<->a513(r385)@102:shuffle
  cp169:a407(r229)<->a532(r456)@1:shuffle
  cp170:a531(r457)<->a532(r456)@1:shuffle
  cp171:a530(r458)<->a531(r457)@1:shuffle
  cp172:a529(r460)<->a530(r458)@1:shuffle
  cp173:a527(r463)<->a528(r508)@1:move
  cp174:a539(r448)<->a540(r447)@1:shuffle
  cp175:a538(r449)<->a539(r448)@1:shuffle
  cp176:a537(r451)<->a538(r449)@1:shuffle
  cp177:a535(r454)<->a536(r507)@1:move
  cp178:a547(r439)<->a548(r438)@1:shuffle
  cp179:a546(r440)<->a547(r439)@1:shuffle
  cp180:a545(r442)<->a546(r440)@1:shuffle
  cp181:a543(r445)<->a544(r506)@3:move
  cp182:a517(r229)<->a576(r456)@1:shuffle
  cp183:a575(r457)<->a576(r456)@1:shuffle
  cp184:a574(r458)<->a575(r457)@1:shuffle
  cp185:a573(r460)<->a574(r458)@1:shuffle
  cp186:a571(r463)<->a572(r508)@1:move
  cp187:a583(r448)<->a584(r447)@1:shuffle
  cp188:a582(r449)<->a583(r448)@1:shuffle
  cp189:a581(r451)<->a582(r449)@1:shuffle
  cp190:a579(r454)<->a580(r507)@1:move
  cp191:a591(r439)<->a592(r438)@1:shuffle
  cp192:a590(r440)<->a591(r439)@1:shuffle
  cp193:a589(r442)<->a590(r440)@1:shuffle
  cp194:a587(r445)<->a588(r506)@3:move
  cp195:a561(r229)<->a611(r456)@1:shuffle
  cp196:a610(r457)<->a611(r456)@1:shuffle
  cp197:a609(r458)<->a610(r457)@1:shuffle
  cp198:a608(r460)<->a609(r458)@1:shuffle
  cp199:a606(r463)<->a607(r508)@1:move
  cp200:a618(r448)<->a619(r447)@1:shuffle
  cp201:a617(r449)<->a618(r448)@1:shuffle
  cp202:a616(r451)<->a617(r449)@1:shuffle
  cp203:a614(r454)<->a615(r507)@1:move
  cp204:a626(r439)<->a627(r438)@1:shuffle
  cp205:a625(r440)<->a626(r439)@1:shuffle
  cp206:a624(r442)<->a625(r440)@1:shuffle
  cp207:a622(r445)<->a623(r506)@3:move
  regions=5, blocks=59, points=269
    allocnos=639 (big 0), copies=208, conflicts=821, ranges=304

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 58 57 8 4(->5:l1) 3 2
    all: 0r62 1r61 2r295 3r64 4r65 5r66 6r67 7r68 8r69 9r71 10r79 11r292 12r503 13r502 14r501 15r270 16r257 17r244 18r84 19r83 20r63 21r82 22r299 23r296 24r77 25r80 26r293 27r294 28r78 29r76 281r500 282r499 283r498 284r282 285r163 286r302 287r85 288r101 289r115 290r380 291r378 292r149 293r379 294r375 295r373 296r372 297r374 298r371 299r148 300r349 301r370 302r369 303r350 304r368 305r366 306r365 307r364 308r139 309r87 310r363 311r336 312r362 313r360 314r359 315r358 316r132 317r357 318r319 319r356 320r354 321r353 322r352 323r125 324r351 325r348 326r346 327r344 328r342 329r337 330r332 331r328 332r325 333r322 334r320 335r315 336r311 337r307 338r304 339r301 450r481 451r480 452r479 453r291 454r290 455r152 456r475 457r478 458r477 459r476 460r472 461r471 462r473 463r469 464r470 465r186 466r197 467r200 468r209 469r214 470r467 471r468 472r465 473r466 474r281 475r202 476r424 477r422 478r423 479r420 480r421 481r419 482r417 483r418 484r415 485r208 486r416 487r414 488r412 489r413 490r411 491r199 492r410 493r179 494r408 495r406 496r404 497r407 498r166 499r400 500r401 501r398 502r175 503r399 504r397 505r395 506r394 507r392 508r393 509r390 510r164 511r389 512r387 513r385 514r384 515r382 560r280 561r229 562r220 563r428 564r222 565r223 566r427 567r425 568r426 604r461 605r247 606r463 607r508 608r460 609r458 610r457 611r456 612r452 613r261 614r454 615r507 616r451 617r449 618r448 619r447 620r443 621r274 622r445 623r506 624r442 625r440 626r439 627r438 628r436 629r437 630r434 631r435 632r432 633r433 634r431 635r231 636r232 637r430 638r429
    modified regnos
    border:
    Pressure: GENERAL_REGS=24 SSE_REGS=7
    Hard reg set forest:
      0:( 0-5 8-15 21-51)@0
        1:( 0-5 37-44)@140962
          2:( 1-5 37-44)@280
            3:( 2-5 37-44)@427
              4:( 3 41-44)@394838
              5:( 2)@5328
              6:( 5)@7104
            7:( 1)@2664
        8:( 21-28 45-51)@189546
          9:( 21 23-28 45-51)@26632
      Spill a12(r503,l0)
      Spill a13(r502,l0)
      Spill a14(r501,l0)
      Spill a27(r294,l0)
      Spill a468(r209,l0: a358(r209,l1: a139(r209,l2)))
      Spill a469(r214,l0: a359(r214,l1: a140(r214,l2)))
      Spill a475(r202,l0: a365(r202,l1: a146(r202,l2)))
      Spill a493(r179,l0: a383(r179,l1: a164(r179,l2)))
      Allocno a0r62 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a1r61 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a2r295 of GENERAL_REGS(15) has 13 avail. regs  0 2-5 37-44, ^node:  0-5 37-44 (confl regs =  1 6-36 45-51)
      Allocno a3r64 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a4r65 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a5r66 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a6r67 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a7r68 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a8r69 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a9r71 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a10r79 of GENERAL_REGS(15) has 12 avail. regs  2-5 37-44, node:  2-5 37-44 (confl regs =  0 1 6-36 45-51)
      Allocno a11r292 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a15r270 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a16r257 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a17r244 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a18r84 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a19r83 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a20r63 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a21r82 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a22r299 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a23r296 of GENERAL_REGS(15) has 13 avail. regs  1-5 37-44, node:  1-5 37-44 (confl regs =  0 6-36 45-51)
      Allocno a24r77 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a25r80 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a26r293 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a28r78 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a29r76 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a281r500 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a282r499 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a283r498 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a284r282 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a285r163 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a286r302 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a287r85 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a288r101 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a289r115 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a290r380 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a291r378 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a292r149 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a293r379 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a294r375 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a295r373 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a296r372 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a297r374 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a298r371 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a299r148 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a300r349 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a301r370 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a302r369 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a303r350 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a304r368 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a305r366 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a306r365 of DREG(1) has 1 avail. regs  1, node:  1 (confl regs =  0 2-51)
      Allocno a307r364 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a308r139 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a309r87 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a310r363 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a311r336 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a312r362 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a313r360 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a314r359 of DREG(1) has 1 avail. regs  1, node:  1 (confl regs =  0 2-51)
      Allocno a315r358 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a316r132 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a317r357 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a318r319 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a319r356 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a320r354 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a321r353 of DREG(1) has 1 avail. regs  1, node:  1 (confl regs =  0 2-51)
      Allocno a322r352 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a323r125 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a324r351 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a325r348 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a326r346 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a327r344 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a328r342 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a329r337 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a330r332 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a331r328 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a332r325 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a333r322 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a334r320 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a335r315 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a336r311 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a337r307 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a338r304 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a339r301 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a450r481 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a451r480 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a452r479 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a453r291 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a454r290 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a455r152 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a456r475 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a457r478 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a458r477 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a459r476 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a460r472 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a461r471 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a462r473 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a463r469 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a464r470 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a465r186 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a466r197 of INT_SSE_REGS(31) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a467r200 of INT_SSE_REGS(31) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a470r467 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a471r468 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a472r465 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a473r466 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a474r281 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a476r424 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a477r422 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a478r423 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a479r420 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a480r421 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a481r419 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a482r417 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a483r418 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a484r415 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a485r208 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a486r416 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a487r414 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a488r412 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a489r413 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a490r411 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a491r199 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a492r410 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a494r408 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a495r406 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a496r404 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a497r407 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a498r166 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Allocno a499r400 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a500r401 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a501r398 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a502r175 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a503r399 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a504r397 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a505r395 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a506r394 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a507r392 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a508r393 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a509r390 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a510r164 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a511r389 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a512r387 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a513r385 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a514r384 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a515r382 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a560r280 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a561r229 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a562r220 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a563r428 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a564r222 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a565r223 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a566r427 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a567r425 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a568r426 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a604r461 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, ^node:  0-5 37-44 (confl regs =  5-36 45-51)
      Allocno a605r247 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a606r463 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, ^node:  0-5 8-15 21-51 (confl regs =  6-20 22 29-36)
      Allocno a607r508 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Allocno a608r460 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a609r458 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a610r457 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a611r456 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a612r452 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, ^node:  0-5 37-44 (confl regs =  5-36 45-51)
      Allocno a613r261 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a614r454 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, ^node:  0-5 8-15 21-51 (confl regs =  6-20 22 29-36)
      Allocno a615r507 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Allocno a616r451 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a617r449 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a618r448 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a619r447 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a620r443 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, ^node:  0-5 37-44 (confl regs =  5-36 45-51)
      Allocno a621r274 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a622r445 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, ^node:  0-5 8-15 21-51 (confl regs =  6-20 22 29-36)
      Allocno a623r506 of SSE_REGS(16) has 15 avail. regs  21 23-28 45-51, node:  21 23-28 45-51 (confl regs =  0-20 22 29-44)
      Allocno a624r442 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a625r440 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a626r439 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a627r438 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a628r436 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a629r437 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a630r434 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a631r435 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a632r432 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a633r433 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a634r431 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a635r231 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a636r232 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a637r430 of SSE_REGS(16) has 16 avail. regs  21-28 45-51, node:  21-28 45-51 (confl regs =  0-20 29-44)
      Allocno a638r429 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Pushing a614(r454,l0: a579(r454,l1: a535(r454,l2: a425(r454,l3: a256(r454,l4)))))(cost 0)
      Pushing a606(r463,l0: a571(r463,l1: a527(r463,l2: a417(r463,l3: a248(r463,l4)))))(cost 0)
      Pushing a476(r424,l0: a366(r424,l1: a147(r424,l2)))(cost 0)
      Pushing a473(r466,l0: a363(r466,l1: a144(r466,l2)))(cost 0)
      Pushing a472(r465,l0: a362(r465,l1: a143(r465,l2)))(cost 0)
      Pushing a471(r468,l0: a361(r468,l1: a142(r468,l2)))(cost 0)
      Pushing a470(r467,l0: a360(r467,l1: a141(r467,l2)))(cost 0)
      Pushing a464(r470,l0: a354(r470,l1: a135(r470,l2)))(cost 0)
      Pushing a463(r469,l0: a353(r469,l1: a134(r469,l2)))(cost 0)
      Pushing a462(r473,l0: a352(r473,l1: a133(r473,l2)))(cost 0)
      Pushing a460(r472,l0: a350(r472,l1: a131(r472,l2)))(cost 0)
      Pushing a459(r476,l0: a349(r476,l1: a130(r476,l2)))(cost 0)
      Pushing a458(r477,l0: a348(r477,l1: a129(r477,l2)))(cost 0)
      Pushing a457(r478,l0: a347(r478,l1: a128(r478,l2)))(cost 0)
      Pushing a452(r479,l0: a342(r479,l1: a123(r479,l2)))(cost 0)
      Pushing a451(r480,l0: a341(r480,l1: a122(r480,l2)))(cost 0)
      Pushing a450(r481,l0: a340(r481,l1: a121(r481,l2)))(cost 0)
      Pushing a615(r507,l0: a580(r507,l1: a536(r507,l2: a426(r507,l3: a257(r507,l4)))))(cost 0)
      Pushing a607(r508,l0: a572(r508,l1: a528(r508,l2: a418(r508,l3: a249(r508,l4)))))(cost 0)
      Pushing a619(r447,l0: a584(r447,l1: a540(r447,l2: a430(r447,l3: a261(r447,l4)))))(cost 0)
      Pushing a618(r448,l0: a583(r448,l1: a539(r448,l2: a429(r448,l3: a260(r448,l4)))))(cost 0)
      Pushing a617(r449,l0: a582(r449,l1: a538(r449,l2: a428(r449,l3: a259(r449,l4)))))(cost 0)
      Pushing a616(r451,l0: a581(r451,l1: a537(r451,l2: a427(r451,l3: a258(r451,l4)))))(cost 0)
      Pushing a611(r456,l0: a576(r456,l1: a532(r456,l2: a422(r456,l3: a253(r456,l4)))))(cost 0)
      Pushing a610(r457,l0: a575(r457,l1: a531(r457,l2: a421(r457,l3: a252(r457,l4)))))(cost 0)
      Pushing a609(r458,l0: a574(r458,l1: a530(r458,l2: a420(r458,l3: a251(r458,l4)))))(cost 0)
      Pushing a608(r460,l0: a573(r460,l1: a529(r460,l2: a419(r460,l3: a250(r460,l4)))))(cost 0)
      Pushing a612(r452,l0: a577(r452,l1: a533(r452,l2: a423(r452,l3: a254(r452,l4)))))(cost 0)
      Pushing a604(r461,l0: a569(r461,l1: a525(r461,l2: a415(r461,l3: a246(r461,l4)))))(cost 0)
      Pushing a465(r186,l0: a355(r186,l1: a136(r186,l2)))(cost 0)
      Pushing a461(r471,l0: a351(r471,l1: a132(r471,l2)))(cost 0)
      Pushing a456(r475,l0: a346(r475,l1: a127(r475,l2)))(cost 0)
      Pushing a613(r261,l0: a578(r261,l1: a534(r261,l2: a424(r261,l3: a255(r261,l4)))))(cost 0)
      Pushing a605(r247,l0: a570(r247,l1: a526(r247,l2: a416(r247,l3: a247(r247,l4)))))(cost 0)
      Pushing a454(r290,l0: a344(r290,l1: a125(r290,l2)))(cost 0)
      Pushing a453(r291,l0: a343(r291,l1: a124(r291,l2)))(cost 0)
      Pushing a622(r445,l0: a587(r445,l1: a543(r445,l2: a433(r445,l3: a264(r445,l4)))))(cost 0)
      Pushing a489(r413,l0: a379(r413,l1: a160(r413,l2)))(cost 0)
      Pushing a488(r412,l0: a378(r412,l1: a159(r412,l2)))(cost 0)
      Pushing a487(r414,l0: a377(r414,l1: a158(r414,l2)))(cost 0)
      Pushing a486(r416,l0: a376(r416,l1: a157(r416,l2)))(cost 0)
      Pushing a485(r208,l0: a375(r208,l1: a156(r208,l2)))(cost 0)
      Pushing a484(r415,l0: a374(r415,l1: a155(r415,l2)))(cost 0)
      Pushing a481(r419,l0: a371(r419,l1: a152(r419,l2)))(cost 0)
      Pushing a480(r421,l0: a370(r421,l1: a151(r421,l2)))(cost 0)
      Pushing a479(r420,l0: a369(r420,l1: a150(r420,l2)))(cost 0)
      Pushing a478(r423,l0: a368(r423,l1: a149(r423,l2)))(cost 0)
      Pushing a477(r422,l0: a367(r422,l1: a148(r422,l2)))(cost 0)
      Pushing a623(r506,l0: a588(r506,l1: a544(r506,l2: a434(r506,l3: a265(r506,l4)))))(cost 0)
      Pushing a627(r438,l0: a592(r438,l1: a548(r438,l2: a438(r438,l3: a269(r438,l4)))))(cost 0)
      Pushing a626(r439,l0: a591(r439,l1: a547(r439,l2: a437(r439,l3: a268(r439,l4)))))(cost 0)
      Pushing a625(r440,l0: a590(r440,l1: a546(r440,l2: a436(r440,l3: a267(r440,l4)))))(cost 0)
      Pushing a624(r442,l0: a589(r442,l1: a545(r442,l2: a435(r442,l3: a266(r442,l4)))))(cost 0)
      Pushing a492(r410,l0: a382(r410,l1: a163(r410,l2)))(cost 0)
      Pushing a490(r411,l0: a380(r411,l1: a161(r411,l2)))(cost 0)
      Pushing a483(r418,l0: a373(r418,l1: a154(r418,l2)))(cost 0)
      Pushing a482(r417,l0: a372(r417,l1: a153(r417,l2)))(cost 0)
      Pushing a620(r443,l0: a585(r443,l1: a541(r443,l2: a431(r443,l3: a262(r443,l4)))))(cost 0)
      Pushing a621(r274,l0: a586(r274,l1: a542(r274,l2: a432(r274,l3: a263(r274,l4)))))(cost 0)
      Pushing a491(r199,l0: a381(r199,l1: a162(r199,l2)))(cost 0)
      Pushing a631(r435,l0: a596(r435,l1: a552(r435,l2: a442(r435,l3: a273(r435,l4)))))(cost 0)
      Pushing a630(r434,l0: a595(r434,l1: a551(r434,l2: a441(r434,l3: a272(r434,l4)))))(cost 0)
      Pushing a629(r437,l0: a594(r437,l1: a550(r437,l2: a440(r437,l3: a271(r437,l4)))))(cost 0)
      Pushing a628(r436,l0: a593(r436,l1: a549(r436,l2: a439(r436,l3: a270(r436,l4)))))(cost 0)
      Pushing a500(r401,l0: a390(r401,l1: a171(r401,l2)))(cost 0)
      Pushing a499(r400,l0: a389(r400,l1: a170(r400,l2)))(cost 0)
      Pushing a497(r407,l0: a387(r407,l1: a168(r407,l2)))(cost 0)
      Pushing a496(r404,l0: a386(r404,l1: a167(r404,l2)))(cost 0)
      Pushing a495(r406,l0: a385(r406,l1: a166(r406,l2)))(cost 0)
      Pushing a494(r408,l0: a384(r408,l1: a165(r408,l2)))(cost 0)
      Pushing a563(r428,l0: a519(r428,l1: a409(r428,l2: a214(r428,l3))))(cost 0)
      Pushing a633(r433,l0: a598(r433,l1: a554(r433,l2: a444(r433,l3: a275(r433,l4)))))(cost 0)
      Pushing a632(r432,l0: a597(r432,l1: a553(r432,l2: a443(r432,l3: a274(r432,l4)))))(cost 0)
      Pushing a564(r222,l0: a520(r222,l1: a410(r222,l2: a215(r222,l3))))(cost 0)
      Pushing a29(r76,l0)(cost 0)
      Pushing a28(r78,l0)(cost 0)
      Pushing a26(r293,l0)(cost 0)
      Pushing a22(r299,l0)(cost 0)
      Pushing a0(r62,l0)(cost 0)
      Pushing a2(r295,l0)(cost 0)
      Pushing a568(r426,l0: a524(r426,l1: a414(r426,l2: a219(r426,l3))))(cost 0)
      Pushing a567(r425,l0: a523(r425,l1: a413(r425,l2: a218(r425,l3))))(cost 0)
      Pushing a19(r83,l0)(cost 0)
      Pushing a25(r80,l0)(cost 0)
      Pushing a23(r296,l0)(cost 0)
      Pushing a10(r79,l0)(cost 0)
      Pushing a562(r220,l0: a518(r220,l1: a408(r220,l2: a213(r220,l3))))(cost 0)
      Pushing a565(r223,l0: a521(r223,l1: a411(r223,l2: a216(r223,l3))))(cost 0)
      Pushing a634(r431,l0: a599(r431,l1: a555(r431,l2: a445(r431,l3: a276(r431,l4)))))(cost 0)
      Pushing a1(r61,l0)(cost 0)
      Pushing a503(r399,l0: a393(r399,l1: a174(r399,l2)))(cost 0)
      Pushing a501(r398,l0: a391(r398,l1: a172(r398,l2)))(cost 0)
      Pushing a21(r82,l0)(cost 0)
      Pushing a566(r427,l0: a522(r427,l1: a412(r427,l2: a217(r427,l3))))(cost 0)
      Pushing a635(r231,l0: a600(r231,l1: a556(r231,l2: a446(r231,l3: a277(r231,l4)))))(cost 0)
      Pushing a637(r430,l0: a602(r430,l1: a558(r430,l2: a448(r430,l3: a279(r430,l4)))))(cost 0)
      Pushing a504(r397,l0: a394(r397,l1: a175(r397,l2)))(cost 0)
      Pushing a561(r229,l0: a517(r229,l1: a407(r229,l2: a212(r229,l3))))(cost 0)
      Pushing a636(r232,l0: a601(r232,l1: a557(r232,l2: a447(r232,l3: a278(r232,l4)))))(cost 0)
      Pushing a502(r175,l0: a392(r175,l1: a173(r175,l2)))(cost 0)
      Pushing a638(r429,l0: a603(r429,l1: a559(r429,l2: a449(r429,l3: a280(r429,l4)))))(cost 0)
      Pushing a505(r395,l0: a395(r395,l1: a176(r395,l2)))(cost 0)
      Pushing a508(r393,l0: a398(r393,l1: a179(r393,l2)))(cost 0)
      Pushing a506(r394,l0: a396(r394,l1: a177(r394,l2)))(cost 0)
      Pushing a509(r390,l0: a399(r390,l1: a180(r390,l2)))(cost 0)
      Pushing a507(r392,l0: a397(r392,l1: a178(r392,l2)))(cost 0)
      Pushing a293(r379,l0: a54(r379,l1))(cost 0)
      Pushing a291(r378,l0: a52(r378,l1))(cost 0)
      Pushing a290(r380,l0: a51(r380,l1))(cost 0)
      Pushing a297(r374,l0: a58(r374,l1))(cost 0)
      Pushing a296(r372,l0: a57(r372,l1))(cost 0)
      Pushing a295(r373,l0: a56(r373,l1))(cost 0)
      Pushing a294(r375,l0: a55(r375,l1))(cost 0)
      Pushing a298(r371,l0: a59(r371,l1))(cost 0)
      Pushing a511(r389,l0: a401(r389,l1: a182(r389,l2)))(cost 0)
      Pushing a338(r304,l0: a99(r304,l1))(cost 0)
      Pushing a337(r307,l0: a98(r307,l1))(cost 0)
      Pushing a336(r311,l0: a97(r311,l1))(cost 0)
      Pushing a335(r315,l0: a96(r315,l1))(cost 0)
      Pushing a334(r320,l0: a95(r320,l1))(cost 0)
      Pushing a333(r322,l0: a94(r322,l1))(cost 0)
      Pushing a332(r325,l0: a93(r325,l1))(cost 0)
      Pushing a331(r328,l0: a92(r328,l1))(cost 0)
      Pushing a330(r332,l0: a91(r332,l1))(cost 0)
      Pushing a329(r337,l0: a90(r337,l1))(cost 0)
      Pushing a328(r342,l0: a89(r342,l1))(cost 0)
      Pushing a327(r344,l0: a88(r344,l1))(cost 0)
      Pushing a326(r346,l0: a87(r346,l1))(cost 0)
      Pushing a325(r348,l0: a86(r348,l1))(cost 0)
      Pushing a323(r125,l0: a84(r125,l1))(cost 0)
      Pushing a316(r132,l0: a77(r132,l1))(cost 0)
      Pushing a308(r139,l0: a69(r139,l1))(cost 0)
      Pushing a324(r351,l0: a85(r351,l1))(cost 0)
      Pushing a322(r352,l0: a83(r352,l1))(cost 0)
      Pushing a321(r353,l0: a82(r353,l1))(cost 0)
      Pushing a320(r354,l0: a81(r354,l1))(cost 0)
      Pushing a319(r356,l0: a80(r356,l1))(cost 0)
      Pushing a317(r357,l0: a78(r357,l1))(cost 0)
      Pushing a315(r358,l0: a76(r358,l1))(cost 0)
      Pushing a314(r359,l0: a75(r359,l1))(cost 0)
      Pushing a313(r360,l0: a74(r360,l1))(cost 0)
      Pushing a312(r362,l0: a73(r362,l1))(cost 0)
      Pushing a310(r363,l0: a71(r363,l1))(cost 0)
      Pushing a307(r364,l0: a68(r364,l1))(cost 0)
      Pushing a306(r365,l0: a67(r365,l1))(cost 0)
      Pushing a305(r366,l0: a66(r366,l1))(cost 0)
      Pushing a304(r368,l0: a65(r368,l1))(cost 0)
      Pushing a302(r369,l0: a63(r369,l1))(cost 0)
      Pushing a301(r370,l0: a62(r370,l1))(cost 0)
      Pushing a292(r149,l0: a53(r149,l1))(cost 0)
      Pushing a513(r385,l0: a403(r385,l1: a184(r385,l2)))(cost 0)
      Pushing a512(r387,l0: a402(r387,l1: a183(r387,l2)))(cost 0)
      Pushing a498(r166,l0: a388(r166,l1: a169(r166,l2)))(cost 0)
      Pushing a299(r148,l0: a60(r148,l1))(cost 0)
      Pushing a339(r301,l0: a100(r301,l1))(cost 0)
      Pushing a515(r382,l0: a405(r382,l1: a186(r382,l2)))(cost 0)
      Pushing a514(r384,l0: a404(r384,l1: a185(r384,l2)))(cost 0)
      Pushing a510(r164,l0: a400(r164,l1: a181(r164,l2)))(cost 0)
      Pushing a3(r64,l0)(potential spill: pri=0, cost=60)
      Pushing a5(r66,l0)(potential spill: pri=0, cost=60)
      Pushing a7(r68,l0)(potential spill: pri=0, cost=68)
      Pushing a15(r270,l0)(potential spill: pri=0, cost=267)
      Pushing a16(r257,l0)(potential spill: pri=0, cost=267)
      Pushing a17(r244,l0)(potential spill: pri=0, cost=267)
      Pushing a18(r84,l0)(potential spill: pri=4, cost=2688)
      Pushing a467(r200,l0: a357(r200,l1: a138(r200,l2)))(potential spill: pri=6, cost=6)
      Pushing a466(r197,l0: a356(r197,l1: a137(r197,l2)))(potential spill: pri=7, cost=7)
      Pushing a20(r63,l0)(potential spill: pri=21, cost=12297)
      Pushing a4(r65,l0)(potential spill: pri=80, cost=80)
        Making a8(r69,l0) colorable
        Making a6(r67,l0) colorable
        Making a9(r71,l0) colorable
        Making a24(r77,l0) colorable
      Pushing a8(r69,l0)(cost 80)
      Pushing a6(r67,l0)(cost 80)
      Pushing a24(r77,l0)(cost 98)
      Pushing a9(r71,l0)(cost 146)
      Pushing a11(r292,l0)(potential spill: pri=184, cost=106544)
      Pushing a474(r281,l0: a364(r281,l1: a145(r281,l2)))(potential spill: pri=257, cost=257)
      Pushing a282(r499,l0: a43(r499,l1))(potential spill: pri=327, cost=327)
      Pushing a283(r498,l0: a44(r498,l1))(potential spill: pri=327, cost=327)
      Pushing a281(r500,l0: a42(r500,l1))(potential spill: pri=333, cost=333)
      Pushing a560(r280,l0: a516(r280,l1: a406(r280,l2: a211(r280,l3))))(potential spill: pri=595, cost=595)
      Pushing a289(r115,l0: a50(r115,l1))(potential spill: pri=1800, cost=1800)
        Making a284(r282,l0: a45(r282,l1)) colorable
        Making a285(r163,l0: a46(r163,l1)) colorable
        Making a455(r152,l0: a345(r152,l1: a126(r152,l2))) colorable
      Pushing a285(r163,l0: a46(r163,l1))(cost 3054)
      Pushing a455(r152,l0: a345(r152,l1: a126(r152,l2)))(cost 11468)
      Pushing a284(r282,l0: a45(r282,l1))(cost 11244)
      Pushing a303(r350,l0: a64(r350,l1))(potential spill: pri=3108, cost=3108)
      Pushing a286(r302,l0: a47(r302,l1))(potential spill: pri=3351, cost=3351)
      Pushing a311(r336,l0: a72(r336,l1))(potential spill: pri=4440, cost=4440)
        Making a287(r85,l0: a48(r85,l1)) colorable
        Making a288(r101,l0: a49(r101,l1)) colorable
        Making a309(r87,l0: a70(r87,l1)) colorable
        Making a300(r349,l0: a61(r349,l1)) colorable
        Making a318(r319,l0: a79(r319,l1)) colorable
      Pushing a318(r319,l0: a79(r319,l1))(cost 4440)
      Pushing a288(r101,l0: a49(r101,l1))(cost 5416)
      Pushing a300(r349,l0: a61(r349,l1))(cost 6484)
      Pushing a287(r85,l0: a48(r85,l1))(cost 6216)
      Pushing a309(r87,l0: a70(r87,l1))(cost 11544)
      Popping a309(r87,l0: a70(r87,l1))  -- assign reg 3
      Popping a287(r85,l0: a48(r85,l1))  -- assign reg 41
      Popping a300(r349,l0: a61(r349,l1))  -- assign reg 42
      Popping a288(r101,l0: a49(r101,l1))  -- assign reg 43
      Popping a318(r319,l0: a79(r319,l1))  -- assign reg 44
      Popping a311(r336,l0: a72(r336,l1))  -- spill
      Popping a286(r302,l0: a47(r302,l1))  -- spill
      Popping a303(r350,l0: a64(r350,l1))  -- spill
      Popping a284(r282,l0: a45(r282,l1))  -- assign reg 3
      Popping a455(r152,l0: a345(r152,l1: a126(r152,l2)))  -- assign reg 42
      Popping a285(r163,l0: a46(r163,l1))  -- assign reg 44
      Popping a289(r115,l0: a50(r115,l1))  -- spill
      Popping a560(r280,l0: a516(r280,l1: a406(r280,l2: a211(r280,l3))))  -- assign reg 42
      Popping a281(r500,l0: a42(r500,l1))  -- spill
      Popping a283(r498,l0: a44(r498,l1))  -- spill
      Popping a282(r499,l0: a43(r499,l1))  -- spill
      Popping a474(r281,l0: a364(r281,l1: a145(r281,l2)))  -- spill
      Popping a11(r292,l0)  -- spill
      Popping a9(r71,l0)  -- assign reg 3
      Popping a24(r77,l0)  -- assign reg 41
      Popping a6(r67,l0)  -- assign reg 42
      Popping a8(r69,l0)  -- assign reg 43
      Popping a4(r65,l0)  -- assign reg 44
      Popping a20(r63,l0)  -- spill
      Popping a466(r197,l0: a356(r197,l1: a137(r197,l2)))  -- spill
      Popping a467(r200,l0: a357(r200,l1: a138(r200,l2)))  -- spill
      Popping a18(r84,l0)  -- spill
      Popping a17(r244,l0)  -- spill
      Popping a16(r257,l0)  -- spill
      Popping a15(r270,l0)  -- spill
      Popping a7(r68,l0)  -- spill
      Popping a5(r66,l0)  -- spill
      Popping a3(r64,l0)  -- spill
      Popping a510(r164,l0: a400(r164,l1: a181(r164,l2)))  -- assign reg 22
      Popping a514(r384,l0: a404(r384,l1: a185(r384,l2)))  -- assign reg 0
      Popping a515(r382,l0: a405(r382,l1: a186(r382,l2)))  -- assign reg 0
      Popping a339(r301,l0: a100(r301,l1))  -- assign reg 0
      Popping a299(r148,l0: a60(r148,l1))  -- assign reg 21
      Popping a498(r166,l0: a388(r166,l1: a169(r166,l2)))  -- assign reg 21
      Popping a512(r387,l0: a402(r387,l1: a183(r387,l2)))  -- assign reg 0
      Popping a513(r385,l0: a403(r385,l1: a184(r385,l2)))  -- assign reg 23
      Popping a292(r149,l0: a53(r149,l1))  -- assign reg 22
      Popping a301(r370,l0: a62(r370,l1))  -- assign reg 5
      Popping a302(r369,l0: a63(r369,l1))  -- assign reg 5
      Popping a304(r368,l0: a65(r368,l1))  -- assign reg 2
      Popping a305(r366,l0: a66(r366,l1))  -- assign reg 5
      Popping a306(r365,l0: a67(r365,l1))  -- assign reg 1
      Popping a307(r364,l0: a68(r364,l1))  -- assign reg 2
      Popping a310(r363,l0: a71(r363,l1))  -- assign reg 5
      Popping a312(r362,l0: a73(r362,l1))  -- assign reg 2
      Popping a313(r360,l0: a74(r360,l1))  -- assign reg 5
      Popping a314(r359,l0: a75(r359,l1))  -- assign reg 1
      Popping a315(r358,l0: a76(r358,l1))  -- assign reg 2
      Popping a317(r357,l0: a78(r357,l1))  -- assign reg 5
      Popping a319(r356,l0: a80(r356,l1))  -- assign reg 2
      Popping a320(r354,l0: a81(r354,l1))  -- assign reg 5
      Popping a321(r353,l0: a82(r353,l1))  -- assign reg 1
      Popping a322(r352,l0: a83(r352,l1))  -- assign reg 2
      Popping a324(r351,l0: a85(r351,l1))  -- assign reg 5
      Popping a308(r139,l0: a69(r139,l1))  -- assign reg 0
      Popping a316(r132,l0: a77(r132,l1))  -- assign reg 0
      Popping a323(r125,l0: a84(r125,l1))  -- assign reg 0
      Popping a325(r348,l0: a86(r348,l1))  -- assign reg 42
      Popping a326(r346,l0: a87(r346,l1))  -- assign reg 0
      Popping a327(r344,l0: a88(r344,l1))  -- assign reg 0
      Popping a328(r342,l0: a89(r342,l1))  -- assign reg 0
      Popping a329(r337,l0: a90(r337,l1))  -- assign reg 0
      Popping a330(r332,l0: a91(r332,l1))  -- assign reg 0
      Popping a331(r328,l0: a92(r328,l1))  -- assign reg 0
      Popping a332(r325,l0: a93(r325,l1))  -- assign reg 0
      Popping a333(r322,l0: a94(r322,l1))  -- assign reg 0
      Popping a334(r320,l0: a95(r320,l1))  -- assign reg 1
      Popping a335(r315,l0: a96(r315,l1))  -- assign reg 0
      Popping a336(r311,l0: a97(r311,l1))  -- assign reg 0
      Popping a337(r307,l0: a98(r307,l1))  -- assign reg 0
      Popping a338(r304,l0: a99(r304,l1))  -- assign reg 0
      Popping a511(r389,l0: a401(r389,l1: a182(r389,l2)))  -- assign reg 23
      Popping a298(r371,l0: a59(r371,l1))  -- assign reg 0
      Popping a294(r375,l0: a55(r375,l1))  -- assign reg 21
      Popping a295(r373,l0: a56(r373,l1))  -- assign reg 21
      Popping a296(r372,l0: a57(r372,l1))  -- assign reg 23
      Popping a297(r374,l0: a58(r374,l1))  -- assign reg 21
      Popping a290(r380,l0: a51(r380,l1))  -- assign reg 21
      Popping a291(r378,l0: a52(r378,l1))  -- assign reg 21
      Popping a293(r379,l0: a54(r379,l1))  -- assign reg 21
      Popping a507(r392,l0: a397(r392,l1: a178(r392,l2)))  -- assign reg 0
      Popping a509(r390,l0: a399(r390,l1: a180(r390,l2)))  -- assign reg 1
      Popping a506(r394,l0: a396(r394,l1: a177(r394,l2)))  -- assign reg 1
      Popping a508(r393,l0: a398(r393,l1: a179(r393,l2)))  -- assign reg 1
      Popping a505(r395,l0: a395(r395,l1: a176(r395,l2)))  -- assign reg 22
      Popping a638(r429,l0: a603(r429,l1: a559(r429,l2: a449(r429,l3: a280(r429,l4)))))  -- assign reg 0
      Popping a502(r175,l0: a392(r175,l1: a173(r175,l2)))  -- assign reg 22
      Popping a636(r232,l0: a601(r232,l1: a557(r232,l2: a447(r232,l3: a278(r232,l4)))))  -- assign reg 1
      Popping a561(r229,l0: a517(r229,l1: a407(r229,l2: a212(r229,l3))))  -- assign reg 2
      Popping a504(r397,l0: a394(r397,l1: a175(r397,l2)))  -- assign reg 23
      Popping a637(r430,l0: a602(r430,l1: a558(r430,l2: a448(r430,l3: a279(r430,l4)))))  -- assign reg 21
      Popping a635(r231,l0: a600(r231,l1: a556(r231,l2: a446(r231,l3: a277(r231,l4)))))  -- assign reg 4
      Popping a566(r427,l0: a522(r427,l1: a412(r427,l2: a217(r427,l3))))  -- assign reg 0
      Popping a21(r82,l0)  -- assign reg 0
      Popping a501(r398,l0: a391(r398,l1: a172(r398,l2)))  -- assign reg 22
      Popping a503(r399,l0: a393(r399,l1: a174(r399,l2)))  -- assign reg 23
      Popping a1(r61,l0)  -- assign reg 2
      Popping a634(r431,l0: a599(r431,l1: a555(r431,l2: a445(r431,l3: a276(r431,l4)))))  -- assign reg 21
      Popping a565(r223,l0: a521(r223,l1: a411(r223,l2: a216(r223,l3))))  -- assign reg 1
      Popping a562(r220,l0: a518(r220,l1: a408(r220,l2: a213(r220,l3))))  -- assign reg 21
      Popping a10(r79,l0)  -- assign reg 4
      Popping a23(r296,l0)  -- assign reg 1
      Popping a25(r80,l0)  -- assign reg 0
      Popping a19(r83,l0)  -- assign reg 2
      Popping a567(r425,l0: a523(r425,l1: a413(r425,l2: a218(r425,l3))))  -- assign reg 0
      Popping a568(r426,l0: a524(r426,l1: a414(r426,l2: a219(r426,l3))))  -- assign reg 1
      Popping a2(r295,l0)  -- assign reg 0
      Popping a0(r62,l0)  -- assign reg 5
      Popping a22(r299,l0)  -- assign reg 0
      Popping a26(r293,l0)  -- assign reg 0
      Popping a28(r78,l0)  -- assign reg 0
      Popping a29(r76,l0)  -- assign reg 0
      Popping a564(r222,l0: a520(r222,l1: a410(r222,l2: a215(r222,l3))))  -- assign reg 2
      Popping a632(r432,l0: a597(r432,l1: a553(r432,l2: a443(r432,l3: a274(r432,l4)))))  -- assign reg 21
      Popping a633(r433,l0: a598(r433,l1: a554(r433,l2: a444(r433,l3: a275(r433,l4)))))  -- assign reg 22
      Popping a563(r428,l0: a519(r428,l1: a409(r428,l2: a214(r428,l3))))  -- assign reg 22
      Popping a494(r408,l0: a384(r408,l1: a165(r408,l2)))  -- assign reg 21
      Popping a495(r406,l0: a385(r406,l1: a166(r406,l2)))  -- assign reg 21
      Popping a496(r404,l0: a386(r404,l1: a167(r404,l2)))  -- assign reg 21
      Popping a497(r407,l0: a387(r407,l1: a168(r407,l2)))  -- assign reg 22
      Popping a499(r400,l0: a389(r400,l1: a170(r400,l2)))  -- assign reg 22
      Popping a500(r401,l0: a390(r401,l1: a171(r401,l2)))  -- assign reg 22
      Popping a628(r436,l0: a593(r436,l1: a549(r436,l2: a439(r436,l3: a270(r436,l4)))))  -- assign reg 21
      Popping a629(r437,l0: a594(r437,l1: a550(r437,l2: a440(r437,l3: a271(r437,l4)))))  -- assign reg 22
      Popping a630(r434,l0: a595(r434,l1: a551(r434,l2: a441(r434,l3: a272(r434,l4)))))  -- assign reg 21
      Popping a631(r435,l0: a596(r435,l1: a552(r435,l2: a442(r435,l3: a273(r435,l4)))))  -- assign reg 22
      Popping a491(r199,l0: a381(r199,l1: a162(r199,l2)))  -- assign reg 0
      Popping a621(r274,l0: a586(r274,l1: a542(r274,l2: a432(r274,l3: a263(r274,l4)))))  -- assign reg 5
      Popping a620(r443,l0: a585(r443,l1: a541(r443,l2: a431(r443,l3: a262(r443,l4)))))  -- assign reg 0
      Popping a482(r417,l0: a372(r417,l1: a153(r417,l2)))  -- assign reg 0
      Popping a483(r418,l0: a373(r418,l1: a154(r418,l2)))  -- assign reg 1
      Popping a490(r411,l0: a380(r411,l1: a161(r411,l2)))  -- assign reg 1
      Popping a492(r410,l0: a382(r410,l1: a163(r410,l2)))  -- assign reg 1
      Popping a624(r442,l0: a589(r442,l1: a545(r442,l2: a435(r442,l3: a266(r442,l4)))))  -- assign reg 0
      Popping a625(r440,l0: a590(r440,l1: a546(r440,l2: a436(r440,l3: a267(r440,l4)))))  -- assign reg 0
      Popping a626(r439,l0: a591(r439,l1: a547(r439,l2: a437(r439,l3: a268(r439,l4)))))  -- assign reg 0
      Popping a627(r438,l0: a592(r438,l1: a548(r438,l2: a438(r438,l3: a269(r438,l4)))))  -- assign reg 0
      Popping a623(r506,l0: a588(r506,l1: a544(r506,l2: a434(r506,l3: a265(r506,l4)))))  -- assign reg 21
      Popping a477(r422,l0: a367(r422,l1: a148(r422,l2)))  -- assign reg 21
      Popping a478(r423,l0: a368(r423,l1: a149(r423,l2)))  -- assign reg 22
      Popping a479(r420,l0: a369(r420,l1: a150(r420,l2)))  -- assign reg 21
      Popping a480(r421,l0: a370(r421,l1: a151(r421,l2)))  -- assign reg 21
      Popping a481(r419,l0: a371(r419,l1: a152(r419,l2)))  -- assign reg 21
      Popping a484(r415,l0: a374(r415,l1: a155(r415,l2)))  -- assign reg 21
      Popping a485(r208,l0: a375(r208,l1: a156(r208,l2)))  -- assign reg 21
      Popping a486(r416,l0: a376(r416,l1: a157(r416,l2)))  -- assign reg 22
      Popping a487(r414,l0: a377(r414,l1: a158(r414,l2)))  -- assign reg 21
      Popping a488(r412,l0: a378(r412,l1: a159(r412,l2)))  -- assign reg 21
      Popping a489(r413,l0: a379(r413,l1: a160(r413,l2)))  -- assign reg 21
      Popping a622(r445,l0: a587(r445,l1: a543(r445,l2: a433(r445,l3: a264(r445,l4)))))  -- assign reg 21
      Popping a453(r291,l0: a343(r291,l1: a124(r291,l2)))  -- assign reg 21
      Popping a454(r290,l0: a344(r290,l1: a125(r290,l2)))  -- assign reg 22
      Popping a605(r247,l0: a570(r247,l1: a526(r247,l2: a416(r247,l3: a247(r247,l4)))))  -- assign reg 5
      Popping a613(r261,l0: a578(r261,l1: a534(r261,l2: a424(r261,l3: a255(r261,l4)))))  -- assign reg 5
      Popping a456(r475,l0: a346(r475,l1: a127(r475,l2)))  -- assign reg 23
      Popping a461(r471,l0: a351(r471,l1: a132(r471,l2)))  -- assign reg 21
      Popping a465(r186,l0: a355(r186,l1: a136(r186,l2)))  -- assign reg 21
      Popping a604(r461,l0: a569(r461,l1: a525(r461,l2: a415(r461,l3: a246(r461,l4)))))  -- assign reg 0
      Popping a612(r452,l0: a577(r452,l1: a533(r452,l2: a423(r452,l3: a254(r452,l4)))))  -- assign reg 0
      Popping a608(r460,l0: a573(r460,l1: a529(r460,l2: a419(r460,l3: a250(r460,l4)))))  -- assign reg 0
      Popping a609(r458,l0: a574(r458,l1: a530(r458,l2: a420(r458,l3: a251(r458,l4)))))  -- assign reg 0
      Popping a610(r457,l0: a575(r457,l1: a531(r457,l2: a421(r457,l3: a252(r457,l4)))))  -- assign reg 0
      Popping a611(r456,l0: a576(r456,l1: a532(r456,l2: a422(r456,l3: a253(r456,l4)))))  -- assign reg 0
      Popping a616(r451,l0: a581(r451,l1: a537(r451,l2: a427(r451,l3: a258(r451,l4)))))  -- assign reg 0
      Popping a617(r449,l0: a582(r449,l1: a538(r449,l2: a428(r449,l3: a259(r449,l4)))))  -- assign reg 0
      Popping a618(r448,l0: a583(r448,l1: a539(r448,l2: a429(r448,l3: a260(r448,l4)))))  -- assign reg 0
      Popping a619(r447,l0: a584(r447,l1: a540(r447,l2: a430(r447,l3: a261(r447,l4)))))  -- assign reg 0
      Popping a607(r508,l0: a572(r508,l1: a528(r508,l2: a418(r508,l3: a249(r508,l4)))))  -- assign reg 21
      Popping a615(r507,l0: a580(r507,l1: a536(r507,l2: a426(r507,l3: a257(r507,l4)))))  -- assign reg 21
      Popping a450(r481,l0: a340(r481,l1: a121(r481,l2)))  -- assign reg 21
      Popping a451(r480,l0: a341(r480,l1: a122(r480,l2)))  -- assign reg 21
      Popping a452(r479,l0: a342(r479,l1: a123(r479,l2)))  -- assign reg 22
      Popping a457(r478,l0: a347(r478,l1: a128(r478,l2)))  -- assign reg 23
      Popping a458(r477,l0: a348(r477,l1: a129(r477,l2)))  -- assign reg 23
      Popping a459(r476,l0: a349(r476,l1: a130(r476,l2)))  -- assign reg 24
      Popping a460(r472,l0: a350(r472,l1: a131(r472,l2)))  -- assign reg 23
      Popping a462(r473,l0: a352(r473,l1: a133(r473,l2)))  -- assign reg 23
      Popping a463(r469,l0: a353(r469,l1: a134(r469,l2)))  -- assign reg 22
      Popping a464(r470,l0: a354(r470,l1: a135(r470,l2)))  -- assign reg 22
      Popping a470(r467,l0: a360(r467,l1: a141(r467,l2)))  -- assign reg 21
      Popping a471(r468,l0: a361(r468,l1: a142(r468,l2)))  -- assign reg 22
      Popping a472(r465,l0: a362(r465,l1: a143(r465,l2)))  -- assign reg 21
      Popping a473(r466,l0: a363(r466,l1: a144(r466,l2)))  -- assign reg 21
      Popping a476(r424,l0: a366(r424,l1: a147(r424,l2)))  -- assign reg 21
      Popping a606(r463,l0: a571(r463,l1: a527(r463,l2: a417(r463,l3: a248(r463,l4)))))  -- assign reg 21
      Popping a614(r454,l0: a579(r454,l1: a535(r454,l2: a425(r454,l3: a256(r454,l4)))))  -- assign reg 21
Spilling a8r69 for a11r292
Spilling a288r101 for a11r292
Assigning 43 to a11r292
Spilling a287r85 for a20r63
Assigning 41 to a20r63
       a8(r69,l0)  -- assign memory
       a288(r101,l0: a49(r101,l1))  -- assign memory
       a287(r85,l0: a48(r85,l1))  -- assign memory

  Loop 1 (parent 0, header bb5, depth 1)
    bbs: 56(->17:l2) 55 54 19 16 15 14 13 12 11 10 9 7(->8:l0) 6 5
    all: 30r63 31r64 32r66 33r68 34r84 35r244 36r257 37r270 38r292 39r501 40r502 41r503 42r500 43r499 44r498 45r282 46r163 47r302 48r85 49r101 50r115 51r380 52r378 53r149 54r379 55r375 56r373 57r372 58r374 59r371 60r148 61r349 62r370 63r369 64r350 65r368 66r366 67r365 68r364 69r139 70r87 71r363 72r336 73r362 74r360 75r359 76r358 77r132 78r357 79r319 80r356 81r354 82r353 83r352 84r125 85r351 86r348 87r346 88r344 89r342 90r337 91r332 92r328 93r325 94r322 95r320 96r315 97r311 98r307 99r304 100r301 340r481 341r480 342r479 343r291 344r290 345r152 346r475 347r478 348r477 349r476 350r472 351r471 352r473 353r469 354r470 355r186 356r197 357r200 358r209 359r214 360r467 361r468 362r465 363r466 364r281 365r202 366r424 367r422 368r423 369r420 370r421 371r419 372r417 373r418 374r415 375r208 376r416 377r414 378r412 379r413 380r411 381r199 382r410 383r179 384r408 385r406 386r404 387r407 388r166 389r400 390r401 391r398 392r175 393r399 394r397 395r395 396r394 397r392 398r393 399r390 400r164 401r389 402r387 403r385 404r384 405r382 516r280 517r229 518r220 519r428 520r222 521r223 522r427 523r425 524r426 569r461 570r247 571r463 572r508 573r460 574r458 575r457 576r456 577r452 578r261 579r454 580r507 581r451 582r449 583r448 584r447 585r443 586r274 587r445 588r506 589r442 590r440 591r439 592r438 593r436 594r437 595r434 596r435 597r432 598r433 599r431 600r231 601r232 602r430 603r429
    modified regnos
    border: 30r63 31r64 32r66 33r68 34r84 35r244 36r257 37r270 38r292 39r501 40r502 41r503
    Pressure: GENERAL_REGS=24 SSE_REGS=7
    Hard reg set forest:
      0:( 0-5 8-15 21-51)@0
        1:( 0-5 21 23-28 37-51)@280
          2:( 0-5 37-44)@138752
            3:( 0-4 37-44)@80
              4:( 3 41-44)@392134
              5:( 2)@5328
              6:( 1)@2664
            7:( 5)@7104
      Spill a31(r64,l1)
      Spill a32(r66,l1)
      Spill a33(r68,l1)
      Allocno a30r63 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a34r84 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a35r244 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a36r257 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a37r270 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a38r292 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a42r500 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a43r499 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a44r498 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a45r282 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a46r163 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a47r302 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a48r85 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a49r101 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a50r115 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a59r371 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a61r349 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a62r370 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a63r369 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a64r350 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a65r368 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a66r366 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a67r365 of DREG(1) has 1 avail. regs  1, node:  1 (confl regs =  0 2-51)
      Allocno a68r364 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a69r139 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a70r87 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a71r363 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a72r336 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a73r362 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a74r360 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a75r359 of DREG(1) has 1 avail. regs  1, node:  1 (confl regs =  0 2-51)
      Allocno a76r358 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a77r132 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a78r357 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a79r319 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a80r356 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a81r354 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a82r353 of DREG(1) has 1 avail. regs  1, node:  1 (confl regs =  0 2-51)
      Allocno a83r352 of CREG(1) has 1 avail. regs  2, node:  2 (confl regs =  0 1 3-51)
      Allocno a84r125 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a85r351 of DIREG(1) has 1 avail. regs  5, node:  5 (confl regs =  0-4 6-51)
      Allocno a86r348 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a87r346 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a88r344 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a89r342 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a90r337 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a91r332 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a92r328 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a93r325 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a94r322 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a95r320 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a96r315 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a97r311 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a98r307 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a99r304 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a100r301 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a345r152 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a356r197 of INT_SSE_REGS(31) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a357r200 of INT_SSE_REGS(31) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a364r281 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a372r417 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a373r418 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a380r411 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a381r199 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a382r410 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a396r394 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a397r392 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a398r393 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a399r390 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a402r387 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a404r384 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a405r382 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a516r280 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a517r229 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a520r222 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a521r223 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a522r427 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a523r425 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a524r426 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a569r461 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a570r247 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a571r463 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a573r460 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a574r458 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a575r457 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a576r456 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a577r452 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a578r261 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a579r454 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a581r451 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a582r449 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a583r448 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a584r447 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a585r443 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a586r274 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a587r445 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a589r442 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a590r440 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a591r439 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a592r438 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a600r231 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a601r232 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a603r429 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Pushing a579(r454,l1: a535(r454,l2: a425(r454,l3: a256(r454,l4))))(cost 0)
      Pushing a571(r463,l1: a527(r463,l2: a417(r463,l3: a248(r463,l4))))(cost 0)
      Pushing a584(r447,l1: a540(r447,l2: a430(r447,l3: a261(r447,l4))))(cost 0)
      Pushing a583(r448,l1: a539(r448,l2: a429(r448,l3: a260(r448,l4))))(cost 0)
      Pushing a582(r449,l1: a538(r449,l2: a428(r449,l3: a259(r449,l4))))(cost 0)
      Pushing a581(r451,l1: a537(r451,l2: a427(r451,l3: a258(r451,l4))))(cost 0)
      Pushing a576(r456,l1: a532(r456,l2: a422(r456,l3: a253(r456,l4))))(cost 0)
      Pushing a575(r457,l1: a531(r457,l2: a421(r457,l3: a252(r457,l4))))(cost 0)
      Pushing a574(r458,l1: a530(r458,l2: a420(r458,l3: a251(r458,l4))))(cost 0)
      Pushing a573(r460,l1: a529(r460,l2: a419(r460,l3: a250(r460,l4))))(cost 0)
      Pushing a577(r452,l1: a533(r452,l2: a423(r452,l3: a254(r452,l4))))(cost 0)
      Pushing a569(r461,l1: a525(r461,l2: a415(r461,l3: a246(r461,l4))))(cost 0)
      Pushing a578(r261,l1: a534(r261,l2: a424(r261,l3: a255(r261,l4))))(cost 0)
      Pushing a570(r247,l1: a526(r247,l2: a416(r247,l3: a247(r247,l4))))(cost 0)
      Pushing a587(r445,l1: a543(r445,l2: a433(r445,l3: a264(r445,l4))))(cost 0)
      Pushing a592(r438,l1: a548(r438,l2: a438(r438,l3: a269(r438,l4))))(cost 0)
      Pushing a591(r439,l1: a547(r439,l2: a437(r439,l3: a268(r439,l4))))(cost 0)
      Pushing a590(r440,l1: a546(r440,l2: a436(r440,l3: a267(r440,l4))))(cost 0)
      Pushing a589(r442,l1: a545(r442,l2: a435(r442,l3: a266(r442,l4))))(cost 0)
      Pushing a382(r410,l1: a163(r410,l2))(cost 0)
      Pushing a380(r411,l1: a161(r411,l2))(cost 0)
      Pushing a373(r418,l1: a154(r418,l2))(cost 0)
      Pushing a372(r417,l1: a153(r417,l2))(cost 0)
      Pushing a585(r443,l1: a541(r443,l2: a431(r443,l3: a262(r443,l4))))(cost 0)
      Pushing a586(r274,l1: a542(r274,l2: a432(r274,l3: a263(r274,l4))))(cost 0)
      Pushing a381(r199,l1: a162(r199,l2))(cost 0)
      Pushing a520(r222,l1: a410(r222,l2: a215(r222,l3)))(cost 0)
      Pushing a524(r426,l1: a414(r426,l2: a219(r426,l3)))(cost 0)
      Pushing a523(r425,l1: a413(r425,l2: a218(r425,l3)))(cost 0)
      Pushing a521(r223,l1: a411(r223,l2: a216(r223,l3)))(cost 0)
      Pushing a522(r427,l1: a412(r427,l2: a217(r427,l3)))(cost 0)
      Pushing a600(r231,l1: a556(r231,l2: a446(r231,l3: a277(r231,l4))))(cost 0)
      Pushing a517(r229,l1: a407(r229,l2: a212(r229,l3)))(cost 0)
      Pushing a601(r232,l1: a557(r232,l2: a447(r232,l3: a278(r232,l4))))(cost 0)
      Pushing a603(r429,l1: a559(r429,l2: a449(r429,l3: a280(r429,l4))))(cost 0)
      Pushing a398(r393,l1: a179(r393,l2))(cost 0)
      Pushing a396(r394,l1: a177(r394,l2))(cost 0)
      Pushing a399(r390,l1: a180(r390,l2))(cost 0)
      Pushing a397(r392,l1: a178(r392,l2))(cost 0)
      Pushing a59(r371,l1)(cost 0)
      Pushing a99(r304,l1)(cost 0)
      Pushing a98(r307,l1)(cost 0)
      Pushing a97(r311,l1)(cost 0)
      Pushing a96(r315,l1)(cost 0)
      Pushing a95(r320,l1)(cost 0)
      Pushing a94(r322,l1)(cost 0)
      Pushing a93(r325,l1)(cost 0)
      Pushing a92(r328,l1)(cost 0)
      Pushing a91(r332,l1)(cost 0)
      Pushing a90(r337,l1)(cost 0)
      Pushing a89(r342,l1)(cost 0)
      Pushing a88(r344,l1)(cost 0)
      Pushing a87(r346,l1)(cost 0)
      Pushing a86(r348,l1)(cost 0)
      Pushing a84(r125,l1)(cost 0)
      Pushing a77(r132,l1)(cost 0)
      Pushing a69(r139,l1)(cost 0)
      Pushing a85(r351,l1)(cost 0)
      Pushing a83(r352,l1)(cost 0)
      Pushing a82(r353,l1)(cost 0)
      Pushing a81(r354,l1)(cost 0)
      Pushing a80(r356,l1)(cost 0)
      Pushing a78(r357,l1)(cost 0)
      Pushing a76(r358,l1)(cost 0)
      Pushing a75(r359,l1)(cost 0)
      Pushing a74(r360,l1)(cost 0)
      Pushing a73(r362,l1)(cost 0)
      Pushing a71(r363,l1)(cost 0)
      Pushing a68(r364,l1)(cost 0)
      Pushing a67(r365,l1)(cost 0)
      Pushing a66(r366,l1)(cost 0)
      Pushing a65(r368,l1)(cost 0)
      Pushing a63(r369,l1)(cost 0)
      Pushing a62(r370,l1)(cost 0)
      Pushing a402(r387,l1: a183(r387,l2))(cost 0)
      Pushing a100(r301,l1)(cost 0)
      Pushing a405(r382,l1: a186(r382,l2))(cost 0)
      Pushing a404(r384,l1: a185(r384,l2))(cost 0)
      Pushing a35(r244,l1)(potential spill: pri=0, cost=171)
      Pushing a36(r257,l1)(potential spill: pri=0, cost=171)
      Pushing a37(r270,l1)(potential spill: pri=0, cost=171)
      Pushing a43(r499,l1)(potential spill: pri=0, cost=327)
      Pushing a44(r498,l1)(potential spill: pri=0, cost=327)
      Pushing a42(r500,l1)(potential spill: pri=0, cost=333)
      Pushing a50(r115,l1)(potential spill: pri=3, cost=1800)
      Pushing a34(r84,l1)(potential spill: pri=4, cost=2592)
      Pushing a357(r200,l1: a138(r200,l2))(potential spill: pri=6, cost=6)
      Pushing a356(r197,l1: a137(r197,l2))(potential spill: pri=7, cost=7)
      Pushing a46(r163,l1)(potential spill: pri=7, cost=3054)
      Pushing a49(r101,l1)(potential spill: pri=9, cost=5416)
        Making a345(r152,l1: a126(r152,l2)) colorable
      Pushing a345(r152,l1: a126(r152,l2))(cost 11468)
      Pushing a48(r85,l1)(potential spill: pri=10, cost=6216)
        Making a45(r282,l1) colorable
        Making a364(r281,l1: a145(r281,l2)) colorable
        Making a516(r280,l1: a406(r280,l2: a211(r280,l3))) colorable
      Pushing a364(r281,l1: a145(r281,l2))(cost 257)
      Pushing a516(r280,l1: a406(r280,l2: a211(r280,l3)))(cost 595)
      Pushing a45(r282,l1)(cost 11244)
      Pushing a30(r63,l1)(potential spill: pri=21, cost=12345)
      Pushing a47(r302,l1)(potential spill: pri=22, cost=3351)
      Pushing a64(r350,l1)(potential spill: pri=24, cost=3108)
        Making a38(r292,l1) colorable
        Making a70(r87,l1) colorable
        Making a61(r349,l1) colorable
        Making a72(r336,l1) colorable
        Making a79(r319,l1) colorable
      Pushing a79(r319,l1)(cost 4440)
      Pushing a72(r336,l1)(cost 4440)
      Pushing a61(r349,l1)(cost 6484)
      Pushing a70(r87,l1)(cost 11544)
      Pushing a38(r292,l1)(cost 106056)
      Popping a38(r292,l1)  -- assign reg 43
      Popping a70(r87,l1)  -- assign reg 3
      Popping a61(r349,l1)  -- assign reg 41
      Popping a72(r336,l1)  -- assign reg 42
      Popping a79(r319,l1)  -- assign reg 44
      Popping a64(r350,l1)  -- spill
      Popping a47(r302,l1)  -- spill
      Popping a30(r63,l1)  -- spill
      Popping a45(r282,l1)  -- assign reg 3
      Popping a516(r280,l1: a406(r280,l2: a211(r280,l3)))  -- assign reg 41
      Popping a364(r281,l1: a145(r281,l2))  -- assign reg 42
      Popping a48(r85,l1)  -- spill
      Popping a345(r152,l1: a126(r152,l2))  -- assign reg 41
      Popping a49(r101,l1)  -- spill
      Popping a46(r163,l1)  -- assign reg 44
      Popping a356(r197,l1: a137(r197,l2))  -- assign reg 42
      Popping a357(r200,l1: a138(r200,l2))  -- spill
      Popping a34(r84,l1)  -- spill
      Popping a50(r115,l1)  -- spill
      Popping a42(r500,l1)  -- spill
      Popping a44(r498,l1)  -- spill
      Popping a43(r499,l1)  -- spill
      Popping a37(r270,l1)  -- spill
      Popping a36(r257,l1)  -- spill
      Popping a35(r244,l1)  -- spill
      Popping a404(r384,l1: a185(r384,l2))  -- assign reg 0
      Popping a405(r382,l1: a186(r382,l2))  -- assign reg 0
      Popping a100(r301,l1)  -- assign reg 0
      Popping a402(r387,l1: a183(r387,l2))  -- assign reg 0
      Popping a62(r370,l1)  -- assign reg 5
      Popping a63(r369,l1)  -- assign reg 5
      Popping a65(r368,l1)  -- assign reg 2
      Popping a66(r366,l1)  -- assign reg 5
      Popping a67(r365,l1)  -- assign reg 1
      Popping a68(r364,l1)  -- assign reg 2
      Popping a71(r363,l1)  -- assign reg 5
      Popping a73(r362,l1)  -- assign reg 2
      Popping a74(r360,l1)  -- assign reg 5
      Popping a75(r359,l1)  -- assign reg 1
      Popping a76(r358,l1)  -- assign reg 2
      Popping a78(r357,l1)  -- assign reg 5
      Popping a80(r356,l1)  -- assign reg 2
      Popping a81(r354,l1)  -- assign reg 5
      Popping a82(r353,l1)  -- assign reg 1
      Popping a83(r352,l1)  -- assign reg 2
      Popping a85(r351,l1)  -- assign reg 5
      Popping a69(r139,l1)  -- assign reg 0
      Popping a77(r132,l1)  -- assign reg 0
      Popping a84(r125,l1)  -- assign reg 0
      Popping a86(r348,l1)  -- assign reg 41
      Popping a87(r346,l1)  -- assign reg 0
      Popping a88(r344,l1)  -- assign reg 0
      Popping a89(r342,l1)  -- assign reg 0
      Popping a90(r337,l1)  -- assign reg 0
      Popping a91(r332,l1)  -- assign reg 0
      Popping a92(r328,l1)  -- assign reg 0
      Popping a93(r325,l1)  -- assign reg 0
      Popping a94(r322,l1)  -- assign reg 0
      Popping a95(r320,l1)  -- assign reg 1
      Popping a96(r315,l1)  -- assign reg 0
      Popping a97(r311,l1)  -- assign reg 0
      Popping a98(r307,l1)  -- assign reg 0
      Popping a99(r304,l1)  -- assign reg 0
      Popping a59(r371,l1)  -- assign reg 0
      Popping a397(r392,l1: a178(r392,l2))  -- assign reg 0
      Popping a399(r390,l1: a180(r390,l2))  -- assign reg 1
      Popping a396(r394,l1: a177(r394,l2))  -- assign reg 1
      Popping a398(r393,l1: a179(r393,l2))  -- assign reg 1
      Popping a603(r429,l1: a559(r429,l2: a449(r429,l3: a280(r429,l4))))  -- assign reg 0
      Popping a601(r232,l1: a557(r232,l2: a447(r232,l3: a278(r232,l4))))  -- assign reg 1
      Popping a517(r229,l1: a407(r229,l2: a212(r229,l3)))  -- assign reg 2
      Popping a600(r231,l1: a556(r231,l2: a446(r231,l3: a277(r231,l4))))  -- assign reg 4
      Popping a522(r427,l1: a412(r427,l2: a217(r427,l3)))  -- assign reg 0
      Popping a521(r223,l1: a411(r223,l2: a216(r223,l3)))  -- assign reg 1
      Popping a523(r425,l1: a413(r425,l2: a218(r425,l3)))  -- assign reg 0
      Popping a524(r426,l1: a414(r426,l2: a219(r426,l3)))  -- assign reg 1
      Popping a520(r222,l1: a410(r222,l2: a215(r222,l3)))  -- assign reg 2
      Popping a381(r199,l1: a162(r199,l2))  -- assign reg 0
      Popping a586(r274,l1: a542(r274,l2: a432(r274,l3: a263(r274,l4))))  -- assign reg 5
      Popping a585(r443,l1: a541(r443,l2: a431(r443,l3: a262(r443,l4))))  -- assign reg 0
      Popping a372(r417,l1: a153(r417,l2))  -- assign reg 0
      Popping a373(r418,l1: a154(r418,l2))  -- assign reg 1
      Popping a380(r411,l1: a161(r411,l2))  -- assign reg 1
      Popping a382(r410,l1: a163(r410,l2))  -- assign reg 1
      Popping a589(r442,l1: a545(r442,l2: a435(r442,l3: a266(r442,l4))))  -- assign reg 0
      Popping a590(r440,l1: a546(r440,l2: a436(r440,l3: a267(r440,l4))))  -- assign reg 0
      Popping a591(r439,l1: a547(r439,l2: a437(r439,l3: a268(r439,l4))))  -- assign reg 0
      Popping a592(r438,l1: a548(r438,l2: a438(r438,l3: a269(r438,l4))))  -- assign reg 0
      Popping a587(r445,l1: a543(r445,l2: a433(r445,l3: a264(r445,l4))))  -- assign reg 21
      Popping a570(r247,l1: a526(r247,l2: a416(r247,l3: a247(r247,l4))))  -- assign reg 5
      Popping a578(r261,l1: a534(r261,l2: a424(r261,l3: a255(r261,l4))))  -- assign reg 5
      Popping a569(r461,l1: a525(r461,l2: a415(r461,l3: a246(r461,l4))))  -- assign reg 0
      Popping a577(r452,l1: a533(r452,l2: a423(r452,l3: a254(r452,l4))))  -- assign reg 0
      Popping a573(r460,l1: a529(r460,l2: a419(r460,l3: a250(r460,l4))))  -- assign reg 0
      Popping a574(r458,l1: a530(r458,l2: a420(r458,l3: a251(r458,l4))))  -- assign reg 0
      Popping a575(r457,l1: a531(r457,l2: a421(r457,l3: a252(r457,l4))))  -- assign reg 0
      Popping a576(r456,l1: a532(r456,l2: a422(r456,l3: a253(r456,l4))))  -- assign reg 0
      Popping a581(r451,l1: a537(r451,l2: a427(r451,l3: a258(r451,l4))))  -- assign reg 0
      Popping a582(r449,l1: a538(r449,l2: a428(r449,l3: a259(r449,l4))))  -- assign reg 0
      Popping a583(r448,l1: a539(r448,l2: a429(r448,l3: a260(r448,l4))))  -- assign reg 0
      Popping a584(r447,l1: a540(r447,l2: a430(r447,l3: a261(r447,l4))))  -- assign reg 0
      Popping a571(r463,l1: a527(r463,l2: a417(r463,l3: a248(r463,l4))))  -- assign reg 21
      Popping a579(r454,l1: a535(r454,l2: a425(r454,l3: a256(r454,l4))))  -- assign reg 21
Spilling a72r336 for a30r63
Spilling a364r281 for a30r63
Spilling a356r197 for a30r63
Assigning 42 to a30r63
       a356(r197,l1: a137(r197,l2))  -- assign memory
       a364(r281,l1: a145(r281,l2))  -- assign memory
       a72(r336,l1)  -- assign memory

  Loop 2 (parent 1, header bb17, depth 2)
    bbs: 53 52 51 50 49 33 30(->31:l3) 29 28 27 26 25 24 23 22 21 20 18(->19:l1) 17
    all: 101r63 102r64 103r66 104r68 105r84 106r85 107r101 108r115 109r163 110r244 111r257 112r270 113r282 114r292 115r498 116r499 117r500 118r501 119r502 120r503 121r481 122r480 123r479 124r291 125r290 126r152 127r475 128r478 129r477 130r476 131r472 132r471 133r473 134r469 135r470 136r186 137r197 138r200 139r209 140r214 141r467 142r468 143r465 144r466 145r281 146r202 147r424 148r422 149r423 150r420 151r421 152r419 153r417 154r418 155r415 156r208 157r416 158r414 159r412 160r413 161r411 162r199 163r410 164r179 165r408 166r406 167r404 168r407 169r166 170r400 171r401 172r398 173r175 174r399 175r397 176r395 177r394 178r392 179r393 180r390 181r164 182r389 183r387 184r385 185r384 186r382 406r280 407r229 408r220 409r428 410r222 411r223 412r427 413r425 414r426 525r461 526r247 527r463 528r508 529r460 530r458 531r457 532r456 533r452 534r261 535r454 536r507 537r451 538r449 539r448 540r447 541r443 542r274 543r445 544r506 545r442 546r440 547r439 548r438 549r436 550r437 551r434 552r435 553r432 554r433 555r431 556r231 557r232 558r430 559r429
    modified regnos: 152 164 166 175 179 186 197 199 200 202 208 209 214 220 222 223 229 231 232 247 261 274 280 281 282 290 291 382 384 385 387 389 390 392 393 394 395 397 398 399 400 401 404 406 407 408 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 442 443 445 447 448 449 451 452 454 456 457 458 460 461 463 465 466 467 468 469 470 471 472 473 475 476 477 478 479 480 481 506 507 508
    border: 101r63 102r64 103r66 104r68 105r84 106r85 107r101 108r115 109r163 110r244 111r257 112r270 113r282 114r292 115r498 116r499 117r500 118r501 119r502 120r503
    Pressure: GENERAL_REGS=23 SSE_REGS=7
    Hard reg set forest:
      0:( 0-5 8-15 21-51)@0
        1:( 0-5 21 23-28 37-51)@280
          2:( 0-5 37-44)@51728
            3:( 0-4 37-44)@80
              4:( 3 41-44)@75710
      Spill a102(r64,l2)
      Spill a103(r66,l2)
      Spill a104(r68,l2)
      Spill a105(r84,l2)
      Spill a106(r85,l2)
      Spill a108(r115,l2)
      Spill a110(r244,l2)
      Spill a111(r257,l2)
      Spill a112(r270,l2)
      Spill a115(r498,l2)
      Spill a116(r499,l2)
      Spill a117(r500,l2)
      Allocno a101r63 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a107r101 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a109r163 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a113r282 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a114r292 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a126r152 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a137r197 of INT_SSE_REGS(31) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a138r200 of INT_SSE_REGS(31) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a145r281 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a153r417 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a154r418 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a161r411 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a162r199 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a163r410 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a177r394 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a178r392 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a179r393 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a180r390 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a183r387 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a185r384 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a186r382 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a406r280 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a407r229 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a410r222 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a411r223 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a412r427 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a413r425 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a414r426 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a525r461 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a526r247 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a527r463 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a529r460 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a530r458 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a531r457 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a532r456 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a533r452 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a534r261 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a535r454 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a537r451 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a538r449 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a539r448 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a540r447 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a541r443 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a542r274 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a543r445 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a545r442 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a546r440 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a547r439 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a548r438 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a556r231 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a557r232 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a559r429 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Pushing a535(r454,l2: a425(r454,l3: a256(r454,l4)))(cost 0)
      Pushing a527(r463,l2: a417(r463,l3: a248(r463,l4)))(cost 0)
      Pushing a540(r447,l2: a430(r447,l3: a261(r447,l4)))(cost 0)
      Pushing a539(r448,l2: a429(r448,l3: a260(r448,l4)))(cost 0)
      Pushing a538(r449,l2: a428(r449,l3: a259(r449,l4)))(cost 0)
      Pushing a537(r451,l2: a427(r451,l3: a258(r451,l4)))(cost 0)
      Pushing a532(r456,l2: a422(r456,l3: a253(r456,l4)))(cost 0)
      Pushing a531(r457,l2: a421(r457,l3: a252(r457,l4)))(cost 0)
      Pushing a530(r458,l2: a420(r458,l3: a251(r458,l4)))(cost 0)
      Pushing a529(r460,l2: a419(r460,l3: a250(r460,l4)))(cost 0)
      Pushing a533(r452,l2: a423(r452,l3: a254(r452,l4)))(cost 0)
      Pushing a525(r461,l2: a415(r461,l3: a246(r461,l4)))(cost 0)
      Pushing a534(r261,l2: a424(r261,l3: a255(r261,l4)))(cost 0)
      Pushing a526(r247,l2: a416(r247,l3: a247(r247,l4)))(cost 0)
      Pushing a543(r445,l2: a433(r445,l3: a264(r445,l4)))(cost 0)
      Pushing a548(r438,l2: a438(r438,l3: a269(r438,l4)))(cost 0)
      Pushing a547(r439,l2: a437(r439,l3: a268(r439,l4)))(cost 0)
      Pushing a546(r440,l2: a436(r440,l3: a267(r440,l4)))(cost 0)
      Pushing a545(r442,l2: a435(r442,l3: a266(r442,l4)))(cost 0)
      Pushing a163(r410,l2)(cost 0)
      Pushing a161(r411,l2)(cost 0)
      Pushing a154(r418,l2)(cost 0)
      Pushing a153(r417,l2)(cost 0)
      Pushing a541(r443,l2: a431(r443,l3: a262(r443,l4)))(cost 0)
      Pushing a542(r274,l2: a432(r274,l3: a263(r274,l4)))(cost 0)
      Pushing a162(r199,l2)(cost 0)
      Pushing a410(r222,l2: a215(r222,l3))(cost 0)
      Pushing a414(r426,l2: a219(r426,l3))(cost 0)
      Pushing a413(r425,l2: a218(r425,l3))(cost 0)
      Pushing a411(r223,l2: a216(r223,l3))(cost 0)
      Pushing a412(r427,l2: a217(r427,l3))(cost 0)
      Pushing a556(r231,l2: a446(r231,l3: a277(r231,l4)))(cost 0)
      Pushing a407(r229,l2: a212(r229,l3))(cost 0)
      Pushing a557(r232,l2: a447(r232,l3: a278(r232,l4)))(cost 0)
      Pushing a559(r429,l2: a449(r429,l3: a280(r429,l4)))(cost 0)
      Pushing a179(r393,l2)(cost 0)
      Pushing a177(r394,l2)(cost 0)
      Pushing a180(r390,l2)(cost 0)
      Pushing a178(r392,l2)(cost 0)
      Pushing a183(r387,l2)(cost 0)
      Pushing a186(r382,l2)(cost 0)
      Pushing a185(r384,l2)(cost 0)
      Pushing a138(r200,l2)(potential spill: pri=0, cost=6)
      Pushing a137(r197,l2)(potential spill: pri=0, cost=7)
      Pushing a145(r281,l2)(potential spill: pri=1, cost=257)
      Pushing a101(r63,l2)(potential spill: pri=3, cost=1296)
        Making a126(r152,l2) colorable
        Making a406(r280,l2: a211(r280,l3)) colorable
      Pushing a406(r280,l2: a211(r280,l3))(cost 595)
        Making a107(r101,l2) colorable
        Making a109(r163,l2) colorable
        Making a113(r282,l2) colorable
        Making a114(r292,l2) colorable
      Pushing a109(r163,l2)(cost 3386)
      Pushing a107(r101,l2)(cost 2984)
      Pushing a114(r292,l2)(cost 9528)
      Pushing a126(r152,l2)(cost 11468)
      Pushing a113(r282,l2)(cost 11576)
      Popping a113(r282,l2)  -- assign reg 3
      Popping a126(r152,l2)  -- assign reg 41
      Popping a114(r292,l2)  -- assign reg 43
      Popping a107(r101,l2)  -- assign reg 42
      Popping a109(r163,l2)  -- assign reg 44
      Popping a406(r280,l2: a211(r280,l3))  -- assign reg 41
      Popping a101(r63,l2)  -- spill
      Popping a145(r281,l2)  -- spill
      Popping a137(r197,l2)  -- spill
      Popping a138(r200,l2)  -- spill
      Popping a185(r384,l2)  -- assign reg 0
      Popping a186(r382,l2)  -- assign reg 0
      Popping a183(r387,l2)  -- assign reg 0
      Popping a178(r392,l2)  -- assign reg 0
      Popping a180(r390,l2)  -- assign reg 1
      Popping a177(r394,l2)  -- assign reg 1
      Popping a179(r393,l2)  -- assign reg 1
      Popping a559(r429,l2: a449(r429,l3: a280(r429,l4)))  -- assign reg 0
      Popping a557(r232,l2: a447(r232,l3: a278(r232,l4)))  -- assign reg 1
      Popping a407(r229,l2: a212(r229,l3))  -- assign reg 2
      Popping a556(r231,l2: a446(r231,l3: a277(r231,l4)))  -- assign reg 4
      Popping a412(r427,l2: a217(r427,l3))  -- assign reg 0
      Popping a411(r223,l2: a216(r223,l3))  -- assign reg 1
      Popping a413(r425,l2: a218(r425,l3))  -- assign reg 0
      Popping a414(r426,l2: a219(r426,l3))  -- assign reg 1
      Popping a410(r222,l2: a215(r222,l3))  -- assign reg 2
      Popping a162(r199,l2)  -- assign reg 0
      Popping a542(r274,l2: a432(r274,l3: a263(r274,l4)))  -- assign reg 5
      Popping a541(r443,l2: a431(r443,l3: a262(r443,l4)))  -- assign reg 0
      Popping a153(r417,l2)  -- assign reg 0
      Popping a154(r418,l2)  -- assign reg 1
      Popping a161(r411,l2)  -- assign reg 1
      Popping a163(r410,l2)  -- assign reg 1
      Popping a545(r442,l2: a435(r442,l3: a266(r442,l4)))  -- assign reg 0
      Popping a546(r440,l2: a436(r440,l3: a267(r440,l4)))  -- assign reg 0
      Popping a547(r439,l2: a437(r439,l3: a268(r439,l4)))  -- assign reg 0
      Popping a548(r438,l2: a438(r438,l3: a269(r438,l4)))  -- assign reg 0
      Popping a543(r445,l2: a433(r445,l3: a264(r445,l4)))  -- assign reg 21
      Popping a526(r247,l2: a416(r247,l3: a247(r247,l4)))  -- assign reg 5
      Popping a534(r261,l2: a424(r261,l3: a255(r261,l4)))  -- assign reg 5
      Popping a525(r461,l2: a415(r461,l3: a246(r461,l4)))  -- assign reg 0
      Popping a533(r452,l2: a423(r452,l3: a254(r452,l4)))  -- assign reg 0
      Popping a529(r460,l2: a419(r460,l3: a250(r460,l4)))  -- assign reg 0
      Popping a530(r458,l2: a420(r458,l3: a251(r458,l4)))  -- assign reg 0
      Popping a531(r457,l2: a421(r457,l3: a252(r457,l4)))  -- assign reg 0
      Popping a532(r456,l2: a422(r456,l3: a253(r456,l4)))  -- assign reg 0
      Popping a537(r451,l2: a427(r451,l3: a258(r451,l4)))  -- assign reg 0
      Popping a538(r449,l2: a428(r449,l3: a259(r449,l4)))  -- assign reg 0
      Popping a539(r448,l2: a429(r448,l3: a260(r448,l4)))  -- assign reg 0
      Popping a540(r447,l2: a430(r447,l3: a261(r447,l4)))  -- assign reg 0
      Popping a527(r463,l2: a417(r463,l3: a248(r463,l4)))  -- assign reg 21
      Popping a535(r454,l2: a425(r454,l3: a256(r454,l4)))  -- assign reg 21

  Loop 3 (parent 2, header bb31, depth 3)
    bbs: 39 36(->37:l4) 35 34 32(->33:l2) 31
    all: 187r63 188r64 189r66 190r68 191r84 192r85 193r101 194r115 195r163 196r202 197r209 198r214 199r244 200r257 201r270 202r281 203r282 204r292 205r498 206r499 207r500 208r501 209r502 210r503 211r280 212r229 213r220 214r428 215r222 216r223 217r427 218r425 219r426 415r461 416r247 417r463 418r508 419r460 420r458 421r457 422r456 423r452 424r261 425r454 426r507 427r451 428r449 429r448 430r447 431r443 432r274 433r445 434r506 435r442 436r440 437r439 438r438 439r436 440r437 441r434 442r435 443r432 444r433 445r431 446r231 447r232 448r430 449r429
    modified regnos: 220 222 223 229 231 232 247 261 274 280 281 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 442 443 445 447 448 449 451 452 454 456 457 458 460 461 463 506 507 508
    border: 187r63 188r64 189r66 190r68 191r84 192r85 193r101 194r115 195r163 196r202 197r209 198r214 199r244 200r257 201r270 202r281 203r282 204r292 205r498 206r499 207r500 208r501 209r502 210r503
    Pressure: GENERAL_REGS=23 SSE_REGS=7
    Hard reg set forest:
      0:( 0-5 8-15 21-51)@0
        1:( 0-5 21 23-28 37-51)@280
          2:( 0-5 37-44)@4772
            3:( 0-4 37-44)@80
              4:( 3 41-44)@4098
      Spill a187(r63,l3)
      Spill a188(r64,l3)
      Spill a189(r66,l3)
      Spill a191(r84,l3)
      Spill a192(r85,l3)
      Spill a194(r115,l3)
      Spill a199(r244,l3)
      Spill a200(r257,l3)
      Spill a201(r270,l3)
      Spill a205(r498,l3)
      Spill a206(r499,l3)
      Allocno a190r68 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a193r101 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a195r163 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a202r281 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a203r282 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a204r292 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a207r500 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a211r280 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a212r229 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a215r222 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a216r223 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a217r427 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a218r425 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a219r426 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a415r461 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a416r247 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a417r463 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a419r460 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a420r458 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a421r457 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a422r456 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a423r452 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a424r261 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a425r454 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a427r451 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a428r449 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a429r448 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a430r447 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a431r443 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a432r274 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a433r445 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a435r442 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a436r440 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a437r439 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a438r438 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a446r231 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a447r232 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a449r429 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Pushing a425(r454,l3: a256(r454,l4))(cost 0)
      Pushing a417(r463,l3: a248(r463,l4))(cost 0)
      Pushing a430(r447,l3: a261(r447,l4))(cost 0)
      Pushing a429(r448,l3: a260(r448,l4))(cost 0)
      Pushing a428(r449,l3: a259(r449,l4))(cost 0)
      Pushing a427(r451,l3: a258(r451,l4))(cost 0)
      Pushing a422(r456,l3: a253(r456,l4))(cost 0)
      Pushing a421(r457,l3: a252(r457,l4))(cost 0)
      Pushing a420(r458,l3: a251(r458,l4))(cost 0)
      Pushing a419(r460,l3: a250(r460,l4))(cost 0)
      Pushing a423(r452,l3: a254(r452,l4))(cost 0)
      Pushing a415(r461,l3: a246(r461,l4))(cost 0)
      Pushing a424(r261,l3: a255(r261,l4))(cost 0)
      Pushing a416(r247,l3: a247(r247,l4))(cost 0)
      Pushing a433(r445,l3: a264(r445,l4))(cost 0)
      Pushing a438(r438,l3: a269(r438,l4))(cost 0)
      Pushing a437(r439,l3: a268(r439,l4))(cost 0)
      Pushing a436(r440,l3: a267(r440,l4))(cost 0)
      Pushing a435(r442,l3: a266(r442,l4))(cost 0)
      Pushing a431(r443,l3: a262(r443,l4))(cost 0)
      Pushing a432(r274,l3: a263(r274,l4))(cost 0)
      Pushing a215(r222,l3)(cost 0)
      Pushing a219(r426,l3)(cost 0)
      Pushing a218(r425,l3)(cost 0)
      Pushing a216(r223,l3)(cost 0)
      Pushing a217(r427,l3)(cost 0)
      Pushing a446(r231,l3: a277(r231,l4))(cost 0)
      Pushing a212(r229,l3)(cost 0)
      Pushing a447(r232,l3: a278(r232,l4))(cost 0)
      Pushing a449(r429,l3: a280(r429,l4))(cost 0)
      Pushing a207(r500,l3)(potential spill: pri=0, cost=-7)
      Pushing a190(r68,l3)(potential spill: pri=0, cost=-4)
      Pushing a193(r101,l3)(potential spill: pri=0, cost=16)
        Making a195(r163,l3) colorable
        Making a202(r281,l3) colorable
        Making a203(r282,l3) colorable
        Making a204(r292,l3) colorable
        Making a211(r280,l3) colorable
      Pushing a203(r282,l3)(cost 16)
      Pushing a195(r163,l3)(cost 16)
      Pushing a202(r281,l3)(cost 237)
      Pushing a211(r280,l3)(cost 595)
      Pushing a204(r292,l3)(cost 1196)
      Popping a204(r292,l3)  -- assign reg 43
      Popping a211(r280,l3)  -- assign reg 41
      Popping a202(r281,l3)  -- assign reg 42
      Popping a195(r163,l3)  -- assign reg 44
      Popping a203(r282,l3)  -- assign reg 3
      Popping a193(r101,l3)  -- spill
      Popping a190(r68,l3)  -- spill
      Popping a207(r500,l3)  -- spill
      Popping a449(r429,l3: a280(r429,l4))  -- assign reg 0
      Popping a447(r232,l3: a278(r232,l4))  -- assign reg 1
      Popping a212(r229,l3)  -- assign reg 2
      Popping a446(r231,l3: a277(r231,l4))  -- assign reg 4
      Popping a217(r427,l3)  -- assign reg 0
      Popping a216(r223,l3)  -- assign reg 1
      Popping a218(r425,l3)  -- assign reg 0
      Popping a219(r426,l3)  -- assign reg 1
      Popping a215(r222,l3)  -- assign reg 2
      Popping a432(r274,l3: a263(r274,l4))  -- assign reg 5
      Popping a431(r443,l3: a262(r443,l4))  -- assign reg 0
      Popping a435(r442,l3: a266(r442,l4))  -- assign reg 0
      Popping a436(r440,l3: a267(r440,l4))  -- assign reg 0
      Popping a437(r439,l3: a268(r439,l4))  -- assign reg 0
      Popping a438(r438,l3: a269(r438,l4))  -- assign reg 0
      Popping a433(r445,l3: a264(r445,l4))  -- assign reg 21
      Popping a416(r247,l3: a247(r247,l4))  -- assign reg 5
      Popping a424(r261,l3: a255(r261,l4))  -- assign reg 5
      Popping a415(r461,l3: a246(r461,l4))  -- assign reg 0
      Popping a423(r452,l3: a254(r452,l4))  -- assign reg 0
      Popping a419(r460,l3: a250(r460,l4))  -- assign reg 0
      Popping a420(r458,l3: a251(r458,l4))  -- assign reg 0
      Popping a421(r457,l3: a252(r457,l4))  -- assign reg 0
      Popping a422(r456,l3: a253(r456,l4))  -- assign reg 0
      Popping a427(r451,l3: a258(r451,l4))  -- assign reg 0
      Popping a428(r449,l3: a259(r449,l4))  -- assign reg 0
      Popping a429(r448,l3: a260(r448,l4))  -- assign reg 0
      Popping a430(r447,l3: a261(r447,l4))  -- assign reg 0
      Popping a417(r463,l3: a248(r463,l4))  -- assign reg 21
      Popping a425(r454,l3: a256(r454,l4))  -- assign reg 21

  Loop 4 (parent 3, header bb37, depth 4)
    bbs: 48 47 46 45 44 43 42 41 40 38(->39:l3) 37
    all: 220r63 221r64 222r66 223r68 224r84 225r85 226r101 227r115 228r163 229r202 230r209 231r214 232r229 233r244 234r257 235r270 236r280 237r281 238r282 239r292 240r498 241r499 242r500 243r501 244r502 245r503 246r461 247r247 248r463 249r508 250r460 251r458 252r457 253r456 254r452 255r261 256r454 257r507 258r451 259r449 260r448 261r447 262r443 263r274 264r445 265r506 266r442 267r440 268r439 269r438 270r436 271r437 272r434 273r435 274r432 275r433 276r431 277r231 278r232 279r430 280r429
    modified regnos: 229 231 232 247 261 274 280 429 430 431 432 433 434 435 436 437 438 439 440 442 443 445 447 448 449 451 452 454 456 457 458 460 461 463 506 507 508
    border: 220r63 221r64 222r66 223r68 224r84 225r85 226r101 227r115 228r163 229r202 230r209 231r214 232r229 233r244 234r257 235r270 236r280 237r281 238r282 239r292 240r498 241r499 242r500 243r501 244r502 245r503
    Pressure: GENERAL_REGS=23 SSE_REGS=7
    Hard reg set forest:
      0:( 0-5 8-15 21-51)@0
        1:( 0-5 21 23-28 37-51)@280
          2:( 0-5 37-44)@3700
            3:( 0-4 37-44)@80
              4:( 3 41-44)@2660
      Spill a220(r63,l4)
      Spill a221(r64,l4)
      Spill a222(r66,l4)
      Spill a223(r68,l4)
      Spill a224(r84,l4)
      Spill a225(r85,l4)
      Spill a226(r101,l4)
      Spill a227(r115,l4)
      Spill a233(r244,l4)
      Spill a234(r257,l4)
      Spill a235(r270,l4)
      Spill a240(r498,l4)
      Spill a241(r499,l4)
      Spill a242(r500,l4)
      Allocno a228r163 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a232r229 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a236r280 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a237r281 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a238r282 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a239r292 of GENERAL_REGS(15) has 5 avail. regs  3 41-44, node:  3 41-44 (confl regs =  0-2 4-40 45-51)
      Allocno a246r461 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a247r247 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a248r463 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a250r460 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a251r458 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a252r457 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a253r456 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a254r452 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a255r261 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a256r454 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a258r451 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a259r449 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a260r448 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a261r447 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a262r443 of GENERAL_REGS(15) has 13 avail. regs  0-4 37-44, node:  0-4 37-44 (confl regs =  5-36 45-51)
      Allocno a263r274 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a264r445 of INT_SSE_REGS(31) has 29 avail. regs  0-5 21 23-28 37-51, node:  0-5 21 23-28 37-51 (confl regs =  6-20 22 29-36)
      Allocno a266r442 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a267r440 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a268r439 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a269r438 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a277r231 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a278r232 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Allocno a280r429 of GENERAL_REGS(15) has 14 avail. regs  0-5 37-44, node:  0-5 37-44 (confl regs =  6-36 45-51)
      Pushing a256(r454,l4)(cost 0)
      Pushing a248(r463,l4)(cost 0)
      Pushing a261(r447,l4)(cost 0)
      Pushing a260(r448,l4)(cost 0)
      Pushing a259(r449,l4)(cost 0)
      Pushing a258(r451,l4)(cost 0)
      Pushing a253(r456,l4)(cost 0)
      Pushing a252(r457,l4)(cost 0)
      Pushing a251(r458,l4)(cost 0)
      Pushing a250(r460,l4)(cost 0)
      Pushing a254(r452,l4)(cost 0)
      Pushing a246(r461,l4)(cost 0)
      Pushing a255(r261,l4)(cost 0)
      Pushing a247(r247,l4)(cost 0)
      Pushing a264(r445,l4)(cost 0)
      Pushing a269(r438,l4)(cost 0)
      Pushing a268(r439,l4)(cost 0)
      Pushing a267(r440,l4)(cost 0)
      Pushing a266(r442,l4)(cost 0)
      Pushing a262(r443,l4)(cost 0)
      Pushing a263(r274,l4)(cost 0)
      Pushing a277(r231,l4)(cost 0)
      Pushing a232(r229,l4)(cost 0)
      Pushing a278(r232,l4)(cost 0)
      Pushing a280(r429,l4)(cost 0)
        Making a228(r163,l4) colorable
        Making a236(r280,l4) colorable
        Making a237(r281,l4) colorable
        Making a238(r282,l4) colorable
        Making a239(r292,l4) colorable
      Pushing a238(r282,l4)(cost 64)
      Pushing a228(r163,l4)(cost 64)
      Pushing a237(r281,l4)(cost 83)
      Pushing a239(r292,l4)(cost 796)
      Pushing a236(r280,l4)(cost 619)
      Popping a236(r280,l4)  -- assign reg 41
      Popping a239(r292,l4)  -- assign reg 43
      Popping a237(r281,l4)  -- assign reg 42
      Popping a228(r163,l4)  -- assign reg 44
      Popping a238(r282,l4)  -- assign reg 3
      Popping a280(r429,l4)  -- assign reg 0
      Popping a278(r232,l4)  -- assign reg 1
      Popping a232(r229,l4)  -- assign reg 2
      Popping a277(r231,l4)  -- assign reg 4
      Popping a263(r274,l4)  -- assign reg 5
      Popping a262(r443,l4)  -- assign reg 0
      Popping a266(r442,l4)  -- assign reg 0
      Popping a267(r440,l4)  -- assign reg 0
      Popping a268(r439,l4)  -- assign reg 0
      Popping a269(r438,l4)  -- assign reg 0
      Popping a264(r445,l4)  -- assign reg 21
      Popping a247(r247,l4)  -- assign reg 5
      Popping a255(r261,l4)  -- assign reg 5
      Popping a246(r461,l4)  -- assign reg 0
      Popping a254(r452,l4)  -- assign reg 0
      Popping a250(r460,l4)  -- assign reg 0
      Popping a251(r458,l4)  -- assign reg 0
      Popping a252(r457,l4)  -- assign reg 0
      Popping a253(r456,l4)  -- assign reg 0
      Popping a258(r451,l4)  -- assign reg 0
      Popping a259(r449,l4)  -- assign reg 0
      Popping a260(r448,l4)  -- assign reg 0
      Popping a261(r447,l4)  -- assign reg 0
      Popping a248(r463,l4)  -- assign reg 21
      Popping a256(r454,l4)  -- assign reg 21
Disposition:
    1:r61  l0     2    0:r62  l0     5  220:r63  l4   mem  187:r63  l3   mem
  101:r63  l2   mem   30:r63  l1    42   20:r63  l0    41  221:r64  l4   mem
  188:r64  l3   mem  102:r64  l2   mem   31:r64  l1   mem    3:r64  l0   mem
    4:r65  l0    44  222:r66  l4   mem  189:r66  l3   mem  103:r66  l2   mem
   32:r66  l1   mem    5:r66  l0   mem    6:r67  l0    42  223:r68  l4   mem
  190:r68  l3   mem  104:r68  l2   mem   33:r68  l1   mem    7:r68  l0   mem
    8:r69  l0   mem    9:r71  l0     3   29:r76  l0     0   24:r77  l0    41
   28:r78  l0     0   10:r79  l0     4   25:r80  l0     0   21:r82  l0     0
   19:r83  l0     2  224:r84  l4   mem  191:r84  l3   mem  105:r84  l2   mem
   34:r84  l1   mem   18:r84  l0   mem  225:r85  l4   mem  192:r85  l3   mem
  106:r85  l2   mem   48:r85  l1   mem   70:r87  l1     3  226:r101 l4   mem
  193:r101 l3   mem  107:r101 l2    42   49:r101 l1   mem  227:r115 l4   mem
  194:r115 l3   mem  108:r115 l2   mem   50:r115 l1   mem   84:r125 l1     0
   77:r132 l1     0   69:r139 l1     0   60:r148 l1    21   53:r149 l1    22
  126:r152 l2    41  228:r163 l4    44  195:r163 l3    44  109:r163 l2    44
   46:r163 l1    44  181:r164 l2    22  169:r166 l2    21  173:r175 l2    22
  164:r179 l2   mem  136:r186 l2    21  137:r197 l2   mem  162:r199 l2     0
  138:r200 l2   mem  229:r202 l4   mem  196:r202 l3   mem  146:r202 l2   mem
  156:r208 l2    21  230:r209 l4   mem  197:r209 l3   mem  139:r209 l2   mem
  231:r214 l4   mem  198:r214 l3   mem  140:r214 l2   mem  213:r220 l3    21
  215:r222 l3     2  216:r223 l3     1  232:r229 l4     2  212:r229 l3     2
  277:r231 l4     4  278:r232 l4     1  233:r244 l4   mem  199:r244 l3   mem
  110:r244 l2   mem   35:r244 l1   mem   17:r244 l0   mem  247:r247 l4     5
  234:r257 l4   mem  200:r257 l3   mem  111:r257 l2   mem   36:r257 l1   mem
   16:r257 l0   mem  255:r261 l4     5  235:r270 l4   mem  201:r270 l3   mem
  112:r270 l2   mem   37:r270 l1   mem   15:r270 l0   mem  263:r274 l4     5
  236:r280 l4    41  211:r280 l3    41  237:r281 l4    42  202:r281 l3    42
  145:r281 l2   mem  238:r282 l4     3  203:r282 l3     3  113:r282 l2     3
   45:r282 l1     3  125:r290 l2    22  124:r291 l2    21  239:r292 l4    43
  204:r292 l3    43  114:r292 l2    43   38:r292 l1    43   11:r292 l0    43
   26:r293 l0     0   27:r294 l0   mem    2:r295 l0     0   23:r296 l0     1
   22:r299 l0     0  100:r301 l1     0   47:r302 l1   mem   99:r304 l1     0
   98:r307 l1     0   97:r311 l1     0   96:r315 l1     0   79:r319 l1    44
   95:r320 l1     1   94:r322 l1     0   93:r325 l1     0   92:r328 l1     0
   91:r332 l1     0   72:r336 l1   mem   90:r337 l1     0   89:r342 l1     0
   88:r344 l1     0   87:r346 l1     0   86:r348 l1    41   61:r349 l1    41
   64:r350 l1   mem   85:r351 l1     5   83:r352 l1     2   82:r353 l1     1
   81:r354 l1     5   80:r356 l1     2   78:r357 l1     5   76:r358 l1     2
   75:r359 l1     1   74:r360 l1     5   73:r362 l1     2   71:r363 l1     5
   68:r364 l1     2   67:r365 l1     1   66:r366 l1     5   65:r368 l1     2
   63:r369 l1     5   62:r370 l1     5   59:r371 l1     0   57:r372 l1    23
   56:r373 l1    21   58:r374 l1    21   55:r375 l1    21   52:r378 l1    21
   54:r379 l1    21   51:r380 l1    21  186:r382 l2     0  185:r384 l2     0
  184:r385 l2    23  183:r387 l2     0  182:r389 l2    23  180:r390 l2     1
  178:r392 l2     0  179:r393 l2     1  177:r394 l2     1  176:r395 l2    22
  175:r397 l2    23  172:r398 l2    22  174:r399 l2    23  170:r400 l2    22
  171:r401 l2    22  167:r404 l2    21  166:r406 l2    21  168:r407 l2    22
  165:r408 l2    21  163:r410 l2     1  161:r411 l2     1  159:r412 l2    21
  160:r413 l2    21  158:r414 l2    21  155:r415 l2    21  157:r416 l2    22
  153:r417 l2     0  154:r418 l2     1  152:r419 l2    21  150:r420 l2    21
  151:r421 l2    21  148:r422 l2    21  149:r423 l2    22  147:r424 l2    21
  218:r425 l3     0  219:r426 l3     1  217:r427 l3     0  214:r428 l3    22
  280:r429 l4     0  279:r430 l4    21  276:r431 l4    21  274:r432 l4    21
  275:r433 l4    22  272:r434 l4    21  273:r435 l4    22  270:r436 l4    21
  271:r437 l4    22  269:r438 l4     0  268:r439 l4     0  267:r440 l4     0
  266:r442 l4     0  262:r443 l4     0  264:r445 l4    21  261:r447 l4     0
  260:r448 l4     0  259:r449 l4     0  258:r451 l4     0  254:r452 l4     0
  256:r454 l4    21  253:r456 l4     0  252:r457 l4     0  251:r458 l4     0
  250:r460 l4     0  246:r461 l4     0  248:r463 l4    21  143:r465 l2    21
  144:r466 l2    21  141:r467 l2    21  142:r468 l2    22  134:r469 l2    22
  135:r470 l2    22  132:r471 l2    21  131:r472 l2    23  133:r473 l2    23
  127:r475 l2    23  130:r476 l2    24  129:r477 l2    23  128:r478 l2    23
  123:r479 l2    22  122:r480 l2    21  121:r481 l2    21  240:r498 l4   mem
  205:r498 l3   mem  115:r498 l2   mem   44:r498 l1   mem  241:r499 l4   mem
  206:r499 l3   mem  116:r499 l2   mem   43:r499 l1   mem  242:r500 l4   mem
  207:r500 l3   mem  117:r500 l2   mem   42:r500 l1   mem  243:r501 l4   mem
  208:r501 l3   mem  118:r501 l2   mem   39:r501 l1   mem   14:r501 l0   mem
  244:r502 l4   mem  209:r502 l3   mem  119:r502 l2   mem   40:r502 l1   mem
   13:r502 l0   mem  245:r503 l4   mem  210:r503 l3   mem  120:r503 l2   mem
   41:r503 l1   mem   12:r503 l0   mem  265:r506 l4    21  257:r507 l4    21
  249:r508 l4    21
New iteration of spill/restore move
      Changing RTL for loop 1 (header bb5)
  42 vs parent 41:      Creating newreg=509 from oldreg=63
  43 vs parent 43:      Creating newreg=510 from oldreg=292
rescanning insn with uid = 555.
deleting insn with uid = 555.
rescanning insn with uid = 532.
deleting insn with uid = 532.
rescanning insn with uid = 509.
deleting insn with uid = 509.
rescanning insn with uid = 631.
deleting insn with uid = 631.
rescanning insn with uid = 627.
deleting insn with uid = 627.
rescanning insn with uid = 283.
deleting insn with uid = 283.
rescanning insn with uid = 275.
deleting insn with uid = 275.
rescanning insn with uid = 276.
deleting insn with uid = 276.
rescanning insn with uid = 652.
deleting insn with uid = 652.
rescanning insn with uid = 265.
deleting insn with uid = 265.
rescanning insn with uid = 83.
deleting insn with uid = 83.
rescanning insn with uid = 84.
deleting insn with uid = 84.
rescanning insn with uid = 85.
deleting insn with uid = 85.
rescanning insn with uid = 86.
deleting insn with uid = 86.
rescanning insn with uid = 101.
deleting insn with uid = 101.
rescanning insn with uid = 102.
deleting insn with uid = 102.
rescanning insn with uid = 121.
deleting insn with uid = 121.
rescanning insn with uid = 122.
deleting insn with uid = 122.
rescanning insn with uid = 123.
deleting insn with uid = 123.
rescanning insn with uid = 124.
deleting insn with uid = 124.
rescanning insn with uid = 139.
deleting insn with uid = 139.
rescanning insn with uid = 140.
deleting insn with uid = 140.
rescanning insn with uid = 163.
deleting insn with uid = 163.
rescanning insn with uid = 164.
deleting insn with uid = 164.
rescanning insn with uid = 180.
deleting insn with uid = 180.
rescanning insn with uid = 184.
deleting insn with uid = 184.
rescanning insn with uid = 186.
deleting insn with uid = 186.
rescanning insn with uid = 187.
deleting insn with uid = 187.
rescanning insn with uid = 188.
deleting insn with uid = 188.
rescanning insn with uid = 197.
deleting insn with uid = 197.
rescanning insn with uid = 198.
deleting insn with uid = 198.
rescanning insn with uid = 200.
deleting insn with uid = 200.
rescanning insn with uid = 206.
deleting insn with uid = 206.
rescanning insn with uid = 208.
deleting insn with uid = 208.
rescanning insn with uid = 209.
deleting insn with uid = 209.
rescanning insn with uid = 210.
deleting insn with uid = 210.
rescanning insn with uid = 219.
deleting insn with uid = 219.
rescanning insn with uid = 220.
deleting insn with uid = 220.
rescanning insn with uid = 222.
deleting insn with uid = 222.
rescanning insn with uid = 228.
deleting insn with uid = 228.
rescanning insn with uid = 230.
deleting insn with uid = 230.
rescanning insn with uid = 231.
deleting insn with uid = 231.
rescanning insn with uid = 232.
deleting insn with uid = 232.
rescanning insn with uid = 241.
deleting insn with uid = 241.
rescanning insn with uid = 242.
deleting insn with uid = 242.
rescanning insn with uid = 244.
deleting insn with uid = 244.
rescanning insn with uid = 250.
deleting insn with uid = 250.
rescanning insn with uid = 63.
deleting insn with uid = 63.
rescanning insn with uid = 64.
deleting insn with uid = 64.
rescanning insn with uid = 65.
deleting insn with uid = 65.
rescanning insn with uid = 51.
deleting insn with uid = 51.
rescanning insn with uid = 54.
deleting insn with uid = 54.
rescanning insn with uid = 55.
deleting insn with uid = 55.
      Changing RTL for loop 2 (header bb17)
  -1 vs parent 42:      Creating newreg=511 from oldreg=509
  42 vs parent -1:      Creating newreg=512 from oldreg=101
  44 vs parent 44:      Creating newreg=513 from oldreg=163
  3 vs parent 3:      Creating newreg=514 from oldreg=282
  43 vs parent 43:      Creating newreg=515 from oldreg=510
rescanning insn with uid = 419.
deleting insn with uid = 419.
rescanning insn with uid = 386.
deleting insn with uid = 386.
rescanning insn with uid = 387.
deleting insn with uid = 387.
rescanning insn with uid = 391.
deleting insn with uid = 391.
rescanning insn with uid = 404.
deleting insn with uid = 404.
rescanning insn with uid = 405.
deleting insn with uid = 405.
rescanning insn with uid = 382.
deleting insn with uid = 382.
rescanning insn with uid = 324.
deleting insn with uid = 324.
rescanning insn with uid = 305.
deleting insn with uid = 305.
rescanning insn with uid = 307.
deleting insn with uid = 307.
rescanning insn with uid = 309.
deleting insn with uid = 309.
rescanning insn with uid = 310.
deleting insn with uid = 310.
rescanning insn with uid = 296.
deleting insn with uid = 296.
rescanning insn with uid = 297.
deleting insn with uid = 297.
rescanning insn with uid = 299.
deleting insn with uid = 299.
      Changing RTL for loop 3 (header bb31)
  -1 vs parent 42:      Creating newreg=516 from oldreg=512
  44 vs parent 44:      Creating newreg=517 from oldreg=513
  42 vs parent -1:      Creating newreg=518 from oldreg=281
  3 vs parent 3:      Creating newreg=519 from oldreg=514
  43 vs parent 43:      Creating newreg=520 from oldreg=515
rescanning insn with uid = 455.
deleting insn with uid = 455.
rescanning insn with uid = 435.
deleting insn with uid = 435.
rescanning insn with uid = 437.
deleting insn with uid = 437.
rescanning insn with uid = 438.
deleting insn with uid = 438.
rescanning insn with uid = 425.
deleting insn with uid = 425.
rescanning insn with uid = 426.
deleting insn with uid = 426.
rescanning insn with uid = 427.
deleting insn with uid = 427.
rescanning insn with uid = 429.
deleting insn with uid = 429.
rescanning insn with uid = 431.
deleting insn with uid = 431.
      Changing RTL for loop 4 (header bb37)
  44 vs parent 44:      Creating newreg=521 from oldreg=517
  2 vs parent 2:      Creating newreg=522 from oldreg=229
  41 vs parent 41:      Creating newreg=523 from oldreg=280
  42 vs parent 42:      Creating newreg=524 from oldreg=518
  3 vs parent 3:      Creating newreg=525 from oldreg=519
  43 vs parent 43:      Creating newreg=526 from oldreg=520
rescanning insn with uid = 552.
deleting insn with uid = 552.
rescanning insn with uid = 553.
deleting insn with uid = 553.
rescanning insn with uid = 549.
deleting insn with uid = 549.
rescanning insn with uid = 529.
deleting insn with uid = 529.
rescanning insn with uid = 530.
deleting insn with uid = 530.
rescanning insn with uid = 526.
deleting insn with uid = 526.
rescanning insn with uid = 506.
deleting insn with uid = 506.
rescanning insn with uid = 507.
deleting insn with uid = 507.
rescanning insn with uid = 498.
deleting insn with uid = 498.
rescanning insn with uid = 499.
deleting insn with uid = 499.
rescanning insn with uid = 493.
deleting insn with uid = 493.
rescanning insn with uid = 494.
deleting insn with uid = 494.
rescanning insn with uid = 488.
deleting insn with uid = 488.
rescanning insn with uid = 489.
deleting insn with uid = 489.
rescanning insn with uid = 468.
deleting insn with uid = 468.
rescanning insn with uid = 470.
deleting insn with uid = 470.
rescanning insn with uid = 471.
deleting insn with uid = 471.
rescanning insn with uid = 472.
deleting insn with uid = 472.
rescanning insn with uid = 460.
deleting insn with uid = 460.
rescanning insn with uid = 461.
deleting insn with uid = 461.
rescanning insn with uid = 463.
deleting insn with uid = 463.
scanning new insn with uid = 731.
scanning new insn with uid = 732.
scanning new insn with uid = 733.
scanning new insn with uid = 734.
scanning new insn with uid = 735.
scanning new insn with uid = 736.
scanning new insn with uid = 737.
scanning new insn with uid = 738.
scanning new insn with uid = 739.
scanning new insn with uid = 740.
scanning new insn with uid = 741.
scanning new insn with uid = 742.
scanning new insn with uid = 743.
scanning new insn with uid = 744.
scanning new insn with uid = 745.
scanning new insn with uid = 746.
scanning new insn with uid = 747.
scanning new insn with uid = 748.
scanning new insn with uid = 749.
scanning new insn with uid = 750.
scanning new insn with uid = 751.
scanning new insn with uid = 752.
scanning new insn with uid = 753.
    Adding cp208:a20r63-a30r509
    Adding range [270..270] to allocno a20r63
    Adding cp209:a11r292-a38r510
    Adding range [270..272] to allocno a11r292
    Adding range [271..273] to allocno a30r509
    Adding range [273..273] to allocno a38r510
    Adding range [270..273] to live through  allocno a3r64
    Adding range [270..273] to live through  allocno a5r66
    Adding range [270..273] to live through  allocno a7r68
    Adding range [270..273] to live through  allocno a18r84
    Adding range [270..273] to live through  allocno a17r244
    Adding range [270..273] to live through  allocno a16r257
    Adding range [270..273] to live through  allocno a15r270
    Adding range [270..273] to live through  allocno a14r501
    Adding range [270..273] to live through  allocno a13r502
    Adding range [270..273] to live through  allocno a12r503
    Adding cp210:a30r509-a101r511
    Adding range [275..275] to allocno a101r511
    Adding cp211:a38r510-a114r515
    Adding range [275..277] to allocno a114r515
    Adding range [276..278] to allocno a30r509
    Adding range [278..278] to allocno a38r510
    Adding range [275..278] to live through  allocno a31r64
    Adding range [275..278] to live through  allocno a32r66
    Adding range [275..278] to live through  allocno a33r68
    Adding range [275..278] to live through  allocno a34r84
    Adding range [275..278] to live through  allocno a48r85
    Adding range [275..278] to live through  allocno a35r244
    Adding range [275..278] to live through  allocno a36r257
    Adding range [275..278] to live through  allocno a37r270
    Adding range [275..278] to live through  allocno a39r501
    Adding range [275..278] to live through  allocno a40r502
    Adding range [275..278] to live through  allocno a41r503
    Adding cp212:a107r512-a193r516
    Adding range [280..280] to allocno a107r512
    Adding cp213:a109r513-a195r517
    Adding range [280..282] to allocno a109r513
    Adding cp214:a145r281-a202r518
    Adding range [280..284] to allocno a145r281
    Adding cp215:a113r514-a203r519
    Adding range [280..286] to allocno a113r514
    Adding cp216:a114r515-a204r520
    Adding range [280..288] to allocno a114r515
    Adding range [281..289] to allocno a193r516
    Adding range [283..289] to allocno a195r517
    Adding range [285..289] to allocno a202r518
    Adding range [287..289] to allocno a203r519
    Adding range [289..289] to allocno a204r520
    Adding range [280..289] to live through  allocno a101r511
    Adding range [280..289] to live through  allocno a102r64
    Adding range [280..289] to live through  allocno a103r66
    Adding range [280..289] to live through  allocno a104r68
    Adding range [280..289] to live through  allocno a105r84
    Adding range [280..289] to live through  allocno a106r85
    Adding range [280..289] to live through  allocno a108r115
    Adding range [280..289] to live through  allocno a146r202
    Adding range [280..289] to live through  allocno a139r209
    Adding range [280..289] to live through  allocno a140r214
    Adding range [280..289] to live through  allocno a110r244
    Adding range [280..289] to live through  allocno a111r257
    Adding range [280..289] to live through  allocno a112r270
    Adding range [280..289] to live through  allocno a115r498
    Adding range [280..289] to live through  allocno a116r499
    Adding range [280..289] to live through  allocno a117r500
    Adding range [280..289] to live through  allocno a118r501
    Adding range [280..289] to live through  allocno a119r502
    Adding range [280..289] to live through  allocno a120r503
    Adding cp217:a107r512-a193r516
    Adding range [291..291] to allocno a193r516
    Adding cp218:a109r513-a195r517
    Adding range [291..293] to allocno a195r517
    Adding cp219:a113r514-a203r519
    Adding range [291..295] to allocno a203r519
    Adding cp220:a114r515-a204r520
    Adding range [291..297] to allocno a204r520
    Adding range [292..298] to allocno a107r512
    Adding range [294..298] to allocno a109r513
    Adding range [296..298] to allocno a113r514
    Adding range [298..298] to allocno a114r515
    Adding range [291..298] to live through  allocno a101r511
    Adding range [291..298] to live through  allocno a102r64
    Adding range [291..298] to live through  allocno a103r66
    Adding range [291..298] to live through  allocno a104r68
    Adding range [291..298] to live through  allocno a105r84
    Adding range [291..298] to live through  allocno a106r85
    Adding range [291..298] to live through  allocno a108r115
    Adding range [291..298] to live through  allocno a110r244
    Adding range [291..298] to live through  allocno a111r257
    Adding range [291..298] to live through  allocno a112r270
    Adding range [291..298] to live through  allocno a115r498
    Adding range [291..298] to live through  allocno a116r499
    Adding range [291..298] to live through  allocno a117r500
    Adding range [291..298] to live through  allocno a118r501
    Adding range [291..298] to live through  allocno a119r502
    Adding range [291..298] to live through  allocno a120r503
    Adding cp221:a195r517-a228r521
    Adding range [300..300] to allocno a195r517
    Adding cp222:a212r229-a232r522
    Adding range [300..302] to allocno a212r229
    Adding cp223:a211r280-a236r523
    Adding range [300..304] to allocno a211r280
    Adding cp224:a202r518-a237r524
    Adding range [300..306] to allocno a202r518
    Adding cp225:a203r519-a238r525
    Adding range [300..308] to allocno a203r519
    Adding cp226:a204r520-a239r526
    Adding range [300..310] to allocno a204r520
    Adding range [301..311] to allocno a228r521
    Adding range [303..311] to allocno a232r522
    Adding range [305..311] to allocno a236r523
    Adding range [307..311] to allocno a237r524
    Adding range [309..311] to allocno a238r525
    Adding range [311..311] to allocno a239r526
    Adding range [300..311] to live through  allocno a187r511
    Adding range [300..311] to live through  allocno a188r64
    Adding range [300..311] to live through  allocno a189r66
    Adding range [300..311] to live through  allocno a190r68
    Adding range [300..311] to live through  allocno a191r84
    Adding range [300..311] to live through  allocno a192r85
    Adding range [300..311] to live through  allocno a193r516
    Adding range [300..311] to live through  allocno a194r115
    Adding range [300..311] to live through  allocno a196r202
    Adding range [300..311] to live through  allocno a197r209
    Adding range [300..311] to live through  allocno a198r214
    Adding range [300..311] to live through  allocno a199r244
    Adding range [300..311] to live through  allocno a200r257
    Adding range [300..311] to live through  allocno a201r270
    Adding range [300..311] to live through  allocno a205r498
    Adding range [300..311] to live through  allocno a206r499
    Adding range [300..311] to live through  allocno a207r500
    Adding range [300..311] to live through  allocno a208r501
    Adding range [300..311] to live through  allocno a209r502
    Adding range [300..311] to live through  allocno a210r503
    Adding cp227:a195r517-a228r521
    Adding range [313..313] to allocno a228r521
    Adding cp228:a202r518-a237r524
    Adding range [313..315] to allocno a237r524
    Adding cp229:a203r519-a238r525
    Adding range [313..317] to allocno a238r525
    Adding cp230:a204r520-a239r526
    Adding range [313..319] to allocno a239r526
    Adding range [314..320] to allocno a195r517
    Adding range [316..320] to allocno a202r518
    Adding range [318..320] to allocno a203r519
    Adding range [320..320] to allocno a204r520
    Adding range [313..320] to live through  allocno a187r511
    Adding range [313..320] to live through  allocno a188r64
    Adding range [313..320] to live through  allocno a189r66
    Adding range [313..320] to live through  allocno a190r68
    Adding range [313..320] to live through  allocno a191r84
    Adding range [313..320] to live through  allocno a192r85
    Adding range [313..320] to live through  allocno a193r516
    Adding range [313..320] to live through  allocno a194r115
    Adding range [313..320] to live through  allocno a196r202
    Adding range [313..320] to live through  allocno a197r209
    Adding range [313..320] to live through  allocno a198r214
    Adding range [313..320] to live through  allocno a199r244
    Adding range [313..320] to live through  allocno a200r257
    Adding range [313..320] to live through  allocno a201r270
    Adding range [313..320] to live through  allocno a205r498
    Adding range [313..320] to live through  allocno a206r499
    Adding range [313..320] to live through  allocno a207r500
    Adding range [313..320] to live through  allocno a208r501
    Adding range [313..320] to live through  allocno a209r502
    Adding range [313..320] to live through  allocno a210r503
    Adding cp231:a30r509-a101r511
    Adding range [322..322] to allocno a30r509
    Adding cp232:a49r101-a107r512
    Adding range [322..324] to allocno a49r101
    Adding cp233:a46r163-a109r513
    Adding range [322..326] to allocno a46r163
    Adding cp234:a45r282-a113r514
    Adding range [322..328] to allocno a45r282
    Adding cp235:a38r510-a114r515
    Adding range [322..330] to allocno a38r510
    Adding range [323..331] to allocno a101r511
    Adding range [325..331] to allocno a107r512
    Adding range [327..331] to allocno a109r513
    Adding range [329..331] to allocno a113r514
    Adding range [331..331] to allocno a114r515
    Adding range [322..331] to live through  allocno a31r64
    Adding range [322..331] to live through  allocno a32r66
    Adding range [322..331] to live through  allocno a33r68
    Adding range [322..331] to live through  allocno a34r84
    Adding range [322..331] to live through  allocno a48r85
    Adding range [322..331] to live through  allocno a50r115
    Adding range [322..331] to live through  allocno a35r244
    Adding range [322..331] to live through  allocno a36r257
    Adding range [322..331] to live through  allocno a37r270
    Adding range [322..331] to live through  allocno a44r498
    Adding range [322..331] to live through  allocno a43r499
    Adding range [322..331] to live through  allocno a42r500
    Adding range [322..331] to live through  allocno a39r501
    Adding range [322..331] to live through  allocno a40r502
    Adding range [322..331] to live through  allocno a41r503
scanning new insn with uid = 754.
scanning new insn with uid = 755.
scanning new insn with uid = 756.
scanning new insn with uid = 757.
scanning new insn with uid = 758.
    New r509: setting preferred GENERAL_REGS, alternative NO_REGS
    New r510: setting preferred DIREG, alternative GENERAL_REGS
    New r511: setting preferred GENERAL_REGS, alternative NO_REGS
    New r512: setting preferred GENERAL_REGS, alternative NO_REGS
    New r513: setting preferred GENERAL_REGS, alternative NO_REGS
    New r514: setting preferred GENERAL_REGS, alternative NO_REGS
    New r515: setting preferred DIREG, alternative GENERAL_REGS
    New r516: setting preferred GENERAL_REGS, alternative NO_REGS
    New r517: setting preferred GENERAL_REGS, alternative NO_REGS
    New r518: setting preferred GENERAL_REGS, alternative NO_REGS
    New r519: setting preferred GENERAL_REGS, alternative NO_REGS
    New r520: setting preferred DIREG, alternative GENERAL_REGS
    New r521: setting preferred GENERAL_REGS, alternative NO_REGS
    New r522: setting preferred GENERAL_REGS, alternative NO_REGS
    New r523: setting preferred GENERAL_REGS, alternative NO_REGS
    New r524: setting preferred GENERAL_REGS, alternative NO_REGS
    New r525: setting preferred GENERAL_REGS, alternative NO_REGS
    New r526: setting preferred DIREG, alternative GENERAL_REGS
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 59 n_edges 95 count 173 (  2.9)
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58
;;
;; Loop 1
;;  header 5, latch 7
;;  depth 1, outer 0
;;  nodes: 5 7 9 16 55 19 18 17 20 21 22 23 24 25 29 49 26 33 32 31 35 34 39 38 37 43 40 44 45 42 47 41 48 46 36 30 28 51 52 27 53 50 56 54 15 14 13 12 11 10 6
;;
;; Loop 2
;;  header 17, latch 18
;;  depth 2, outer 1
;;  nodes: 17 18 20 21 22 23 24 25 29 49 26 33 32 31 35 34 39 38 37 43 40 44 45 42 47 41 48 46 36 30 28 51 52 27 53 50
;;
;; Loop 3
;;  header 31, latch 32
;;  depth 3, outer 2
;;  nodes: 31 32 35 34 39 38 37 43 40 44 45 42 47 41 48 46 36
;;
;; Loop 4
;;  header 37, latch 38
;;  depth 4, outer 3
;;  nodes: 37 38 43 40 44 45 42 47 41 48 46
;; 2 succs { 57 3 }
;; 3 succs { 4 58 }
;; 4 succs { 5 }
;; 5 succs { 9 6 }
;; 6 succs { 10 }
;; 7 succs { 5 8 }
;; 8 succs { 58 }
;; 9 succs { 7 }
;; 10 succs { 9 11 }
;; 11 succs { 9 12 }
;; 12 succs { 9 13 }
;; 13 succs { 9 14 }
;; 14 succs { 54 15 }
;; 15 succs { 55 }
;; 16 succs { 7 }
;; 17 succs { 18 20 }
;; 18 succs { 17 19 }
;; 19 succs { 16 }
;; 20 succs { 18 21 }
;; 21 succs { 18 22 }
;; 22 succs { 18 23 }
;; 23 succs { 18 24 }
;; 24 succs { 18 25 }
;; 25 succs { 18 26 }
;; 26 succs { 27 18 }
;; 27 succs { 51 28 }
;; 28 succs { 49 29 }
;; 29 succs { 30 18 }
;; 30 succs { 31 }
;; 31 succs { 34 32 }
;; 32 succs { 31 33 }
;; 33 succs { 18 }
;; 34 succs { 35 32 }
;; 35 succs { 36 32 }
;; 36 succs { 37 }
;; 37 succs { 40 38 }
;; 38 succs { 37 39 }
;; 39 succs { 32 }
;; 40 succs { 41 38 }
;; 41 succs { 47 42 }
;; 42 succs { 45 43 }
;; 43 succs { 44 38 }
;; 44 succs { 38 }
;; 45 succs { 46 44 }
;; 46 succs { 43 }
;; 47 succs { 48 45 }
;; 48 succs { 42 }
;; 49 succs { 18 50 }
;; 50 succs { 29 }
;; 51 succs { 28 52 }
;; 52 succs { 53 28 }
;; 53 succs { 28 }
;; 54 succs { 55 }
;; 55 succs { 56 16 }
;; 56 succs { 17 }
;; 57 succs { 3 }
;; 58 succs { 1 }
+++Costs: overall 56652, reg -17490, mem 74142, ld 656, st 328, move 772
+++       move loops 0, new jumps 1


<built-in>

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={17d,2u} r1={23d,6u} r2={23d,6u} r4={23d,6u} r5={28d,12u} r6={1d,58u} r7={6d,88u} r8={16d} r9={16d} r10={16d} r11={16d} r12={16d} r13={16d} r14={16d} r15={16d} r16={1d,57u} r17={108d,37u} r18={16d} r19={16d} r20={1d,58u} r21={23d,8u} r22={21d,4u} r23={17d} r24={17d} r25={17d} r26={17d} r27={17d} r28={17d} r29={16d} r30={16d} r31={16d} r32={16d} r33={16d} r34={16d} r35={16d} r36={16d} r37={23d,6u} r38={23d,6u} r39={16d} r40={16d} r45={16d} r46={16d} r47={16d} r48={16d} r49={16d} r50={16d} r51={16d} r52={16d} r61={2d,2u} r62={2d,1u} r63={1d,2u} r64={1d,2u} r65={1d,1u,1e} r66={1d,2u} r67={1d,1u,1e} r68={1d,2u} r69={1d,1u,1e} r71={1d,3u} r76={1d,1u} r77={1d,2u} r78={1d,1u} r79={1d,2u} r80={1d,2u} r82={1d,3u} r83={1d,2u} r84={1d,1u} r85={1d,2u} r87={1d,5u} r101={1d,1u} r115={1d,7u,3e} r125={1d,1u} r132={1d,1u} r139={1d,1u} r148={1d,5u} r149={1d,5u} r152={1d,17u,2e} r163={1d,1u} r164={1d,5u} r166={1d,3u} r175={1d,2u} r179={1d,1u} r186={1d,3u} r197={1d,2u} r199={1d,2u} r200={1d,2u} r202={1d,2u} r208={1d,3u} r209={1d,7u} r214={1d,7u} r220={1d,2u} r222={1d,1u} r223={1d,2u} r229={1d,2u} r231={1d,1u} r232={1d,2u} r244={1d,1u} r247={1d,2u} r257={1d,1u} r261={1d,2u} r270={1d,1u} r274={1d,2u} r280={1d,1u} r281={1d,1u} r282={1d,1u} r290={1d,4u} r291={1d,4u} r292={1d,9u,2e} r293={1d,1u} r294={1d,1u} r295={1d,2u} r296={1d,2u} r299={1d,1u} r301={1d,1u} r302={1d,2u} r304={1d,1u} r307={1d,1u} r311={1d,1u} r315={1d,1u} r319={1d,3u} r320={1d,1u} r322={1d,1u} r325={1d,1u} r328={1d,1u} r332={1d,1u} r336={1d,3u} r337={1d,1u} r342={1d,1u} r344={1d,1u} r346={1d,1u} r348={1d,1u,1e} r349={1d,3u} r350={1d,2u} r351={1d,1u} r352={1d,1u} r353={1d,1u} r354={1d,1u} r356={1d,1u} r357={1d,1u} r358={1d,1u} r359={1d,1u} r360={1d,1u} r362={1d,1u} r363={1d,1u} r364={1d,1u} r365={1d,1u} r366={1d,1u} r368={1d,1u} r369={1d,1u} r370={1d,1u} r371={1d,1u} r372={1d,1u} r373={1d,1u} r374={1d,1u} r375={1d,1u} r378={1d,1u} r379={1d,1u} r380={1d,1u} r382={1d,1u} r384={1d,1u} r385={1d,1u} r387={1d,1u} r389={1d,1u} r390={1d,2u} r392={1d,2u} r393={1d,1u} r394={1d,1u} r395={1d,1u} r397={1d,1u} r398={1d,1u} r399={1d,1u} r400={1d,1u} r401={1d,1u} r404={1d,1u} r406={1d,1u} r407={1d,1u} r408={1d,1u} r410={1d,1u} r411={1d,1u} r412={1d,1u} r413={1d,1u} r414={1d,1u} r415={1d,1u} r416={1d,1u} r417={1d,1u} r418={1d,1u} r419={1d,1u} r420={1d,1u} r421={1d,1u} r422={1d,1u} r423={1d,1u} r424={1d,1u} r425={1d,1u} r426={1d,1u} r427={1d,2u} r428={1d,1u} r429={1d,2u} r430={1d,1u} r431={1d,1u} r432={1d,1u} r433={1d,1u} r434={1d,1u} r435={1d,1u} r436={1d,1u} r437={1d,1u} r438={1d,1u} r439={1d,1u} r440={1d,1u} r442={1d,1u} r443={1d,1u} r445={1d,1u} r447={1d,1u} r448={1d,1u} r449={1d,1u} r451={1d,1u} r452={1d,1u} r454={1d,1u} r456={1d,1u} r457={1d,1u} r458={1d,1u} r460={1d,1u} r461={1d,1u} r463={1d,1u} r465={1d,1u} r466={1d,1u} r467={1d,1u} r468={1d,1u} r469={1d,1u} r470={1d,1u} r471={1d,2u} r472={1d,1u} r473={1d,1u} r475={1d,2u} r476={1d,1u} r477={1d,1u} r478={1d,1u} r479={1d,1u} r480={1d,1u} r481={1d,1u} r498={1d,1u} r499={1d,1u} r500={1d,1u} r501={1d,1u} r502={1d,1u} r503={1d,1u} r506={1d,1u} r507={1d,1u} r508={1d,1u} r509={3d,9u} r510={2d,47u,23e} r511={1d,1u} r512={2d,2u} r513={2d,2u} r514={3d,6u} r515={2d,11u,5e} r516={1d,1u} r517={2d,2u} r518={3d,6u} r519={2d,2u} r520={2d,7u,2e} r521={1d,1u} r522={2d,2u} r523={2d,8u} r524={1d,4u} r525={1d,1u} r526={1d,13u,3e} 
;;    total ref usage 1939{1105d,790u,44e} in 463{447 regular + 16 call} insns.
(note 3 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 146, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 62 64 65 66 67 68 69 71 76 77 78 79 80 292 293 294 295 296
(note 10 3 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 4 10 5 2 (set (reg/f:DI 292 [ .omp_data_i ])
        (reg:DI 5 di [ .omp_data_i ])) Batch_Mix_Correlations.cc:610 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ .omp_data_i ])
        (nil)))
(note 5 4 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 5 13 2 (set (reg/f:DI 64 [ MixCorr_BKGD.38 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 292 [ .omp_data_i ])
                (const_int 256 [0x100])) [0 .omp_data_i_23(D)->MixCorr_BKGD.38+0 S8 A64])) Batch_Mix_Correlations.cc:610 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 13 12 14 2 (var_location:DI MixCorr_BKGD.38 (reg/f:DI 64 [ MixCorr_BKGD.38 ])) Batch_Mix_Correlations.cc:610 -1
     (nil))
(insn 14 13 15 2 (set (reg:DI 65 [ D.158397 ])
        (mem/j:DI (plus:DI (reg/f:DI 292 [ .omp_data_i ])
                (const_int 248 [0xf8])) [0 .omp_data_i_23(D)->D.152141+0 S8 A64])) Batch_Mix_Correlations.cc:610 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 66 [ MixCorr_Signal.37 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 292 [ .omp_data_i ])
                (const_int 240 [0xf0])) [0 .omp_data_i_23(D)->MixCorr_Signal.37+0 S8 A64])) Batch_Mix_Correlations.cc:610 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 16 15 17 2 (var_location:DI MixCorr_Signal.37 (reg/f:DI 66 [ MixCorr_Signal.37 ])) Batch_Mix_Correlations.cc:610 -1
     (nil))
(insn 17 16 18 2 (set (reg:DI 67 [ D.158397 ])
        (mem/j:DI (plus:DI (reg/f:DI 292 [ .omp_data_i ])
                (const_int 232 [0xe8])) [0 .omp_data_i_23(D)->D.152139+0 S8 A64])) Batch_Mix_Correlations.cc:610 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 68 [ MixCorr.36 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 292 [ .omp_data_i ])
                (const_int 224 [0xe0])) [0 .omp_data_i_23(D)->MixCorr.36+0 S8 A64])) Batch_Mix_Correlations.cc:610 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 19 18 20 2 (var_location:DI MixCorr.36 (reg/f:DI 68 [ MixCorr.36 ])) Batch_Mix_Correlations.cc:610 -1
     (nil))
(insn 20 19 21 2 (set (reg:DI 69 [ D.158397 ])
        (mem/j:DI (plus:DI (reg/f:DI 292 [ .omp_data_i ])
                (const_int 216 [0xd8])) [0 .omp_data_i_23(D)->D.152137+0 S8 A64])) Batch_Mix_Correlations.cc:610 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (reg:DI 71 [ mix_start.63 ])
        (mem/j:DI (reg/f:DI 292 [ .omp_data_i ]) [0 .omp_data_i_23(D)->mix_start+0 S8 A64])) Batch_Mix_Correlations.cc:612 87 {*movdi_internal_rex64}
     (nil))
(call_insn/u 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("omp_get_num_threads") [flags 0x41]  <function_decl 0x2b94c3aebf00 __builtin_omp_get_num_threads>) [0 __builtin_omp_get_num_threads S1 A8])
            (const_int 0 [0]))) 672 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 23 22 24 2 (set (reg:SI 76 [ D.158400 ])
        (reg:SI 0 ax)) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 24 23 25 2 (set (reg:DI 77 [ D.158399 ])
        (sign_extend:DI (reg:SI 76 [ D.158400 ]))) 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 76 [ D.158400 ])
        (nil)))
(call_insn/u 25 24 26 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("omp_get_thread_num") [flags 0x41]  <function_decl 0x2b94c3aebe00 __builtin_omp_get_thread_num>) [0 __builtin_omp_get_thread_num S1 A8])
            (const_int 0 [0]))) 672 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 26 25 27 2 (set (reg:SI 78 [ D.158400 ])
        (reg:SI 0 ax)) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 27 26 28 2 (set (reg:DI 79 [ D.158399 ])
        (sign_extend:DI (reg:SI 78 [ D.158400 ]))) 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 78 [ D.158400 ])
        (nil)))
(insn 28 27 29 2 (set (reg:DI 294 [ .omp_data_i_23(D)->mix_end ])
        (mem/j:DI (plus:DI (reg/f:DI 292 [ .omp_data_i ])
                (const_int 8 [0x8])) [0 .omp_data_i_23(D)->mix_end+0 S8 A64])) Batch_Mix_Correlations.cc:613 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/j:DI (plus:DI (reg/f:DI 292 [ .omp_data_i ])
                (const_int 8 [0x8])) [0 .omp_data_i_23(D)->mix_end+0 S8 A64])
        (nil)))
(insn 29 28 30 2 (parallel [
            (set (reg:DI 293 [ D.158398 ])
                (plus:DI (reg:DI 294 [ .omp_data_i_23(D)->mix_end ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:613 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 294 [ .omp_data_i_23(D)->mix_end ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/j:DI (plus:DI (reg/f:DI 292 [ .omp_data_i ])
                            (const_int 8 [0x8])) [0 .omp_data_i_23(D)->mix_end+0 S8 A64])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 30 29 31 2 (parallel [
            (set (reg:DI 80 [ D.158399 ])
                (minus:DI (reg:DI 293 [ D.158398 ])
                    (reg:DI 71 [ mix_start.63 ])))
            (clobber (reg:CC 17 flags))
        ]) 310 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 293 [ D.158398 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 31 30 32 2 (parallel [
            (set (reg:DI 295)
                (div:DI (reg:DI 80 [ D.158399 ])
                    (reg:DI 77 [ D.158399 ])))
            (set (reg:DI 296)
                (mod:DI (reg:DI 80 [ D.158399 ])
                    (reg:DI 77 [ D.158399 ])))
            (clobber (reg:CC 17 flags))
        ]) 376 {*divmoddi4}
     (expr_list:REG_DEAD (reg:DI 80 [ D.158399 ])
        (expr_list:REG_DEAD (reg:DI 77 [ D.158399 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 32 31 34 2 (set (reg:DI 61 [ q.1245 ])
        (reg:DI 295)) 87 {*movdi_internal_rex64}
     (nil))
(insn 34 32 35 2 (set (reg:DI 62 [ tt.1246 ])
        (reg:DI 296)) 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 79 [ D.158399 ])
            (reg:DI 296))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 296)
        (nil)))
(jump_insn 36 35 649 2 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 646)
            (pc))) 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 646)
;;  succ:       57 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 62 64 65 66 67 68 69 71 79 292 295

;; basic block 3, loop depth 0, count 0, freq 146, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
;;              57 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u35(6){ }u36(7){ }u37(16){ }u38(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 62 64 65 66 67 68 69 71 79 292
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 62 79
;; lr  def 	 17 [flags] 82 83 299
(code_label 649 36 37 3 85 "" [1 uses])
(note 37 649 38 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 3 (parallel [
            (set (reg:DI 299 [ D.158399 ])
                (mult:DI (reg:DI 61 [ q.1245 ])
                    (reg:DI 79 [ D.158399 ])))
            (clobber (reg:CC 17 flags))
        ]) 354 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 79 [ D.158399 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 39 38 40 3 (parallel [
            (set (reg:DI 82 [ D.158399 ])
                (plus:DI (reg:DI 299 [ D.158399 ])
                    (reg:DI 62 [ tt.1246 ])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 299 [ D.158399 ])
        (expr_list:REG_DEAD (reg:DI 62 [ tt.1246 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 40 39 41 3 (parallel [
            (set (reg:DI 83 [ D.158399 ])
                (plus:DI (reg:DI 82 [ D.158399 ])
                    (reg:DI 61 [ q.1245 ])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 61 [ q.1245 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 41 40 42 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 82 [ D.158399 ])
            (reg:DI 83 [ D.158399 ]))) 8 {*cmpdi_1}
     (nil))
(jump_insn 42 41 43 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 653)
            (pc))) 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil)))
 -> 653)
;;  succ:       4 [61.0%]  (FALLTHRU)
;;              58 [39.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 65 66 67 68 69 71 82 83 292

;; basic block 4, loop depth 0, count 0, freq 89, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 [61.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u48(6){ }u49(7){ }u50(16){ }u51(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 65 66 67 68 69 71 82 83 292
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65 67 69 71 82 83 292
;; lr  def 	 17 [flags] 63 84 244 257 270 501 502 503 509 510
(note 43 42 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 4 (parallel [
            (set (reg/v:DI 63 [ imix ])
                (plus:DI (reg:DI 71 [ mix_start.63 ])
                    (reg:DI 82 [ D.158399 ])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 82 [ D.158399 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(debug_insn 45 44 46 4 (var_location:DI imix (reg/v:DI 63 [ imix ])) -1
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 84 [ D.158399 ])
                (plus:DI (reg:DI 71 [ mix_start.63 ])
                    (reg:DI 83 [ D.158399 ])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 83 [ D.158399 ])
        (expr_list:REG_DEAD (reg:DI 71 [ mix_start.63 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 47 46 48 4 (parallel [
            (set (reg:DI 244 [ D.158397 ])
                (lshiftrt:DI (reg:DI 67 [ D.158397 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:696 556 {*lshrdi3_1}
     (expr_list:REG_DEAD (reg:DI 67 [ D.158397 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:DI (reg:DI 67 [ D.158397 ])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 48 47 49 4 (parallel [
            (set (reg:DI 257 [ D.158397 ])
                (lshiftrt:DI (reg:DI 65 [ D.158397 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:702 556 {*lshrdi3_1}
     (expr_list:REG_DEAD (reg:DI 65 [ D.158397 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:DI (reg:DI 65 [ D.158397 ])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 49 48 269 4 (parallel [
            (set (reg:DI 270 [ D.158397 ])
                (lshiftrt:DI (reg:DI 69 [ D.158397 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:706 556 {*lshrdi3_1}
     (expr_list:REG_DEAD (reg:DI 69 [ D.158397 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:DI (reg:DI 69 [ D.158397 ])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 269 49 278 4 (set (reg:V2DF 501)
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0 S16 A128])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:82 1159 {*movv2df_internal}
     (expr_list:REG_EQUIV (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0 S16 A128])
        (nil)))
(insn 278 269 357 4 (set (reg:V4SF 502)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0 S16 A128])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 1157 {*movv4sf_internal}
     (expr_list:REG_EQUIV (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0 S16 A128])
        (nil)))
(insn 357 278 731 4 (set (reg:V4SF 503)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0 S16 A128])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 1157 {*movv4sf_internal}
     (expr_list:REG_EQUIV (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0 S16 A128])
        (nil)))
(insn 731 357 732 4 (set (reg/v:DI 509 [orig:63 imix ] [63])
        (reg/v:DI 63 [ imix ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v:DI 63 [ imix ])
        (nil)))
(insn 732 731 68 4 (set (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
        (reg/f:DI 292 [ .omp_data_i ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 292 [ .omp_data_i ])
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 244 257 270 501 502 503 509 510

;; basic block 5, loop depth 1, count 0, freq 8889, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              7 [99.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u64(6){ }u65(7){ }u66(16){ }u67(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 244 257 270 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 509 510
;; lr  def 	 17 [flags] 85 87 301
(code_label 68 732 50 5 55 "" [1 uses])
(note 50 68 51 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 51 50 53 5 (var_location:DI imix (reg/v:DI 509 [orig:63 imix ] [63])) -1
     (nil))
(insn 53 51 54 5 (set (reg/f:DI 85 [ saved_stack.77 ])
        (reg/f:DI 7 sp)) 87 {*movdi_internal_rex64}
     (nil))
(insn 54 53 55 5 (set (reg/f:DI 301 [ .omp_data_i_23(D)->mix_events ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 72 [0x48])) [0 .omp_data_i_23(D)->mix_events+0 S8 A64])) Batch_Mix_Correlations.cc:614 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 72 [0x48])) [0 .omp_data_i_23(D)->mix_events+0 S8 A64])
        (nil)))
(insn 55 54 56 5 (set (reg/v:DI 87 [ mix_event ])
        (mem/j:DI (plus:DI (mult:DI (reg/v:DI 509 [orig:63 imix ] [63])
                    (const_int 8 [0x8]))
                (reg/f:DI 301 [ .omp_data_i_23(D)->mix_events ])) [0 *_51 S8 A64])) Batch_Mix_Correlations.cc:614 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 301 [ .omp_data_i_23(D)->mix_events ])
        (nil)))
(debug_insn 56 55 57 5 (var_location:DI mix_event (reg/v:DI 87 [ mix_event ])) Batch_Mix_Correlations.cc:614 -1
     (nil))
(insn 57 56 58 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:DI 87 [ mix_event ])
            (const_int 9999998 [0x98967e]))) Batch_Mix_Correlations.cc:616 8 {*cmpdi_1}
     (nil))
(jump_insn 58 57 690 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) Batch_Mix_Correlations.cc:616 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 71)
;;  succ:       9 [50.0%] 
;;              6 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 87 244 257 270 501 502 503 509 510

;; basic block 6, loop depth 1, count 0, freq 4445, maybe hot
;;  prev block 5, next block 7, flags: (NEW, RTL, MODIFIED)
;;  pred:       5 [50.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 87 244 257 270 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 690 58 692 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 692 690 693 6 (set (pc)
        (label_ref 691)) 659 {jump}
     (nil)
 -> 691)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 87 244 257 270 501 502 503 509 510

(barrier 693 692 76)
;; basic block 7, loop depth 1, count 0, freq 8889, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%] 
;;              16 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u76(6){ }u77(7){ }u78(16){ }u79(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 244 257 270 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84 509
;; lr  def 	 17 [flags] 509
(code_label 76 693 62 7 56 "" [2 uses])
(note 62 76 63 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 7 (parallel [
            (set (reg/v:DI 509 [orig:63 imix ] [63])
                (plus:DI (reg/v:DI 509 [orig:63 imix ] [63])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 64 63 65 7 (var_location:DI imix (reg/v:DI 509 [orig:63 imix ] [63])) -1
     (nil))
(insn 65 64 66 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 84 [ D.158399 ])
            (reg/v:DI 509 [orig:63 imix ] [63]))) 8 {*cmpdi_1}
     (nil))
(jump_insn 66 65 694 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 68)
            (pc))) 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9900 [0x26ac])
            (nil)))
 -> 68)
;;  succ:       5 [99.0%] 
;;              8 [1.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 244 257 270 501 502 503 509 510

;; basic block 8, loop depth 0, count 0, freq 89, maybe hot
;;  prev block 7, next block 9, flags: (NEW, RTL, MODIFIED)
;;  pred:       7 [1.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 694 66 695 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 695 694 696 8 (set (pc)
        (label_ref 653)) 659 {jump}
     (nil)
 -> 653)
;;  succ:       58 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 696 695 71)
;; basic block 9, loop depth 1, count 0, freq 7989, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5 [50.0%] 
;;              10 [10.0%] 
;;              11 [10.0%] 
;;              12 [50.0%] 
;;              13 [50.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u85(6){ }u86(7){ }u87(16){ }u88(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 244 257 270 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85
;; lr  def 	 7 [sp]
(code_label 71 696 72 9 53 "" [5 uses])
(note 72 71 73 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 9 (clobber (mem:BLK (scratch) [0 A8])) Batch_Mix_Correlations.cc:616 -1
     (nil))
(insn 74 73 75 9 (clobber (mem:BLK (reg/f:DI 7 sp) [0 A8])) Batch_Mix_Correlations.cc:616 -1
     (nil))
(insn 75 74 697 9 (set (reg/f:DI 7 sp)
        (reg/f:DI 85 [ saved_stack.77 ])) Batch_Mix_Correlations.cc:616 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 85 [ saved_stack.77 ])
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(jump_insn 697 75 698 9 (set (pc)
        (label_ref 76)) 659 {jump}
     (nil)
 -> 76)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 244 257 270 501 502 503 509 510

(barrier 698 697 691)
;; basic block 10, loop depth 1, count 0, freq 4444, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u92(6){ }u93(7){ }u94(16){ }u95(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 87 244 257 270 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 510
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 101 115 125 132 139 148 302 304 307 311 315 319 320 322 325 328 332 336 337 342 344 346 348 349 350 351 352 353 354 356 357 358 359 360 362 363 364 365 366 368 369 370
(code_label 691 698 80 10 89 "" [1 uses])
(note 80 691 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(debug_insn 83 80 84 10 (var_location:DI D#63 (plus:DI (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 280 [0x118])) [0 .omp_data_i_23(D)->NTrack_Vars+0 S4 A64]))
        (const_int -1 [0xffffffffffffffff]))) Batch_Mix_Correlations.cc:619 -1
     (nil))
(debug_insn 84 83 85 10 (var_location:DI D.157465 (plus:DI (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 280 [0x118])) [0 .omp_data_i_23(D)->NTrack_Vars+0 S4 A64]))
        (const_int -1 [0xffffffffffffffff]))) Batch_Mix_Correlations.cc:619 -1
     (nil))
(debug_insn 85 84 86 10 (var_location:DI D#64 (plus:DI (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 280 [0x118])) [0 .omp_data_i_23(D)->NTrack_Vars+0 S4 A64]))
        (const_int -1 [0xffffffffffffffff]))) Batch_Mix_Correlations.cc:619 -1
     (nil))
(insn 86 85 100 10 (set (reg:DI 302 [ D.158403 ])
        (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 280 [0x118])) [0 .omp_data_i_23(D)->NTrack_Vars+0 S4 A64]))) Batch_Mix_Correlations.cc:619 139 {*zero_extendsidi2_rex64}
     (nil))
(debug_insn 100 86 101 10 (var_location:DI D.157465 (debug_expr:DI D#64)) Batch_Mix_Correlations.cc:619 -1
     (nil))
(debug_insn 101 100 102 10 (var_location:DI D.157473 (plus:DI (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 276 [0x114])) [0 .omp_data_i_23(D)->ntrack_max+0 S4 A32]))
        (const_int -1 [0xffffffffffffffff]))) Batch_Mix_Correlations.cc:619 -1
     (nil))
(insn 102 101 105 10 (set (reg:DI 304 [ D.158403 ])
        (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 276 [0x114])) [0 .omp_data_i_23(D)->ntrack_max+0 S4 A32]))) Batch_Mix_Correlations.cc:619 139 {*zero_extendsidi2_rex64}
     (nil))
(insn 105 102 106 10 (parallel [
            (set (reg:DI 307 [ D.158397 ])
                (mult:DI (reg:DI 302 [ D.158403 ])
                    (reg:DI 304 [ D.158403 ])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:619 354 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 304 [ D.158403 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 106 105 669 10 NOTE_INSN_DELETED)
(note 669 106 109 10 NOTE_INSN_DELETED)
(insn 109 669 110 10 (set (reg:DI 311)
        (plus:DI (mult:DI (reg:DI 307 [ D.158397 ])
                (const_int 4 [0x4]))
            (const_int 18 [0x12]))) Batch_Mix_Correlations.cc:619 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 307 [ D.158397 ])
        (nil)))
(note 110 109 111 10 NOTE_INSN_DELETED)
(insn 111 110 112 10 (parallel [
            (set (reg:DI 315)
                (and:DI (reg:DI 311)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:619 401 {*anddi_1}
     (expr_list:REG_DEAD (reg:DI 311)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 112 111 114 10 (parallel [
            (set (reg/f:DI 7 sp)
                (minus:DI (reg/f:DI 7 sp)
                    (reg:DI 315)))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:619 310 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 315)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 114 112 115 10 NOTE_INSN_DELETED)
(note 115 114 116 10 NOTE_INSN_DELETED)
(insn 116 115 117 10 (set (reg/f:DI 319)
        (reg/f:DI 7 sp)) Batch_Mix_Correlations.cc:619 87 {*movdi_internal_rex64}
     (nil))
(insn 117 116 118 10 (set (reg/f:DI 101 [ track_data_out_private.64 ])
        (reg/f:DI 319)) Batch_Mix_Correlations.cc:619 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 118 117 121 10 (var_location:DI track_data_out_private.64 (reg/f:DI 319)) Batch_Mix_Correlations.cc:619 -1
     (nil))
(debug_insn 121 118 122 10 (var_location:DI D#65 (plus:DI (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 288 [0x120])) [0 .omp_data_i_23(D)->NCluster_Vars+0 S4 A64]))
        (const_int -1 [0xffffffffffffffff]))) Batch_Mix_Correlations.cc:620 -1
     (nil))
(debug_insn 122 121 123 10 (var_location:DI D.157484 (plus:DI (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 288 [0x120])) [0 .omp_data_i_23(D)->NCluster_Vars+0 S4 A64]))
        (const_int -1 [0xffffffffffffffff]))) Batch_Mix_Correlations.cc:620 -1
     (nil))
(debug_insn 123 122 124 10 (var_location:DI D#66 (plus:DI (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 288 [0x120])) [0 .omp_data_i_23(D)->NCluster_Vars+0 S4 A64]))
        (const_int -1 [0xffffffffffffffff]))) Batch_Mix_Correlations.cc:620 -1
     (nil))
(insn 124 123 138 10 (set (reg:DI 320 [ D.158403 ])
        (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 288 [0x120])) [0 .omp_data_i_23(D)->NCluster_Vars+0 S4 A64]))) Batch_Mix_Correlations.cc:620 139 {*zero_extendsidi2_rex64}
     (nil))
(debug_insn 138 124 139 10 (var_location:DI D.157484 (debug_expr:DI D#66)) Batch_Mix_Correlations.cc:620 -1
     (nil))
(debug_insn 139 138 140 10 (var_location:DI D.157492 (plus:DI (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 284 [0x11c])) [0 .omp_data_i_23(D)->ncluster_max+0 S4 A32]))
        (const_int -1 [0xffffffffffffffff]))) Batch_Mix_Correlations.cc:620 -1
     (nil))
(insn 140 139 143 10 (set (reg:DI 322 [ D.158403 ])
        (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 284 [0x11c])) [0 .omp_data_i_23(D)->ncluster_max+0 S4 A32]))) Batch_Mix_Correlations.cc:620 139 {*zero_extendsidi2_rex64}
     (nil))
(insn 143 140 144 10 (parallel [
            (set (reg:DI 325 [ D.158397 ])
                (mult:DI (reg:DI 320 [ D.158403 ])
                    (reg:DI 322 [ D.158403 ])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:620 354 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 322 [ D.158403 ])
        (expr_list:REG_DEAD (reg:DI 320 [ D.158403 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(note 144 143 147 10 NOTE_INSN_DELETED)
(insn 147 144 148 10 (set (reg:DI 328)
        (plus:DI (mult:DI (reg:DI 325 [ D.158397 ])
                (const_int 4 [0x4]))
            (const_int 18 [0x12]))) Batch_Mix_Correlations.cc:620 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 325 [ D.158397 ])
        (nil)))
(note 148 147 149 10 NOTE_INSN_DELETED)
(insn 149 148 150 10 (parallel [
            (set (reg:DI 332)
                (and:DI (reg:DI 328)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:620 401 {*anddi_1}
     (expr_list:REG_DEAD (reg:DI 328)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 150 149 152 10 (parallel [
            (set (reg/f:DI 7 sp)
                (minus:DI (reg/f:DI 7 sp)
                    (reg:DI 332)))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:620 310 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 332)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 152 150 153 10 NOTE_INSN_DELETED)
(note 153 152 154 10 NOTE_INSN_DELETED)
(insn 154 153 155 10 (set (reg/f:DI 336)
        (reg/f:DI 7 sp)) Batch_Mix_Correlations.cc:620 87 {*movdi_internal_rex64}
     (nil))
(insn 155 154 156 10 (set (reg/f:DI 115 [ cluster_data_out_private.65 ])
        (reg/f:DI 336)) Batch_Mix_Correlations.cc:620 87 {*movdi_internal_rex64}
     (nil))
(debug_insn 156 155 163 10 (var_location:DI cluster_data_out_private.65 (reg/f:DI 336)) Batch_Mix_Correlations.cc:620 -1
     (nil))
(debug_insn 163 156 164 10 (var_location:DI D.157503 (plus:DI (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 292 [0x124])) [0 .omp_data_i_23(D)->NEvent_Vars+0 S4 A32]))
        (const_int -1 [0xffffffffffffffff]))) Batch_Mix_Correlations.cc:621 -1
     (nil))
(insn 164 163 167 10 (set (reg:DI 337 [ D.158403 ])
        (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 292 [0x124])) [0 .omp_data_i_23(D)->NEvent_Vars+0 S4 A32]))) Batch_Mix_Correlations.cc:621 139 {*zero_extendsidi2_rex64}
     (nil))
(note 167 164 170 10 NOTE_INSN_DELETED)
(insn 170 167 171 10 (set (reg:DI 342)
        (plus:DI (mult:DI (reg:DI 337 [ D.158403 ])
                (const_int 4 [0x4]))
            (const_int 18 [0x12]))) Batch_Mix_Correlations.cc:621 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 337 [ D.158403 ])
        (nil)))
(insn 171 170 172 10 (parallel [
            (set (reg:DI 344)
                (lshiftrt:DI (reg:DI 342)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:621 556 {*lshrdi3_1}
     (expr_list:REG_DEAD (reg:DI 342)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 172 171 173 10 (parallel [
            (set (reg:DI 346)
                (ashift:DI (reg:DI 344)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:621 522 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 344)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 173 172 175 10 (parallel [
            (set (reg/f:DI 7 sp)
                (minus:DI (reg/f:DI 7 sp)
                    (reg:DI 346)))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:621 310 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 346)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 175 173 176 10 (parallel [
            (set (reg/f:DI 348)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:621 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 176 175 177 10 (parallel [
            (set (reg:DI 349)
                (lshiftrt:DI (reg/f:DI 348)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:621 556 {*lshrdi3_1}
     (expr_list:REG_DEAD (reg/f:DI 348)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (lshiftrt:DI (reg/f:DI 348)
                    (const_int 2 [0x2]))
                (nil)))))
(insn 177 176 179 10 (parallel [
            (set (reg/f:DI 350)
                (ashift:DI (reg:DI 349)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:621 522 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 179 177 180 10 (var_location:DI event_data_out_private.66 (reg/f:DI 350)) Batch_Mix_Correlations.cc:621 -1
     (nil))
(insn 180 179 181 10 (set (reg/f:DI 351 [ .omp_data_i_23(D)->h5readlock ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 200 [0xc8])) [0 .omp_data_i_23(D)->h5readlock+0 S8 A64])) Batch_Mix_Correlations.cc:624 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 200 [0xc8])) [0 .omp_data_i_23(D)->h5readlock+0 S8 A64])
        (nil)))
(insn 181 180 182 10 (set (reg:DI 5 di)
        (reg/f:DI 351 [ .omp_data_i_23(D)->h5readlock ])) Batch_Mix_Correlations.cc:624 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 351 [ .omp_data_i_23(D)->h5readlock ])
        (nil)))
(call_insn 182 181 184 10 (call (mem:QI (symbol_ref:DI ("omp_set_lock") [flags 0x41]  <function_decl 0x2b94cbcf3300 omp_set_lock>) [0 omp_set_lock S1 A8])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:624 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 184 182 185 10 (set (reg/f:DI 125 [ D.158405 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 128 [0x80])) [0 .omp_data_i_23(D)->track_offset+0 S8 A64])) Batch_Mix_Correlations.cc:626 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 128 [0x80])) [0 .omp_data_i_23(D)->track_offset+0 S8 A64])
        (nil)))
(insn 185 184 186 10 (set (mem/j:DI (reg/f:DI 125 [ D.158405 ]) [0 *_94+0 S8 A64])
        (reg/v:DI 87 [ mix_event ])) Batch_Mix_Correlations.cc:626 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 125 [ D.158405 ])
        (nil)))
(insn 186 185 187 10 (set (reg/f:DI 352 [ .omp_data_i_23(D)->track_offset ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 128 [0x80])) [0 .omp_data_i_23(D)->track_offset+0 S8 A64])) Batch_Mix_Correlations.cc:627 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 128 [0x80])) [0 .omp_data_i_23(D)->track_offset+0 S8 A64])
        (nil)))
(insn 187 186 188 10 (set (reg/f:DI 353 [ .omp_data_i_23(D)->track_count ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 136 [0x88])) [0 .omp_data_i_23(D)->track_count+0 S8 A64])) Batch_Mix_Correlations.cc:627 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 136 [0x88])) [0 .omp_data_i_23(D)->track_count+0 S8 A64])
        (nil)))
(insn 188 187 189 10 (set (reg/f:DI 354 [ .omp_data_i_23(D)->track_dataspace ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 88 [0x58])) [0 .omp_data_i_23(D)->track_dataspace+0 S8 A64])) Batch_Mix_Correlations.cc:627 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 88 [0x58])) [0 .omp_data_i_23(D)->track_dataspace+0 S8 A64])
        (nil)))
(insn 189 188 190 10 (set (reg:DI 38 r9)
        (const_int 0 [0])) Batch_Mix_Correlations.cc:627 87 {*movdi_internal_rex64}
     (nil))
(insn 190 189 191 10 (set (reg:DI 37 r8)
        (const_int 0 [0])) Batch_Mix_Correlations.cc:627 87 {*movdi_internal_rex64}
     (nil))
(insn 191 190 192 10 (set (reg:DI 2 cx)
        (reg/f:DI 352 [ .omp_data_i_23(D)->track_offset ])) Batch_Mix_Correlations.cc:627 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 352 [ .omp_data_i_23(D)->track_offset ])
        (nil)))
(insn 192 191 193 10 (set (reg:DI 1 dx)
        (reg/f:DI 353 [ .omp_data_i_23(D)->track_count ])) Batch_Mix_Correlations.cc:627 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 353 [ .omp_data_i_23(D)->track_count ])
        (nil)))
(insn 193 192 194 10 (set (reg:SI 4 si)
        (const_int 0 [0])) Batch_Mix_Correlations.cc:627 89 {*movsi_internal}
     (nil))
(insn 194 193 195 10 (set (reg:DI 5 di)
        (reg/f:DI 354 [ .omp_data_i_23(D)->track_dataspace ])) Batch_Mix_Correlations.cc:627 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 354 [ .omp_data_i_23(D)->track_dataspace ])
        (nil)))
(call_insn 195 194 196 10 (call (mem:QI (symbol_ref:DI ("_ZNK2H59DataSpace15selectHyperslabE13H5S_seloper_tPKyS3_S3_S3_") [flags 0x41]  <function_decl 0x2b94cb998a00 selectHyperslab>) [0 selectHyperslab S1 A8])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:627 665 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (nil))))))))
(note 196 195 197 10 NOTE_INSN_DELETED)
(insn 197 196 198 10 (set (reg/f:DI 356 [ .omp_data_i_23(D)->track_memspace ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 176 [0xb0])) [0 .omp_data_i_23(D)->track_memspace+0 S8 A64])) Batch_Mix_Correlations.cc:628 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 176 [0xb0])) [0 .omp_data_i_23(D)->track_memspace+0 S8 A64])
        (nil)))
(insn 198 197 199 10 (set (reg/f:DI 357 [ .omp_data_i_23(D)->track_dataset ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 80 [0x50])) [0 .omp_data_i_23(D)->track_dataset+0 S8 A64])) Batch_Mix_Correlations.cc:628 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 80 [0x50])) [0 .omp_data_i_23(D)->track_dataset+0 S8 A64])
        (nil)))
(insn 199 198 200 10 (set (reg:DI 38 r9)
        (symbol_ref:DI ("_ZN2H519DSetMemXferPropList7DEFAULTE") [flags 0x40]  <var_decl 0x2b94cba31558 DEFAULT>)) Batch_Mix_Correlations.cc:628 87 {*movdi_internal_rex64}
     (nil))
(insn 200 199 201 10 (set (reg:DI 37 r8)
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 88 [0x58])) [0 .omp_data_i_23(D)->track_dataspace+0 S8 A64])) Batch_Mix_Correlations.cc:628 87 {*movdi_internal_rex64}
     (nil))
(insn 201 200 202 10 (set (reg:DI 2 cx)
        (reg/f:DI 356 [ .omp_data_i_23(D)->track_memspace ])) Batch_Mix_Correlations.cc:628 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 356 [ .omp_data_i_23(D)->track_memspace ])
        (nil)))
(insn 202 201 203 10 (set (reg:DI 1 dx)
        (symbol_ref:DI ("_ZN2H58PredType12NATIVE_FLOATE") [flags 0x40]  <var_decl 0x2b94cba81688 NATIVE_FLOAT>)) Batch_Mix_Correlations.cc:628 87 {*movdi_internal_rex64}
     (nil))
(insn 203 202 204 10 (set (reg:DI 4 si)
        (reg/f:DI 319)) Batch_Mix_Correlations.cc:628 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 319)
        (nil)))
(insn 204 203 205 10 (set (reg:DI 5 di)
        (reg/f:DI 357 [ .omp_data_i_23(D)->track_dataset ])) Batch_Mix_Correlations.cc:628 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 357 [ .omp_data_i_23(D)->track_dataset ])
        (nil)))
(call_insn 205 204 206 10 (call (mem:QI (symbol_ref:DI ("_ZNK2H57DataSet4readEPvRKNS_8DataTypeERKNS_9DataSpaceES7_RKNS_19DSetMemXferPropListE") [flags 0x41]  <function_decl 0x2b94cbad9f00 read>) [0 read S1 A8])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:628 665 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (nil))))))))
(insn 206 205 207 10 (set (reg/f:DI 132 [ D.158405 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 144 [0x90])) [0 .omp_data_i_23(D)->cluster_offset+0 S8 A64])) Batch_Mix_Correlations.cc:630 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 144 [0x90])) [0 .omp_data_i_23(D)->cluster_offset+0 S8 A64])
        (nil)))
(insn 207 206 208 10 (set (mem/j:DI (reg/f:DI 132 [ D.158405 ]) [0 *_104+0 S8 A64])
        (reg/v:DI 87 [ mix_event ])) Batch_Mix_Correlations.cc:630 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 132 [ D.158405 ])
        (nil)))
(insn 208 207 209 10 (set (reg/f:DI 358 [ .omp_data_i_23(D)->cluster_offset ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 144 [0x90])) [0 .omp_data_i_23(D)->cluster_offset+0 S8 A64])) Batch_Mix_Correlations.cc:631 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 144 [0x90])) [0 .omp_data_i_23(D)->cluster_offset+0 S8 A64])
        (nil)))
(insn 209 208 210 10 (set (reg/f:DI 359 [ .omp_data_i_23(D)->cluster_count ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 152 [0x98])) [0 .omp_data_i_23(D)->cluster_count+0 S8 A64])) Batch_Mix_Correlations.cc:631 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 152 [0x98])) [0 .omp_data_i_23(D)->cluster_count+0 S8 A64])
        (nil)))
(insn 210 209 211 10 (set (reg/f:DI 360 [ .omp_data_i_23(D)->cluster_dataspace ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 104 [0x68])) [0 .omp_data_i_23(D)->cluster_dataspace+0 S8 A64])) Batch_Mix_Correlations.cc:631 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 104 [0x68])) [0 .omp_data_i_23(D)->cluster_dataspace+0 S8 A64])
        (nil)))
(insn 211 210 212 10 (set (reg:DI 38 r9)
        (const_int 0 [0])) Batch_Mix_Correlations.cc:631 87 {*movdi_internal_rex64}
     (nil))
(insn 212 211 213 10 (set (reg:DI 37 r8)
        (const_int 0 [0])) Batch_Mix_Correlations.cc:631 87 {*movdi_internal_rex64}
     (nil))
(insn 213 212 214 10 (set (reg:DI 2 cx)
        (reg/f:DI 358 [ .omp_data_i_23(D)->cluster_offset ])) Batch_Mix_Correlations.cc:631 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 358 [ .omp_data_i_23(D)->cluster_offset ])
        (nil)))
(insn 214 213 215 10 (set (reg:DI 1 dx)
        (reg/f:DI 359 [ .omp_data_i_23(D)->cluster_count ])) Batch_Mix_Correlations.cc:631 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 359 [ .omp_data_i_23(D)->cluster_count ])
        (nil)))
(insn 215 214 216 10 (set (reg:SI 4 si)
        (const_int 0 [0])) Batch_Mix_Correlations.cc:631 89 {*movsi_internal}
     (nil))
(insn 216 215 217 10 (set (reg:DI 5 di)
        (reg/f:DI 360 [ .omp_data_i_23(D)->cluster_dataspace ])) Batch_Mix_Correlations.cc:631 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 360 [ .omp_data_i_23(D)->cluster_dataspace ])
        (nil)))
(call_insn 217 216 218 10 (call (mem:QI (symbol_ref:DI ("_ZNK2H59DataSpace15selectHyperslabE13H5S_seloper_tPKyS3_S3_S3_") [flags 0x41]  <function_decl 0x2b94cb998a00 selectHyperslab>) [0 selectHyperslab S1 A8])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:631 665 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (nil))))))))
(note 218 217 219 10 NOTE_INSN_DELETED)
(insn 219 218 220 10 (set (reg/f:DI 362 [ .omp_data_i_23(D)->cluster_memspace ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 184 [0xb8])) [0 .omp_data_i_23(D)->cluster_memspace+0 S8 A64])) Batch_Mix_Correlations.cc:632 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 184 [0xb8])) [0 .omp_data_i_23(D)->cluster_memspace+0 S8 A64])
        (nil)))
(insn 220 219 221 10 (set (reg/f:DI 363 [ .omp_data_i_23(D)->cluster_dataset ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 96 [0x60])) [0 .omp_data_i_23(D)->cluster_dataset+0 S8 A64])) Batch_Mix_Correlations.cc:632 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 96 [0x60])) [0 .omp_data_i_23(D)->cluster_dataset+0 S8 A64])
        (nil)))
(insn 221 220 222 10 (set (reg:DI 38 r9)
        (symbol_ref:DI ("_ZN2H519DSetMemXferPropList7DEFAULTE") [flags 0x40]  <var_decl 0x2b94cba31558 DEFAULT>)) Batch_Mix_Correlations.cc:632 87 {*movdi_internal_rex64}
     (nil))
(insn 222 221 223 10 (set (reg:DI 37 r8)
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 104 [0x68])) [0 .omp_data_i_23(D)->cluster_dataspace+0 S8 A64])) Batch_Mix_Correlations.cc:632 87 {*movdi_internal_rex64}
     (nil))
(insn 223 222 224 10 (set (reg:DI 2 cx)
        (reg/f:DI 362 [ .omp_data_i_23(D)->cluster_memspace ])) Batch_Mix_Correlations.cc:632 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 362 [ .omp_data_i_23(D)->cluster_memspace ])
        (nil)))
(insn 224 223 225 10 (set (reg:DI 1 dx)
        (symbol_ref:DI ("_ZN2H58PredType12NATIVE_FLOATE") [flags 0x40]  <var_decl 0x2b94cba81688 NATIVE_FLOAT>)) Batch_Mix_Correlations.cc:632 87 {*movdi_internal_rex64}
     (nil))
(insn 225 224 226 10 (set (reg:DI 4 si)
        (reg/f:DI 336)) Batch_Mix_Correlations.cc:632 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 336)
        (nil)))
(insn 226 225 227 10 (set (reg:DI 5 di)
        (reg/f:DI 363 [ .omp_data_i_23(D)->cluster_dataset ])) Batch_Mix_Correlations.cc:632 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 363 [ .omp_data_i_23(D)->cluster_dataset ])
        (nil)))
(call_insn 227 226 228 10 (call (mem:QI (symbol_ref:DI ("_ZNK2H57DataSet4readEPvRKNS_8DataTypeERKNS_9DataSpaceES7_RKNS_19DSetMemXferPropListE") [flags 0x41]  <function_decl 0x2b94cbad9f00 read>) [0 read S1 A8])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:632 665 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (nil))))))))
(insn 228 227 229 10 (set (reg/f:DI 139 [ D.158408 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 160 [0xa0])) [0 .omp_data_i_23(D)->event_offset+0 S8 A64])) Batch_Mix_Correlations.cc:634 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 160 [0xa0])) [0 .omp_data_i_23(D)->event_offset+0 S8 A64])
        (nil)))
(insn 229 228 230 10 (set (mem/j:DI (reg/f:DI 139 [ D.158408 ]) [0 *_114+0 S8 A64])
        (reg/v:DI 87 [ mix_event ])) Batch_Mix_Correlations.cc:634 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 139 [ D.158408 ])
        (expr_list:REG_DEAD (reg/v:DI 87 [ mix_event ])
            (nil))))
(insn 230 229 231 10 (set (reg/f:DI 364 [ .omp_data_i_23(D)->event_offset ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 160 [0xa0])) [0 .omp_data_i_23(D)->event_offset+0 S8 A64])) Batch_Mix_Correlations.cc:635 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 160 [0xa0])) [0 .omp_data_i_23(D)->event_offset+0 S8 A64])
        (nil)))
(insn 231 230 232 10 (set (reg/f:DI 365 [ .omp_data_i_23(D)->event_count ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 168 [0xa8])) [0 .omp_data_i_23(D)->event_count+0 S8 A64])) Batch_Mix_Correlations.cc:635 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 168 [0xa8])) [0 .omp_data_i_23(D)->event_count+0 S8 A64])
        (nil)))
(insn 232 231 233 10 (set (reg/f:DI 366 [ .omp_data_i_23(D)->event_dataspace ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 120 [0x78])) [0 .omp_data_i_23(D)->event_dataspace+0 S8 A64])) Batch_Mix_Correlations.cc:635 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 120 [0x78])) [0 .omp_data_i_23(D)->event_dataspace+0 S8 A64])
        (nil)))
(insn 233 232 234 10 (set (reg:DI 38 r9)
        (const_int 0 [0])) Batch_Mix_Correlations.cc:635 87 {*movdi_internal_rex64}
     (nil))
(insn 234 233 235 10 (set (reg:DI 37 r8)
        (const_int 0 [0])) Batch_Mix_Correlations.cc:635 87 {*movdi_internal_rex64}
     (nil))
(insn 235 234 236 10 (set (reg:DI 2 cx)
        (reg/f:DI 364 [ .omp_data_i_23(D)->event_offset ])) Batch_Mix_Correlations.cc:635 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 364 [ .omp_data_i_23(D)->event_offset ])
        (nil)))
(insn 236 235 237 10 (set (reg:DI 1 dx)
        (reg/f:DI 365 [ .omp_data_i_23(D)->event_count ])) Batch_Mix_Correlations.cc:635 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 365 [ .omp_data_i_23(D)->event_count ])
        (nil)))
(insn 237 236 238 10 (set (reg:SI 4 si)
        (const_int 0 [0])) Batch_Mix_Correlations.cc:635 89 {*movsi_internal}
     (nil))
(insn 238 237 239 10 (set (reg:DI 5 di)
        (reg/f:DI 366 [ .omp_data_i_23(D)->event_dataspace ])) Batch_Mix_Correlations.cc:635 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 366 [ .omp_data_i_23(D)->event_dataspace ])
        (nil)))
(call_insn 239 238 240 10 (call (mem:QI (symbol_ref:DI ("_ZNK2H59DataSpace15selectHyperslabE13H5S_seloper_tPKyS3_S3_S3_") [flags 0x41]  <function_decl 0x2b94cb998a00 selectHyperslab>) [0 selectHyperslab S1 A8])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:635 665 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:SI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (nil))))))))
(note 240 239 241 10 NOTE_INSN_DELETED)
(insn 241 240 242 10 (set (reg/f:DI 368 [ .omp_data_i_23(D)->event_memspace ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 192 [0xc0])) [0 .omp_data_i_23(D)->event_memspace+0 S8 A64])) Batch_Mix_Correlations.cc:636 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 192 [0xc0])) [0 .omp_data_i_23(D)->event_memspace+0 S8 A64])
        (nil)))
(insn 242 241 243 10 (set (reg/f:DI 369 [ .omp_data_i_23(D)->event_dataset ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 112 [0x70])) [0 .omp_data_i_23(D)->event_dataset+0 S8 A64])) Batch_Mix_Correlations.cc:636 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 112 [0x70])) [0 .omp_data_i_23(D)->event_dataset+0 S8 A64])
        (nil)))
(insn 243 242 244 10 (set (reg:DI 38 r9)
        (symbol_ref:DI ("_ZN2H519DSetMemXferPropList7DEFAULTE") [flags 0x40]  <var_decl 0x2b94cba31558 DEFAULT>)) Batch_Mix_Correlations.cc:636 87 {*movdi_internal_rex64}
     (nil))
(insn 244 243 245 10 (set (reg:DI 37 r8)
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 120 [0x78])) [0 .omp_data_i_23(D)->event_dataspace+0 S8 A64])) Batch_Mix_Correlations.cc:636 87 {*movdi_internal_rex64}
     (nil))
(insn 245 244 246 10 (set (reg:DI 2 cx)
        (reg/f:DI 368 [ .omp_data_i_23(D)->event_memspace ])) Batch_Mix_Correlations.cc:636 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 368 [ .omp_data_i_23(D)->event_memspace ])
        (nil)))
(insn 246 245 247 10 (set (reg:DI 1 dx)
        (symbol_ref:DI ("_ZN2H58PredType12NATIVE_FLOATE") [flags 0x40]  <var_decl 0x2b94cba81688 NATIVE_FLOAT>)) Batch_Mix_Correlations.cc:636 87 {*movdi_internal_rex64}
     (nil))
(insn 247 246 248 10 (set (reg:DI 4 si)
        (reg/f:DI 350)) Batch_Mix_Correlations.cc:636 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 350)
        (nil)))
(insn 248 247 249 10 (set (reg:DI 5 di)
        (reg/f:DI 369 [ .omp_data_i_23(D)->event_dataset ])) Batch_Mix_Correlations.cc:636 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 369 [ .omp_data_i_23(D)->event_dataset ])
        (nil)))
(call_insn 249 248 250 10 (call (mem:QI (symbol_ref:DI ("_ZNK2H57DataSet4readEPvRKNS_8DataTypeERKNS_9DataSpaceES7_RKNS_19DSetMemXferPropListE") [flags 0x41]  <function_decl 0x2b94cbad9f00 read>) [0 read S1 A8])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:636 665 {*call}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:DI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:DI 2 cx)
                        (expr_list:REG_DEAD (reg:DI 1 dx)
                            (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 38 r9))
                            (nil))))))))
(insn 250 249 251 10 (set (reg/f:DI 370 [ .omp_data_i_23(D)->h5readlock ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 200 [0xc8])) [0 .omp_data_i_23(D)->h5readlock+0 S8 A64])) Batch_Mix_Correlations.cc:638 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 200 [0xc8])) [0 .omp_data_i_23(D)->h5readlock+0 S8 A64])
        (nil)))
(insn 251 250 252 10 (set (reg:DI 5 di)
        (reg/f:DI 370 [ .omp_data_i_23(D)->h5readlock ])) Batch_Mix_Correlations.cc:638 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 370 [ .omp_data_i_23(D)->h5readlock ])
        (nil)))
(call_insn 252 251 254 10 (call (mem:QI (symbol_ref:DI ("omp_unset_lock") [flags 0x41]  <function_decl 0x2b94cbcf3400 omp_unset_lock>) [0 omp_unset_lock S1 A8])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:638 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 254 252 255 10 (set (reg:SF 148 [ D.158409 ])
        (mem/j:SF (mult:DI (reg:DI 349)
                (const_int 4 [0x4])) [0 *event_data_out_private.66_90+0 S4 A32])) Batch_Mix_Correlations.cc:651 135 {*movsf_internal}
     (nil))
(debug_insn 255 254 256 10 (var_location:SF __x (reg:SF 148 [ D.158409 ])) Batch_Mix_Correlations.cc:651 -1
     (nil))
(insn 256 255 257 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 148 [ D.158409 ])
            (reg:SF 148 [ D.158409 ]))) Batch_Mix_Correlations.cc:651 57 {*cmpiusf_sse}
     (nil))
(jump_insn 257 256 258 10 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) Batch_Mix_Correlations.cc:651 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 1000 [0x3e8])
            (nil)))
 -> 71)
;;  succ:       9 [10.0%] 
;;              11 [90.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 148 244 257 270 302 349 501 502 503 509 510

;; basic block 11, loop depth 1, count 0, freq 4000, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 [90.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u265(6){ }u266(7){ }u267(16){ }u268(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 148 244 257 270 302 349 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 349
;; lr  def 	 17 [flags] 149
(note 258 257 259 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 11 (set (reg:SF 149 [ D.158409 ])
        (mem/j:SF (plus:DI (mult:DI (reg:DI 349)
                    (const_int 4 [0x4]))
                (const_int 4 [0x4])) [0 *event_data_out_private.66_90+4 S4 A32])) Batch_Mix_Correlations.cc:652 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:DI 349)
        (nil)))
(debug_insn 260 259 261 11 (var_location:SF __x (reg:SF 149 [ D.158409 ])) Batch_Mix_Correlations.cc:652 -1
     (nil))
(insn 261 260 262 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 149 [ D.158409 ])
            (reg:SF 149 [ D.158409 ]))) Batch_Mix_Correlations.cc:652 57 {*cmpiusf_sse}
     (nil))
(jump_insn 262 261 263 11 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) Batch_Mix_Correlations.cc:652 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 1000 [0x3e8])
            (nil)))
 -> 71)
;;  succ:       9 [10.0%] 
;;              12 [90.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 148 149 244 257 270 302 501 502 503 509 510

;; basic block 12, loop depth 1, count 0, freq 3600, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 [90.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u274(6){ }u275(7){ }u276(16){ }u277(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 148 149 244 257 270 302 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 148 501 510
;; lr  def 	 17 [flags] 371 372 373 374 375
(note 263 262 652 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(debug_insn 652 263 264 12 (var_location:DI D#67 (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
        (const_int 40 [0x28]))) -1
     (nil))
(debug_insn 264 652 265 12 (var_location:DF __x (minus:DF (mem/j:DF (plus:DI (mem/f/j:DI (debug_expr:DI D#67) [0 .omp_data_i_23(D)->primary_vertex+0 S8 A64])
                (const_int 16 [0x10])) [0 *_129+16 S8 A64])
        (float_extend:DF (reg:SF 148 [ D.158409 ])))) Batch_Mix_Correlations.cc:653 -1
     (nil))
(insn 265 264 266 12 (set (reg/f:DI 371 [ .omp_data_i_23(D)->primary_vertex ])
        (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 40 [0x28])) [0 .omp_data_i_23(D)->primary_vertex+0 S8 A64])) Batch_Mix_Correlations.cc:653 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 40 [0x28])) [0 .omp_data_i_23(D)->primary_vertex+0 S8 A64])
        (nil)))
(insn 266 265 267 12 (set (reg:DF 372 [ D.158411 ])
        (float_extend:DF (reg:SF 148 [ D.158409 ]))) Batch_Mix_Correlations.cc:653 159 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 148 [ D.158409 ])
        (nil)))
(insn 267 266 268 12 (set (reg:DF 374 [ *_129+16 ])
        (mem/j:DF (plus:DI (reg/f:DI 371 [ .omp_data_i_23(D)->primary_vertex ])
                (const_int 16 [0x10])) [0 *_129+16 S8 A64])) Batch_Mix_Correlations.cc:653 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 371 [ .omp_data_i_23(D)->primary_vertex ])
        (nil)))
(insn 268 267 270 12 (set (reg:DF 373 [ D.158411 ])
        (minus:DF (reg:DF 374 [ *_129+16 ])
            (reg:DF 372 [ D.158411 ]))) Batch_Mix_Correlations.cc:653 794 {*fop_df_1_sse}
     (expr_list:REG_DEAD (reg:DF 374 [ *_129+16 ])
        (expr_list:REG_DEAD (reg:DF 372 [ D.158411 ])
            (nil))))
(insn 270 268 271 12 (parallel [
            (set (reg:DF 375 [ D.158411 ])
                (abs:DF (reg:DF 373 [ D.158411 ])))
            (use (reg:V2DF 501))
            (clobber (reg:CC 17 flags))
        ]) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:82 480 {*absnegdf2_sse}
     (expr_list:REG_DEAD (reg:DF 373 [ D.158411 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(note 271 270 272 12 NOTE_INSN_DELETED)
(insn 272 271 273 12 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 375 [ D.158411 ])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0 S8 A64]))) Batch_Mix_Correlations.cc:653 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 375 [ D.158411 ])
        (nil)))
(jump_insn 273 272 274 12 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) Batch_Mix_Correlations.cc:653 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 71)
;;  succ:       9 [50.0%] 
;;              13 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 149 244 257 270 302 501 502 503 509 510

;; basic block 13, loop depth 1, count 0, freq 1800, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 [50.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u291(6){ }u292(7){ }u293(16){ }u294(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 149 244 257 270 302 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 149 502 510
;; lr  def 	 17 [flags] 378 379 380
(note 274 273 275 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(debug_insn 275 274 276 13 (var_location:SF __x (minus:SF (mem/j:SF (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 296 [0x128])) [0 .omp_data_i_23(D)->multiplicity_sum+0 S4 A64])
        (reg:SF 149 [ D.158409 ]))) Batch_Mix_Correlations.cc:654 -1
     (nil))
(insn 276 275 277 13 (set (reg:SF 379 [ .omp_data_i_23(D)->multiplicity_sum ])
        (mem/j:SF (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 296 [0x128])) [0 .omp_data_i_23(D)->multiplicity_sum+0 S4 A64])) Batch_Mix_Correlations.cc:654 135 {*movsf_internal}
     (expr_list:REG_EQUIV (mem/j:SF (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                (const_int 296 [0x128])) [0 .omp_data_i_23(D)->multiplicity_sum+0 S4 A64])
        (nil)))
(insn 277 276 279 13 (set (reg:SF 378 [ D.158409 ])
        (minus:SF (reg:SF 379 [ .omp_data_i_23(D)->multiplicity_sum ])
            (reg:SF 149 [ D.158409 ]))) Batch_Mix_Correlations.cc:654 793 {*fop_sf_1_sse}
     (expr_list:REG_DEAD (reg:SF 379 [ .omp_data_i_23(D)->multiplicity_sum ])
        (expr_list:REG_DEAD (reg:SF 149 [ D.158409 ])
            (nil))))
(insn 279 277 280 13 (parallel [
            (set (reg:SF 380 [ D.158409 ])
                (abs:SF (reg:SF 378 [ D.158409 ])))
            (use (reg:V4SF 502))
            (clobber (reg:CC 17 flags))
        ]) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 479 {*absnegsf2_sse}
     (expr_list:REG_DEAD (reg:SF 378 [ D.158409 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 280 279 281 13 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 380 [ D.158409 ])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0 S4 A32]))) Batch_Mix_Correlations.cc:654 57 {*cmpiusf_sse}
     (expr_list:REG_DEAD (reg:SF 380 [ D.158409 ])
        (nil)))
(jump_insn 281 280 282 13 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) Batch_Mix_Correlations.cc:654 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 71)
;;  succ:       9 [50.0%] 
;;              14 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 244 257 270 302 501 502 503 509 510

;; basic block 14, loop depth 1, count 0, freq 900, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 [50.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u305(6){ }u306(7){ }u307(16){ }u308(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 244 257 270 302 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 510
;; lr  def 	 17 [flags]
(note 282 281 283 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/j:QI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 308 [0x134])) [0 .omp_data_i_23(D)->first_cluster+0 S1 A32])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:655 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 284 283 699 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 625)
            (pc))) Batch_Mix_Correlations.cc:655 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 625)
;;  succ:       54 [50.0%] 
;;              15 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 244 257 270 302 501 502 503 509 510

;; basic block 15, loop depth 1, count 0, freq 450, maybe hot
;;  prev block 14, next block 16, flags: (NEW, RTL, MODIFIED)
;;  pred:       14 [50.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 244 257 270 302 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 699 284 700 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(jump_insn 700 699 701 15 (set (pc)
        (label_ref 628)) 659 {jump}
     (nil)
 -> 628)
;;  succ:       55 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 244 257 270 302 501 502 503 509 510

(barrier 701 700 312)
;; basic block 16, loop depth 1, count 0, freq 900, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       55 [9.0%] 
;;              19 [100.0%]  (LOOP_EXIT)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u311(6){ }u312(7){ }u313(16){ }u314(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 244 257 270 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85
;; lr  def 	 7 [sp]
(code_label 312 701 288 16 61 "" [2 uses])
(note 288 312 289 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 289 288 290 16 (clobber (mem:BLK (scratch) [0 A8])) -1
     (nil))
(insn 290 289 291 16 (clobber (mem:BLK (reg/f:DI 7 sp) [0 A8])) -1
     (nil))
(insn 291 290 702 16 (set (reg/f:DI 7 sp)
        (reg/f:DI 85 [ saved_stack.77 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 85 [ saved_stack.77 ])
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(jump_insn 702 291 703 16 (set (pc)
        (label_ref 76)) 659 {jump}
     (nil)
 -> 76)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 244 257 270 501 502 503 509 510

(barrier 703 702 639)
;; basic block 17, loop depth 2, count 0, freq 9100, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       18 [91.0%] 
;;              56 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u318(6){ }u319(7){ }u320(16){ }u321(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 512 513 514
;; lr  def 	 17 [flags] 152 164 382
(code_label 639 703 295 17 84 "" [2 uses])
(note 295 639 296 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(debug_insn 296 295 297 17 (var_location:DI itrack (reg/v:DI 514 [orig:282 itrack ] [282])) -1
     (nil))
(insn 297 296 298 17 (parallel [
            (set (reg:DI 382 [ D.158397 ])
                (mult:DI (reg:DI 513 [orig:163 D.158397 ] [163])
                    (reg/v:DI 514 [orig:282 itrack ] [282])))
            (clobber (reg:CC 17 flags))
        ]) 354 {*muldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(note 298 297 299 17 NOTE_INSN_DELETED)
(insn 299 298 300 17 (set (reg/f:DI 152 [ D.158412 ])
        (plus:DI (mult:DI (reg:DI 382 [ D.158397 ])
                (const_int 4 [0x4]))
            (reg/f:DI 512 [orig:101 track_data_out_private.64 ] [101]))) 267 {*leadi}
     (expr_list:REG_DEAD (reg:DI 382 [ D.158397 ])
        (nil)))
(insn 300 299 301 17 (set (reg:SF 164 [ D.158409 ])
        (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 4 [0x4])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 4B]+0 S4 A32])) Batch_Mix_Correlations.cc:659 135 {*movsf_internal}
     (nil))
(debug_insn 301 300 302 17 (var_location:SF __x (reg:SF 164 [ D.158409 ])) Batch_Mix_Correlations.cc:659 -1
     (nil))
(insn 302 301 303 17 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 164 [ D.158409 ])
            (reg:SF 164 [ D.158409 ]))) Batch_Mix_Correlations.cc:659 57 {*cmpiusf_sse}
     (nil))
(jump_insn 303 302 319 17 (set (pc)
        (if_then_else (ordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 316)
            (pc))) Batch_Mix_Correlations.cc:659 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 9000 [0x2328])
            (nil)))
 -> 316)
;;  succ:       18 [10.0%]  (FALLTHRU)
;;              20 [90.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 164 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 18, loop depth 2, count 0, freq 9100, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 [10.0%]  (FALLTHRU)
;;              20 [50.0%] 
;;              21 [50.0%] 
;;              22 [50.0%] 
;;              23 [50.0%] 
;;              24 [50.0%] 
;;              25 [71.0%] 
;;              29 [9.0%] 
;;              49 [100.0%] 
;;              26 [50.0%] 
;;              33 [100.0%]  (LOOP_EXIT)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u333(6){ }u334(7){ }u335(16){ }u336(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 514 515
;; lr  def 	 17 [flags] 384 514
(code_label 319 303 304 18 62 "" [10 uses])
(note 304 319 305 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 305 304 307 18 (parallel [
            (set (reg/v:DI 514 [orig:282 itrack ] [282])
                (plus:DI (reg/v:DI 514 [orig:282 itrack ] [282])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:658 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 307 305 309 18 (var_location:DI itrack (reg/v:DI 514 [orig:282 itrack ] [282])) -1
     (nil))
(insn 309 307 310 18 (set (reg:DI 384 [ D.158414 ])
        (zero_extend:DI (mem/j:SI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                    (const_int 276 [0x114])) [0 .omp_data_i_23(D)->ntrack_max+0 S4 A32]))) Batch_Mix_Correlations.cc:658 139 {*zero_extendsidi2_rex64}
     (nil))
(insn 310 309 311 18 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 384 [ D.158414 ])
            (reg/v:DI 514 [orig:282 itrack ] [282]))) Batch_Mix_Correlations.cc:658 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 384 [ D.158414 ])
        (nil)))
(jump_insn 311 310 704 18 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 639)
            (pc))) Batch_Mix_Correlations.cc:658 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 639)
;;  succ:       17 [91.0%] 
;;              19 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 19, loop depth 1, count 0, freq 819, maybe hot
;;  prev block 18, next block 20, flags: (NEW, RTL, MODIFIED)
;;  pred:       18 [9.0%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 244 257 270 501 502 503 511 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 511 515
;; lr  def 	 509 510
(note 704 311 733 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 733 704 734 19 (set (reg/v:DI 509 [orig:63 imix ] [63])
        (reg/v:DI 511 [orig:63 imix ] [63])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v:DI 511 [orig:63 imix ] [63])
        (nil)))
(insn 734 733 705 19 (set (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
        (reg/f:DI 515 [orig:292 .omp_data_i ] [292])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
        (nil)))
(jump_insn 705 734 706 19 (set (pc)
        (label_ref 312)) 659 {jump}
     (nil)
 -> 312)
;;  succ:       16 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 244 257 270 501 502 503 509 510

(barrier 706 705 316)
;; basic block 20, loop depth 2, count 0, freq 8190, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       17 [90.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u343(6){ }u344(7){ }u345(16){ }u346(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 164 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152 515
;; lr  def 	 17 [flags] 166 385 387
(code_label 316 706 317 20 59 "" [1 uses])
(note 317 316 318 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 318 317 320 20 (set (reg:DF 166 [ D.158411 ])
        (float_extend:DF (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                    (const_int 16 [0x10])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 16B]+0 S4 A32]))) Batch_Mix_Correlations.cc:661 159 {*extendsfdf2_sse}
     (nil))
(note 320 318 321 20 NOTE_INSN_DELETED)
(insn 321 320 322 20 (set (reg:DF 385 [ D.158411 ])
        (plus:DF (reg:DF 166 [ D.158411 ])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0 S8 A64]))) Batch_Mix_Correlations.cc:661 787 {*fop_df_comm_sse}
     (nil))
(insn 322 321 323 20 (set (reg:SI 387 [ D.158400 ])
        (fix:SI (reg:DF 385 [ D.158411 ]))) Batch_Mix_Correlations.cc:661 179 {fix_truncdfsi_sse}
     (expr_list:REG_DEAD (reg:DF 385 [ D.158411 ])
        (nil)))
(note 323 322 324 20 NOTE_INSN_DELETED)
(insn 324 323 325 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (and:SI (reg:SI 387 [ D.158400 ])
                (mem/j:SI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                        (const_int 264 [0x108])) [0 .omp_data_i_23(D)->Track_Cut_Bit+0 S4 A64]))
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:661 394 {*testsi_1}
     (expr_list:REG_DEAD (reg:SI 387 [ D.158400 ])
        (nil)))
(jump_insn 325 324 326 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) Batch_Mix_Correlations.cc:661 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 319)
;;  succ:       18 [50.0%] 
;;              21 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 164 166 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 21, loop depth 2, count 0, freq 4095, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       20 [50.0%]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u355(6){ }u356(7){ }u357(16){ }u358(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 164 166 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 164
;; lr  def 	 17 [flags] 389
(note 326 325 327 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 327 326 328 21 (set (reg:SF 389)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0 S4 A32])) Batch_Mix_Correlations.cc:662 135 {*movsf_internal}
     (expr_list:REG_EQUIV (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 328 327 329 21 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 389)
            (reg:SF 164 [ D.158409 ]))) Batch_Mix_Correlations.cc:662 57 {*cmpiusf_sse}
     (expr_list:REG_DEAD (reg:SF 389)
        (nil)))
(jump_insn 329 328 330 21 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) Batch_Mix_Correlations.cc:662 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 319)
;;  succ:       18 [50.0%] 
;;              22 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 164 166 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 22, loop depth 2, count 0, freq 2047, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 [50.0%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u362(6){ }u363(7){ }u364(16){ }u365(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 164 166 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 164
;; lr  def 	 17 [flags]
(note 330 329 331 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 331 330 332 22 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 164 [ D.158409 ])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0 S4 A32]))) Batch_Mix_Correlations.cc:663 57 {*cmpiusf_sse}
     (expr_list:REG_DEAD (reg:SF 164 [ D.158409 ])
        (nil)))
(jump_insn 332 331 333 22 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) Batch_Mix_Correlations.cc:663 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 319)
;;  succ:       18 [50.0%] 
;;              23 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 166 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 23, loop depth 2, count 0, freq 1024, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 [50.0%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u368(6){ }u369(7){ }u370(16){ }u371(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 166 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  def 	 17 [flags] 390 392 393 394 395
(note 333 332 334 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(note 334 333 335 23 NOTE_INSN_DELETED)
(insn 335 334 336 23 (set (reg:SI 390 [ D.158400 ])
        (fix:SI (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                    (const_int 8 [0x8])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 8B]+0 S4 A32]))) Batch_Mix_Correlations.cc:664 177 {fix_truncsfsi_sse}
     (nil))
(insn 336 335 337 23 (parallel [
            (set (reg:SI 392)
                (ashiftrt:SI (reg:SI 390 [ D.158400 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:664 548 {ashrsi3_cvt}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 337 336 338 23 (parallel [
            (set (reg:SI 393)
                (xor:SI (reg:SI 392)
                    (reg:SI 390 [ D.158400 ])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:664 422 {*xorsi_1}
     (expr_list:REG_DEAD (reg:SI 390 [ D.158400 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 338 337 339 23 (parallel [
            (set (reg:SI 394 [ D.158400 ])
                (minus:SI (reg:SI 393)
                    (reg:SI 392)))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:664 309 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 393)
        (expr_list:REG_DEAD (reg:SI 392)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 339 338 340 23 (set (reg:DF 395 [ D.158411 ])
        (float:DF (reg:SI 394 [ D.158400 ]))) Batch_Mix_Correlations.cc:664 242 {*floatsidf2_sse_interunit}
     (expr_list:REG_DEAD (reg:SI 394 [ D.158400 ])
        (nil)))
(note 340 339 341 23 NOTE_INSN_DELETED)
(insn 341 340 342 23 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 395 [ D.158411 ])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0 S8 A64]))) Batch_Mix_Correlations.cc:664 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 395 [ D.158411 ])
        (nil)))
(jump_insn 342 341 343 23 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) Batch_Mix_Correlations.cc:664 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 319)
;;  succ:       18 [50.0%] 
;;              24 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 166 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 24, loop depth 2, count 0, freq 512, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 [50.0%]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u383(6){ }u384(7){ }u385(16){ }u386(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 166 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  def 	 17 [flags] 175 397
(note 343 342 344 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 344 343 345 24 (set (reg:SF 175 [ D.158409 ])
        (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 28 [0x1c])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 28B]+0 S4 A32])) Batch_Mix_Correlations.cc:665 135 {*movsf_internal}
     (nil))
(insn 345 344 346 24 (set (reg:SF 397)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0 S4 A32])) Batch_Mix_Correlations.cc:665 135 {*movsf_internal}
     (expr_list:REG_EQUIV (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))
(insn 346 345 347 24 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 397)
            (reg:SF 175 [ D.158409 ]))) Batch_Mix_Correlations.cc:665 57 {*cmpiusf_sse}
     (expr_list:REG_DEAD (reg:SF 397)
        (nil)))
(jump_insn 347 346 348 24 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) Batch_Mix_Correlations.cc:665 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 319)
;;  succ:       18 [50.0%] 
;;              25 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 166 175 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 25, loop depth 2, count 0, freq 256, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       24 [50.0%]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u391(6){ }u392(7){ }u393(16){ }u394(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 166 175 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152 175
;; lr  def 	 17 [flags] 398 399
(note 348 347 349 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 349 348 350 25 (set (reg:SF 399 [ MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 32B] ])
        (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 32 [0x20])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 32B]+0 S4 A32])) Batch_Mix_Correlations.cc:666 135 {*movsf_internal}
     (expr_list:REG_EQUIV (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 32 [0x20])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 32B]+0 S4 A32])
        (nil)))
(insn 350 349 351 25 (set (reg:SF 398 [ D.158409 ])
        (div:SF (reg:SF 399 [ MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 32B] ])
            (reg:SF 175 [ D.158409 ]))) Batch_Mix_Correlations.cc:666 793 {*fop_sf_1_sse}
     (expr_list:REG_DEAD (reg:SF 399 [ MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 32B] ])
        (expr_list:REG_DEAD (reg:SF 175 [ D.158409 ])
            (nil))))
(insn 351 350 352 25 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 398 [ D.158409 ])
            (mem/u/c:SF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0 S4 A32]))) Batch_Mix_Correlations.cc:666 57 {*cmpiusf_sse}
     (expr_list:REG_DEAD (reg:SF 398 [ D.158409 ])
        (nil)))
(jump_insn 352 351 353 25 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) Batch_Mix_Correlations.cc:666 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil)))
 -> 319)
;;  succ:       18 [71.0%] 
;;              26 [29.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 166 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 26, loop depth 2, count 0, freq 74, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 [29.0%]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u400(6){ }u401(7){ }u402(16){ }u403(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 166 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152 166 503
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 179 400 401 404 406 407 408
(note 353 352 354 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(debug_insn 354 353 355 26 (var_location:SF d (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
            (const_int 36 [0x24])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 36B]+0 S4 A32])) Batch_Mix_Correlations.cc:667 -1
     (nil))
(debug_insn 355 354 356 26 (var_location:SF __x (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
            (const_int 36 [0x24])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 36B]+0 S4 A32])) -1
     (nil))
(insn 356 355 358 26 (set (reg:SF 401 [ MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 36B] ])
        (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 36 [0x24])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 36B]+0 S4 A32])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 135 {*movsf_internal}
     (expr_list:REG_EQUIV (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 36 [0x24])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 36B]+0 S4 A32])
        (nil)))
(insn 358 356 359 26 (parallel [
            (set (reg:SF 400 [ D.158409 ])
                (abs:SF (reg:SF 401 [ MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 36B] ])))
            (use (reg:V4SF 503))
            (clobber (reg:CC 17 flags))
        ]) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 479 {*absnegsf2_sse}
     (expr_list:REG_DEAD (reg:SF 401 [ MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 36B] ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 359 358 360 26 (set (reg:DF 179 [ D.158411 ])
        (float_extend:DF (reg:SF 400 [ D.158409 ]))) Batch_Mix_Correlations.cc:667 159 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 400 [ D.158409 ])
        (nil)))
(debug_insn 360 359 361 26 (var_location:DF x (reg:DF 166 [ D.158411 ])) Batch_Mix_Correlations.cc:667 -1
     (nil))
(debug_insn 361 360 362 26 (var_location:DF y (const_double:DF 1.3000000000000000444089209850062616169452667236328125e+0 [0x0.a6666666666668p+1])) Batch_Mix_Correlations.cc:667 -1
     (nil))
(note 362 361 363 26 NOTE_INSN_DELETED)
(insn 363 362 364 26 (set (reg:DF 22 xmm1)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0 S8 A64])) /usr/common/usg/software/ROOT/6.08.00/include/root/TMath.h:515 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUAL (const_double:DF 1.3000000000000000444089209850062616169452667236328125e+0 [0x0.a6666666666668p+1])
        (nil)))
(insn 364 363 365 26 (set (reg:DF 21 xmm0)
        (reg:DF 166 [ D.158411 ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TMath.h:515 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 166 [ D.158411 ])
        (nil)))
(call_insn 365 364 366 26 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("pow") [flags 0x41]  <function_decl 0x2b94c3a68a00 pow>) [0 __builtin_pow S1 A8])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TMath.h:515 672 {*call_value}
     (expr_list:REG_DEAD (reg:DF 22 xmm1)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 366 365 369 26 (set (reg:DF 404)
        (reg:DF 21 xmm0)) /usr/common/usg/software/ROOT/6.08.00/include/root/TMath.h:515 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 369 366 370 26 (set (reg:DF 407)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0 S8 A64])) Batch_Mix_Correlations.cc:667 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUIV (const_double:DF 3.1500000000000000222044604925031308084726333618164062e-2 [0x0.810624dd2f1aap-4])
        (nil)))
(insn 370 369 371 26 (set (reg:DF 406 [ D.158411 ])
        (div:DF (reg:DF 407)
            (reg:DF 404))) Batch_Mix_Correlations.cc:667 794 {*fop_df_1_sse}
     (expr_list:REG_DEAD (reg:DF 407)
        (expr_list:REG_DEAD (reg:DF 404)
            (nil))))
(note 371 370 372 26 NOTE_INSN_DELETED)
(insn 372 371 373 26 (set (reg:DF 408 [ D.158411 ])
        (plus:DF (reg:DF 406 [ D.158411 ])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0 S8 A64]))) Batch_Mix_Correlations.cc:667 787 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 406 [ D.158411 ])
        (nil)))
(insn 373 372 374 26 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 408 [ D.158411 ])
            (reg:DF 179 [ D.158411 ]))) Batch_Mix_Correlations.cc:667 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 408 [ D.158411 ])
        (expr_list:REG_DEAD (reg:DF 179 [ D.158411 ])
            (nil))))
(jump_insn 374 373 378 26 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 319)
            (pc))) Batch_Mix_Correlations.cc:667 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 319)
;;  succ:       27 [50.0%]  (FALLTHRU)
;;              18 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 27, loop depth 2, count 0, freq 37, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 [50.0%]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u425(6){ }u426(7){ }u427(16){ }u428(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 515
;; lr  def 	 17 [flags]
(note 378 374 379 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(debug_insn 379 378 380 27 (var_location:DF dRmin (const_double:DF 2.0000000000000000416333634234433702658861875534057617e-2 [0x0.a3d70a3d70a3d8p-5])) Batch_Mix_Correlations.cc:669 -1
     (nil))
(debug_insn 380 379 381 27 (var_location:QI MixTrack_HasMatch (const_int 0 [0])) Batch_Mix_Correlations.cc:671 -1
     (nil))
(debug_insn 381 380 382 27 (var_location:SI l (const_int 0 [0])) Batch_Mix_Correlations.cc:672 -1
     (nil))
(insn 382 381 383 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/j:SI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                    (const_int 284 [0x11c])) [0 .omp_data_i_23(D)->ncluster_max+0 S4 A32])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:672 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 383 382 588 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 584)
            (pc))) Batch_Mix_Correlations.cc:672 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 584)
;;  succ:       51 [50.0%] 
;;              28 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 28, loop depth 2, count 0, freq 37, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       51 [21.4%] 
;;              52 [100.0%] 
;;              27 [50.0%]  (FALLTHRU)
;;              53 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u431(6){ }u432(7){ }u433(16){ }u434(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152 515
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 197 199 200 208 209 214 410 411 412 413 414 415 416 417 418 419 420 421 422 423
(code_label 588 383 384 28 81 "" [3 uses])
(note 384 588 385 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 385 384 386 28 (set (reg:SF 197 [ D.158409 ])
        (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 4 [0x4])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 4B]+0 S4 A32])) Batch_Mix_Correlations.cc:683 135 {*movsf_internal}
     (nil))
(insn 386 385 387 28 (set (reg:DI 199 [ D.158414 ])
        (mem/j:DI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                (const_int 208 [0xd0])) [0 .omp_data_i_23(D)->n+0 S8 A64])) Batch_Mix_Correlations.cc:683 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/j:DI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                (const_int 208 [0xd0])) [0 .omp_data_i_23(D)->n+0 S8 A64])
        (nil)))
(insn 387 386 388 28 (set (reg/f:DI 410 [ .omp_data_i_23(D)->cluster_pt ])
        (mem/f/j:DI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                (const_int 48 [0x30])) [0 .omp_data_i_23(D)->cluster_pt+0 S8 A64])) Batch_Mix_Correlations.cc:683 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                (const_int 48 [0x30])) [0 .omp_data_i_23(D)->cluster_pt+0 S8 A64])
        (nil)))
(insn 388 387 389 28 (set (reg:SF 200 [ D.158409 ])
        (mem/j:SF (plus:DI (mult:DI (reg:DI 199 [ D.158414 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 410 [ .omp_data_i_23(D)->cluster_pt ])) [0 *_189 S4 A32])) Batch_Mix_Correlations.cc:683 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 410 [ .omp_data_i_23(D)->cluster_pt ])
        (nil)))
(debug_insn 389 388 390 28 (var_location:SF D#62 (div:SF (reg:SF 197 [ D.158409 ])
        (reg:SF 200 [ D.158409 ]))) Batch_Mix_Correlations.cc:683 -1
     (nil))
(debug_insn 390 389 391 28 (var_location:DF zt (float_extend:DF (debug_expr:SF D#62))) Batch_Mix_Correlations.cc:683 -1
     (nil))
(insn 391 390 392 28 (set (reg/f:DI 411 [ .omp_data_i_23(D)->cluster_phi ])
        (mem/f/j:DI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                (const_int 64 [0x40])) [0 .omp_data_i_23(D)->cluster_phi+0 S8 A64])) Batch_Mix_Correlations.cc:684 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                (const_int 64 [0x40])) [0 .omp_data_i_23(D)->cluster_phi+0 S8 A64])
        (nil)))
(insn 392 391 393 28 (set (reg:SF 413)
        (mem/j:SF (plus:DI (mult:DI (reg:DI 199 [ D.158414 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 411 [ .omp_data_i_23(D)->cluster_phi ])) [0 *_194 S4 A32])) Batch_Mix_Correlations.cc:684 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 411 [ .omp_data_i_23(D)->cluster_phi ])
        (expr_list:REG_DEAD (reg:DI 199 [ D.158414 ])
            (nil))))
(insn 393 392 394 28 (set (reg:SF 412 [ D.158409 ])
        (minus:SF (reg:SF 413)
            (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                    (const_int 12 [0xc])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 12B]+0 S4 A32]))) Batch_Mix_Correlations.cc:684 793 {*fop_sf_1_sse}
     (expr_list:REG_DEAD (reg:SF 413)
        (nil)))
(insn 394 393 395 28 (set (reg:DF 414 [ D.158411 ])
        (float_extend:DF (reg:SF 412 [ D.158409 ]))) Batch_Mix_Correlations.cc:684 159 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 412 [ D.158409 ])
        (nil)))
(insn 395 394 396 28 (set (reg:DF 21 xmm0)
        (reg:DF 414 [ D.158411 ])) Batch_Mix_Correlations.cc:684 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 414 [ D.158411 ])
        (nil)))
(call_insn 396 395 397 28 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("_ZN8TVector210Phi_mpi_piEd") [flags 0x41]  <function_decl 0x2b94ca29b100 Phi_mpi_pi>) [0 Phi_mpi_pi S1 A8])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:684 672 {*call_value}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 397 396 398 28 (set (reg:DF 208 [ D.158411 ])
        (reg:DF 21 xmm0)) Batch_Mix_Correlations.cc:684 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(debug_insn 398 397 399 28 (var_location:DF d (reg:DF 208 [ D.158411 ])) Batch_Mix_Correlations.cc:684 -1
     (nil))
(debug_insn 399 398 400 28 (var_location:DF __x (reg:DF 208 [ D.158411 ])) -1
     (nil))
(insn 400 399 401 28 (set (reg:V2DF 416)
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0 S16 A128])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:82 1159 {*movv2df_internal}
     (expr_list:REG_EQUIV (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 401 400 402 28 (parallel [
            (set (reg:DF 415 [ D.158411 ])
                (abs:DF (reg:DF 208 [ D.158411 ])))
            (use (reg:V2DF 416))
            (clobber (reg:CC 17 flags))
        ]) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:82 480 {*absnegdf2_sse}
     (expr_list:REG_DEAD (reg:V2DF 416)
        (expr_list:REG_DEAD (reg:DF 208 [ D.158411 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 402 401 403 28 (set (reg/v:SF 209 [ DeltaPhi ])
        (float_truncate:SF (reg:DF 415 [ D.158411 ]))) Batch_Mix_Correlations.cc:684 164 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 415 [ D.158411 ])
        (nil)))
(debug_insn 403 402 404 28 (var_location:SF DeltaPhi (reg/v:SF 209 [ DeltaPhi ])) Batch_Mix_Correlations.cc:684 -1
     (nil))
(insn 404 403 405 28 (set (reg/f:DI 417 [ .omp_data_i_23(D)->cluster_eta ])
        (mem/f/j:DI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                (const_int 56 [0x38])) [0 .omp_data_i_23(D)->cluster_eta+0 S8 A64])) Batch_Mix_Correlations.cc:685 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                (const_int 56 [0x38])) [0 .omp_data_i_23(D)->cluster_eta+0 S8 A64])
        (nil)))
(insn 405 404 406 28 (set (reg:DI 418 [ .omp_data_i_23(D)->n ])
        (mem/j:DI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                (const_int 208 [0xd0])) [0 .omp_data_i_23(D)->n+0 S8 A64])) Batch_Mix_Correlations.cc:685 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/j:DI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                (const_int 208 [0xd0])) [0 .omp_data_i_23(D)->n+0 S8 A64])
        (nil)))
(insn 406 405 407 28 (set (reg:SF 419)
        (mem/j:SF (plus:DI (mult:DI (reg:DI 418 [ .omp_data_i_23(D)->n ])
                    (const_int 4 [0x4]))
                (reg/f:DI 417 [ .omp_data_i_23(D)->cluster_eta ])) [0 *_202 S4 A32])) Batch_Mix_Correlations.cc:685 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:DI 418 [ .omp_data_i_23(D)->n ])
        (expr_list:REG_DEAD (reg/f:DI 417 [ .omp_data_i_23(D)->cluster_eta ])
            (nil))))
(insn 407 406 408 28 (set (reg/v:SF 214 [ DeltaEta ])
        (minus:SF (reg:SF 419)
            (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                    (const_int 8 [0x8])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 8B]+0 S4 A32]))) Batch_Mix_Correlations.cc:685 793 {*fop_sf_1_sse}
     (expr_list:REG_DEAD (reg:SF 419)
        (expr_list:REG_DEAD (reg/f:DI 152 [ D.158412 ])
            (nil))))
(debug_insn 408 407 409 28 (var_location:SF DeltaEta (reg/v:SF 214 [ DeltaEta ])) Batch_Mix_Correlations.cc:685 -1
     (nil))
(debug_insn 409 408 410 28 (var_location:SF d (reg/v:SF 209 [ DeltaPhi ])) Batch_Mix_Correlations.cc:685 -1
     (nil))
(debug_insn 410 409 411 28 (var_location:SF __x (reg/v:SF 209 [ DeltaPhi ])) -1
     (nil))
(insn 411 410 412 28 (set (reg:V4SF 421)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0 S16 A128])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 1157 {*movv4sf_internal}
     (expr_list:REG_EQUIV (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 412 411 413 28 (parallel [
            (set (reg:SF 420 [ D.158409 ])
                (abs:SF (reg/v:SF 209 [ DeltaPhi ])))
            (use (reg:V4SF 421))
            (clobber (reg:CC 17 flags))
        ]) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 479 {*absnegsf2_sse}
     (expr_list:REG_DEAD (reg:V4SF 421)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 413 412 414 28 (set (reg:DF 422 [ D.158411 ])
        (float_extend:DF (reg:SF 420 [ D.158409 ]))) Batch_Mix_Correlations.cc:686 159 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 420 [ D.158409 ])
        (nil)))
(insn 414 413 415 28 (set (reg:DF 423)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0 S8 A64])) Batch_Mix_Correlations.cc:686 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUIV (const_double:DF 5.0000000000000001040834085586084256647154688835144043e-3 [0x0.a3d70a3d70a3d8p-7])
        (nil)))
(insn 415 414 416 28 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 423)
            (reg:DF 422 [ D.158411 ]))) Batch_Mix_Correlations.cc:686 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 423)
        (expr_list:REG_DEAD (reg:DF 422 [ D.158411 ])
            (nil))))
(jump_insn 416 415 580 28 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 570)
            (pc))) Batch_Mix_Correlations.cc:686 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 570)
;;  succ:       49 [50.0%] 
;;              29 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 197 200 209 214 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 29, loop depth 2, count 0, freq 18, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 [50.0%]  (FALLTHRU)
;;              50 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u473(6){ }u474(7){ }u475(16){ }u476(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 197 200 209 214 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 515
;; lr  def 	 17 [flags]
(code_label 580 416 417 29 80 "" [1 uses])
(note 417 580 418 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(debug_insn 418 417 419 29 (var_location:SI ipt (const_int 0 [0])) -1
     (nil))
(insn 419 418 420 29 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/j:SI (plus:DI (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
                    (const_int 272 [0x110])) [0 .omp_data_i_23(D)->nptbins+0 S4 A64])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:688 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 420 419 421 29 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) Batch_Mix_Correlations.cc:688 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 319)
;;  succ:       30 [91.0%]  (FALLTHRU)
;;              18 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 197 200 209 214 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 30, loop depth 2, count 0, freq 16, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       29 [91.0%]  (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u479(6){ }u480(7){ }u481(16){ }u482(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 197 200 209 214 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 197 200 512 513 514 515
;; lr  def 	 202 281 424 516 517 518 519 520
(note 421 420 422 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 422 421 423 30 (set (reg:SF 424 [ D.158409 ])
        (div:SF (reg:SF 197 [ D.158409 ])
            (reg:SF 200 [ D.158409 ]))) Batch_Mix_Correlations.cc:683 793 {*fop_sf_1_sse}
     (expr_list:REG_DEAD (reg:SF 200 [ D.158409 ])
        (expr_list:REG_DEAD (reg:SF 197 [ D.158409 ])
            (nil))))
(insn 423 422 8 30 (set (reg/v:DF 202 [ zt ])
        (float_extend:DF (reg:SF 424 [ D.158409 ]))) Batch_Mix_Correlations.cc:683 159 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 424 [ D.158409 ])
        (nil)))
(insn 8 423 735 30 (set (reg/v:SI 281 [ ipt ])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:683 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 735 8 736 30 (set (reg/f:DI 516 [orig:101 track_data_out_private.64 ] [101])
        (reg/f:DI 512 [orig:101 track_data_out_private.64 ] [101])) Batch_Mix_Correlations.cc:683 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 512 [orig:101 track_data_out_private.64 ] [101])
        (nil)))
(insn 736 735 737 30 (set (reg:DI 517 [orig:163 D.158397 ] [163])
        (reg:DI 513 [orig:163 D.158397 ] [163])) Batch_Mix_Correlations.cc:683 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 513 [orig:163 D.158397 ] [163])
        (nil)))
(insn 737 736 738 30 (set (reg/v:SI 518 [orig:281 ipt ] [281])
        (reg/v:SI 281 [ ipt ])) Batch_Mix_Correlations.cc:683 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 281 [ ipt ])
        (nil)))
(insn 738 737 739 30 (set (reg/v:DI 519 [orig:282 itrack ] [282])
        (reg/v:DI 514 [orig:282 itrack ] [282])) Batch_Mix_Correlations.cc:683 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v:DI 514 [orig:282 itrack ] [282])
        (nil)))
(insn 739 738 441 30 (set (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
        (reg/f:DI 515 [orig:292 .omp_data_i ] [292])) Batch_Mix_Correlations.cc:683 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
        (nil)))
;;  succ:       31 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520

;; basic block 31, loop depth 3, count 0, freq 188, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       32 [91.0%] 
;;              30 [100.0%]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u489(6){ }u490(7){ }u491(16){ }u492(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 518 520
;; lr  def 	 17 [flags] 220 222 223 425 426 427
(code_label 441 739 424 31 67 "" [1 uses])
(note 424 441 425 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(debug_insn 425 424 426 31 (var_location:SI ipt (reg/v:SI 518 [orig:281 ipt ] [281])) -1
     (nil))
(insn 426 425 427 31 (set (reg/f:DI 425 [ .omp_data_i_23(D)->cluster_pt ])
        (mem/f/j:DI (plus:DI (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
                (const_int 48 [0x30])) [0 .omp_data_i_23(D)->cluster_pt+0 S8 A64])) Batch_Mix_Correlations.cc:689 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/f/j:DI (plus:DI (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
                (const_int 48 [0x30])) [0 .omp_data_i_23(D)->cluster_pt+0 S8 A64])
        (nil)))
(insn 427 426 428 31 (set (reg:DI 426 [ .omp_data_i_23(D)->n ])
        (mem/j:DI (plus:DI (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
                (const_int 208 [0xd0])) [0 .omp_data_i_23(D)->n+0 S8 A64])) Batch_Mix_Correlations.cc:689 87 {*movdi_internal_rex64}
     (expr_list:REG_EQUIV (mem/j:DI (plus:DI (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
                (const_int 208 [0xd0])) [0 .omp_data_i_23(D)->n+0 S8 A64])
        (nil)))
(insn 428 427 429 31 (set (reg:SF 220 [ D.158409 ])
        (mem/j:SF (plus:DI (mult:DI (reg:DI 426 [ .omp_data_i_23(D)->n ])
                    (const_int 4 [0x4]))
                (reg/f:DI 425 [ .omp_data_i_23(D)->cluster_pt ])) [0 *_210 S4 A32])) Batch_Mix_Correlations.cc:689 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:DI 426 [ .omp_data_i_23(D)->n ])
        (expr_list:REG_DEAD (reg/f:DI 425 [ .omp_data_i_23(D)->cluster_pt ])
            (nil))))
(insn 429 428 430 31 (set (reg:DI 427 [ D.158398 ])
        (sign_extend:DI (reg/v:SI 518 [orig:281 ipt ] [281]))) Batch_Mix_Correlations.cc:689 149 {*extendsidi2_rex64}
     (nil))
(insn 430 429 431 31 (parallel [
            (set (reg:DI 222 [ D.158398 ])
                (ashift:DI (reg:DI 427 [ D.158398 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:689 522 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 431 430 432 31 (set (reg/f:DI 223 [ D.158416 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
                (const_int 32 [0x20])) [0 .omp_data_i_23(D)->ptbins+0 S8 A64])) Batch_Mix_Correlations.cc:689 87 {*movdi_internal_rex64}
     (nil))
(insn 432 431 433 31 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 220 [ D.158409 ])
            (mem:SF (plus:DI (mult:DI (reg:DI 427 [ D.158398 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 223 [ D.158416 ])) [0 *_216+0 S4 A32]))) Batch_Mix_Correlations.cc:689 57 {*cmpiusf_sse}
     (expr_list:REG_DEAD (reg:DI 427 [ D.158398 ])
        (nil)))
(jump_insn 433 432 446 31 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 444)
            (pc))) Batch_Mix_Correlations.cc:689 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 444)
;;  succ:       34 [50.0%] 
;;              32 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 220 222 223 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520

;; basic block 32, loop depth 3, count 0, freq 188, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 [50.0%]  (FALLTHRU)
;;              35 [9.0%] 
;;              34 [50.0%] 
;;              39 [100.0%]  (LOOP_EXIT)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u505(6){ }u506(7){ }u507(16){ }u508(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 518 520
;; lr  def 	 17 [flags] 518
(code_label 446 433 434 32 68 "" [3 uses])
(note 434 446 435 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 435 434 437 32 (parallel [
            (set (reg/v:SI 518 [orig:281 ipt ] [281])
                (plus:SI (reg/v:SI 518 [orig:281 ipt ] [281])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:688 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 437 435 438 32 (var_location:SI ipt (reg/v:SI 518 [orig:281 ipt ] [281])) -1
     (nil))
(insn 438 437 439 32 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/j:SI (plus:DI (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
                    (const_int 272 [0x110])) [0 .omp_data_i_23(D)->nptbins+0 S4 A64])
            (reg/v:SI 518 [orig:281 ipt ] [281]))) Batch_Mix_Correlations.cc:688 7 {*cmpsi_1}
     (nil))
(jump_insn 439 438 707 32 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 441)
            (pc))) Batch_Mix_Correlations.cc:688 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 441)
;;  succ:       31 [91.0%] 
;;              33 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520

;; basic block 33, loop depth 2, count 0, freq 17, maybe hot
;;  prev block 32, next block 34, flags: (NEW, RTL, MODIFIED)
;;  pred:       32 [9.0%]  (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 244 257 270 498 499 500 501 502 503 511 516 517 519 520
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 516 517 519 520
;; lr  def 	 512 513 514 515
(note 707 439 740 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 740 707 741 33 (set (reg/f:DI 512 [orig:101 track_data_out_private.64 ] [101])
        (reg/f:DI 516 [orig:101 track_data_out_private.64 ] [101])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 516 [orig:101 track_data_out_private.64 ] [101])
        (nil)))
(insn 741 740 742 33 (set (reg:DI 513 [orig:163 D.158397 ] [163])
        (reg:DI 517 [orig:163 D.158397 ] [163])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 517 [orig:163 D.158397 ] [163])
        (nil)))
(insn 742 741 743 33 (set (reg/v:DI 514 [orig:282 itrack ] [282])
        (reg/v:DI 519 [orig:282 itrack ] [282])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v:DI 519 [orig:282 itrack ] [282])
        (nil)))
(insn 743 742 708 33 (set (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
        (reg/f:DI 520 [orig:292 .omp_data_i ] [292])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
        (nil)))
(jump_insn 708 743 709 33 (set (pc)
        (label_ref 319)) 659 {jump}
     (nil)
 -> 319)
;;  succ:       18 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 244 257 270 498 499 500 501 502 503 511 512 513 514 515

(barrier 709 708 444)
;; basic block 34, loop depth 3, count 0, freq 94, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       31 [50.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u514(6){ }u515(7){ }u516(16){ }u517(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 220 222 223 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 220 222 223
;; lr  def 	 17 [flags] 428
(code_label 444 709 445 34 66 "" [1 uses])
(note 445 444 447 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 447 445 448 34 (set (reg:SF 428 [ *_220 ])
        (mem:SF (plus:DI (plus:DI (reg/f:DI 223 [ D.158416 ])
                    (reg:DI 222 [ D.158398 ]))
                (const_int 4 [0x4])) [0 *_220+0 S4 A32])) Batch_Mix_Correlations.cc:689 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 223 [ D.158416 ])
        (expr_list:REG_DEAD (reg:DI 222 [ D.158398 ])
            (nil))))
(insn 448 447 449 34 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 428 [ *_220 ])
            (reg:SF 220 [ D.158409 ]))) Batch_Mix_Correlations.cc:689 57 {*cmpiusf_sse}
     (expr_list:REG_DEAD (reg:SF 428 [ *_220 ])
        (expr_list:REG_DEAD (reg:SF 220 [ D.158409 ])
            (nil))))
(jump_insn 449 448 453 34 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 446)
            (pc))) Batch_Mix_Correlations.cc:689 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 446)
;;  succ:       35 [50.0%]  (FALLTHRU)
;;              32 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520

;; basic block 35, loop depth 3, count 0, freq 47, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 [50.0%]  (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u523(6){ }u524(7){ }u525(16){ }u526(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 520
;; lr  def 	 17 [flags] 229
(note 453 449 454 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(debug_insn 454 453 455 35 (var_location:SI izt (const_int 0 [0])) -1
     (nil))
(insn 455 454 456 35 (set (reg:SI 229 [ D.158400 ])
        (mem/j:SI (plus:DI (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
                (const_int 268 [0x10c])) [0 .omp_data_i_23(D)->nztbins+0 S4 A32])) Batch_Mix_Correlations.cc:690 89 {*movsi_internal}
     (nil))
(insn 456 455 457 35 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 229 [ D.158400 ])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:690 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 457 456 458 35 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 446)
            (pc))) Batch_Mix_Correlations.cc:690 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 446)
;;  succ:       36 [91.0%]  (FALLTHRU)
;;              32 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 229 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520

;; basic block 36, loop depth 3, count 0, freq 43, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 [91.0%]  (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u530(6){ }u531(7){ }u532(16){ }u533(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 229 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229 517 518 519 520
;; lr  def 	 280 521 522 523 524 525 526
(note 458 457 9 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 9 458 744 36 (set (reg/v:SI 280 [ izt ])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:690 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 744 9 745 36 (set (reg:DI 521 [orig:163 D.158397 ] [163])
        (reg:DI 517 [orig:163 D.158397 ] [163])) Batch_Mix_Correlations.cc:690 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 517 [orig:163 D.158397 ] [163])
        (nil)))
(insn 745 744 746 36 (set (reg:SI 522 [orig:229 D.158400 ] [229])
        (reg:SI 229 [ D.158400 ])) Batch_Mix_Correlations.cc:690 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 229 [ D.158400 ])
        (nil)))
(insn 746 745 747 36 (set (reg/v:SI 523 [orig:280 izt ] [280])
        (reg/v:SI 280 [ izt ])) Batch_Mix_Correlations.cc:690 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 280 [ izt ])
        (nil)))
(insn 747 746 748 36 (set (reg/v:SI 524 [orig:281 ipt ] [281])
        (reg/v:SI 518 [orig:281 ipt ] [281])) Batch_Mix_Correlations.cc:690 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 518 [orig:281 ipt ] [281])
        (nil)))
(insn 748 747 749 36 (set (reg/v:DI 525 [orig:282 itrack ] [282])
        (reg/v:DI 519 [orig:282 itrack ] [282])) Batch_Mix_Correlations.cc:690 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v:DI 519 [orig:282 itrack ] [282])
        (nil)))
(insn 749 748 475 36 (set (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
        (reg/f:DI 520 [orig:292 .omp_data_i ] [292])) Batch_Mix_Correlations.cc:690 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
        (nil)))
;;  succ:       37 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526

;; basic block 37, loop depth 4, count 0, freq 474, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       38 [91.0%] 
;;              36 [100.0%]  (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u537(6){ }u538(7){ }u539(16){ }u540(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 202 523 526
;; lr  def 	 17 [flags] 231 232 429 430
(code_label 475 749 459 37 71 "" [1 uses])
(note 459 475 460 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(debug_insn 460 459 461 37 (var_location:SI izt (reg/v:SI 523 [orig:280 izt ] [280])) -1
     (nil))
(insn 461 460 462 37 (set (reg:DI 429 [ D.158398 ])
        (sign_extend:DI (reg/v:SI 523 [orig:280 izt ] [280]))) Batch_Mix_Correlations.cc:691 149 {*extendsidi2_rex64}
     (nil))
(insn 462 461 463 37 (parallel [
            (set (reg:DI 231 [ D.158398 ])
                (ashift:DI (reg:DI 429 [ D.158398 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:691 522 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 463 462 464 37 (set (reg/f:DI 232 [ D.158416 ])
        (mem/f/j:DI (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                (const_int 24 [0x18])) [0 .omp_data_i_23(D)->ztbins+0 S8 A64])) Batch_Mix_Correlations.cc:691 87 {*movdi_internal_rex64}
     (nil))
(insn 464 463 465 37 (set (reg:DF 430 [ D.158411 ])
        (float_extend:DF (mem:SF (plus:DI (mult:DI (reg:DI 429 [ D.158398 ])
                        (const_int 4 [0x4]))
                    (reg/f:DI 232 [ D.158416 ])) [0 *_226+0 S4 A32]))) Batch_Mix_Correlations.cc:691 159 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:DI 429 [ D.158398 ])
        (nil)))
(insn 465 464 466 37 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg/v:DF 202 [ zt ])
            (reg:DF 430 [ D.158411 ]))) Batch_Mix_Correlations.cc:691 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 430 [ D.158411 ])
        (nil)))
(jump_insn 466 465 480 37 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 478)
            (pc))) Batch_Mix_Correlations.cc:691 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 478)
;;  succ:       40 [50.0%] 
;;              38 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 231 232 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526

;; basic block 38, loop depth 4, count 0, freq 474, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       37 [50.0%]  (FALLTHRU)
;;              43 [100.0%] 
;;              40 [50.0%] 
;;              44 [100.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u550(6){ }u551(7){ }u552(16){ }u553(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 523 526
;; lr  def 	 17 [flags] 522 523
(code_label 480 466 467 38 72 "" [3 uses])
(note 467 480 468 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 468 467 470 38 (parallel [
            (set (reg/v:SI 523 [orig:280 izt ] [280])
                (plus:SI (reg/v:SI 523 [orig:280 izt ] [280])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:690 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 470 468 471 38 (var_location:SI izt (reg/v:SI 523 [orig:280 izt ] [280])) -1
     (nil))
(insn 471 470 472 38 (set (reg:SI 522 [orig:229 D.158400 ] [229])
        (mem/j:SI (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                (const_int 268 [0x10c])) [0 .omp_data_i_23(D)->nztbins+0 S4 A32])) Batch_Mix_Correlations.cc:690 89 {*movsi_internal}
     (nil))
(insn 472 471 473 38 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 522 [orig:229 D.158400 ] [229])
            (reg/v:SI 523 [orig:280 izt ] [280]))) Batch_Mix_Correlations.cc:690 7 {*cmpsi_1}
     (nil))
(jump_insn 473 472 710 38 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 475)
            (pc))) Batch_Mix_Correlations.cc:690 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil)))
 -> 475)
;;  succ:       37 [91.0%] 
;;              39 [9.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526

;; basic block 39, loop depth 3, count 0, freq 43, maybe hot
;;  prev block 38, next block 40, flags: (NEW, RTL, MODIFIED)
;;  pred:       38 [9.0%]  (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 521 524 525 526
;; lr  def 	 517 518 519 520
(note 710 473 750 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 750 710 751 39 (set (reg:DI 517 [orig:163 D.158397 ] [163])
        (reg:DI 521 [orig:163 D.158397 ] [163])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 521 [orig:163 D.158397 ] [163])
        (nil)))
(insn 751 750 752 39 (set (reg/v:SI 518 [orig:281 ipt ] [281])
        (reg/v:SI 524 [orig:281 ipt ] [281])) 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 524 [orig:281 ipt ] [281])
        (nil)))
(insn 752 751 753 39 (set (reg/v:DI 519 [orig:282 itrack ] [282])
        (reg/v:DI 525 [orig:282 itrack ] [282])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v:DI 525 [orig:282 itrack ] [282])
        (nil)))
(insn 753 752 711 39 (set (reg/f:DI 520 [orig:292 .omp_data_i ] [292])
        (reg/f:DI 526 [orig:292 .omp_data_i ] [292])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
        (nil)))
(jump_insn 711 753 712 39 (set (pc)
        (label_ref 446)) 659 {jump}
     (nil)
 -> 446)
;;  succ:       32 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 517 518 519 520

(barrier 712 711 478)
;; basic block 40, loop depth 4, count 0, freq 237, maybe hot
;;  prev block 39, next block 41, flags: (RTL, MODIFIED)
;;  pred:       37 [50.0%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u560(6){ }u561(7){ }u562(16){ }u563(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 231 232 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 202 231 232
;; lr  def 	 17 [flags] 431
(code_label 478 712 479 40 70 "" [1 uses])
(note 479 478 481 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 481 479 482 40 (set (reg:DF 431 [ D.158411 ])
        (float_extend:DF (mem:SF (plus:DI (plus:DI (reg/f:DI 232 [ D.158416 ])
                        (reg:DI 231 [ D.158398 ]))
                    (const_int 4 [0x4])) [0 *_231+0 S4 A32]))) Batch_Mix_Correlations.cc:691 159 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg/f:DI 232 [ D.158416 ])
        (expr_list:REG_DEAD (reg:DI 231 [ D.158398 ])
            (nil))))
(insn 482 481 483 40 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 431 [ D.158411 ])
            (reg/v:DF 202 [ zt ]))) Batch_Mix_Correlations.cc:691 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 431 [ D.158411 ])
        (nil)))
(jump_insn 483 482 487 40 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 480)
            (pc))) Batch_Mix_Correlations.cc:691 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 480)
;;  succ:       41 [50.0%]  (FALLTHRU)
;;              38 [50.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526

;; basic block 41, loop depth 4, count 0, freq 119, maybe hot
;;  prev block 40, next block 42, flags: (RTL, MODIFIED)
;;  pred:       40 [50.0%]  (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u569(6){ }u570(7){ }u571(16){ }u572(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 526
;; lr  def 	 17 [flags] 432 433
(note 487 483 488 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 488 487 489 41 (set (reg:DF 432 [ D.158411 ])
        (float_extend:DF (mem/j:SF (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                    (const_int 304 [0x130])) [0 .omp_data_i_23(D)->isolation+0 S4 A64]))) Batch_Mix_Correlations.cc:693 159 {*extendsfdf2_sse}
     (nil))
(insn 489 488 490 41 (set (reg:DF 433 [ .omp_data_i_23(D)->iso_max ])
        (mem/j:DF (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                (const_int 16 [0x10])) [0 .omp_data_i_23(D)->iso_max+0 S8 A64])) Batch_Mix_Correlations.cc:693 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUIV (mem/j:DF (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                (const_int 16 [0x10])) [0 .omp_data_i_23(D)->iso_max+0 S8 A64])
        (nil)))
(insn 490 489 491 41 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 433 [ .omp_data_i_23(D)->iso_max ])
            (reg:DF 432 [ D.158411 ]))) Batch_Mix_Correlations.cc:693 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 433 [ .omp_data_i_23(D)->iso_max ])
        (expr_list:REG_DEAD (reg:DF 432 [ D.158411 ])
            (nil))))
(jump_insn 491 490 567 41 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 547)
            (pc))) Batch_Mix_Correlations.cc:693 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil)))
 -> 547)
;;  succ:       47 [50.0%] 
;;              42 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526

;; basic block 42, loop depth 4, count 0, freq 77, maybe hot
;;  prev block 41, next block 43, flags: (RTL, MODIFIED)
;;  pred:       41 [50.0%]  (FALLTHRU)
;;              48 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u578(6){ }u579(7){ }u580(16){ }u581(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 526
;; lr  def 	 17 [flags] 434 435
(code_label 567 491 492 42 79 "" [1 uses])
(note 492 567 493 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 493 492 494 42 (set (reg:DF 434 [ D.158411 ])
        (float_extend:DF (mem/j:SF (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                    (const_int 304 [0x130])) [0 .omp_data_i_23(D)->isolation+0 S4 A64]))) Batch_Mix_Correlations.cc:699 159 {*extendsfdf2_sse}
     (nil))
(insn 494 493 495 42 (set (reg:DF 435 [ .omp_data_i_23(D)->iso_max ])
        (mem/j:DF (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                (const_int 16 [0x10])) [0 .omp_data_i_23(D)->iso_max+0 S8 A64])) Batch_Mix_Correlations.cc:699 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUIV (mem/j:DF (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                (const_int 16 [0x10])) [0 .omp_data_i_23(D)->iso_max+0 S8 A64])
        (nil)))
(insn 495 494 496 42 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 435 [ .omp_data_i_23(D)->iso_max ])
            (reg:DF 434 [ D.158411 ]))) Batch_Mix_Correlations.cc:699 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 435 [ .omp_data_i_23(D)->iso_max ])
        (expr_list:REG_DEAD (reg:DF 434 [ D.158411 ])
            (nil))))
(jump_insn 496 495 544 42 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 523)
            (pc))) Batch_Mix_Correlations.cc:699 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 2273 [0x8e1])
            (nil)))
 -> 523)
;;  succ:       45 [22.7%] 
;;              43 [77.3%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526

;; basic block 43, loop depth 4, count 0, freq 77, maybe hot
;;  prev block 42, next block 44, flags: (RTL, MODIFIED)
;;  pred:       42 [77.3%]  (FALLTHRU)
;;              46 [100.0%] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u587(6){ }u588(7){ }u589(16){ }u590(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 526
;; lr  def 	 17 [flags] 436 437
(code_label 544 496 497 43 78 "" [1 uses])
(note 497 544 498 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 498 497 499 43 (set (reg:DF 436 [ D.158411 ])
        (float_extend:DF (mem/j:SF (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                    (const_int 304 [0x130])) [0 .omp_data_i_23(D)->isolation+0 S4 A64]))) Batch_Mix_Correlations.cc:704 159 {*extendsfdf2_sse}
     (nil))
(insn 499 498 500 43 (set (reg:DF 437 [ .omp_data_i_23(D)->iso_max ])
        (mem/j:DF (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                (const_int 16 [0x10])) [0 .omp_data_i_23(D)->iso_max+0 S8 A64])) Batch_Mix_Correlations.cc:704 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUIV (mem/j:DF (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                (const_int 16 [0x10])) [0 .omp_data_i_23(D)->iso_max+0 S8 A64])
        (nil)))
(insn 500 499 501 43 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 437 [ .omp_data_i_23(D)->iso_max ])
            (reg:DF 436 [ D.158411 ]))) Batch_Mix_Correlations.cc:704 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 437 [ .omp_data_i_23(D)->iso_max ])
        (expr_list:REG_DEAD (reg:DF 436 [ D.158411 ])
            (nil))))
(jump_insn 501 500 525 43 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 480)
            (pc))) Batch_Mix_Correlations.cc:704 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
            (nil)))
 -> 480)
;;  succ:       44 (FALLTHRU)
;;              38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526

;; basic block 44, loop depth 4, count 0, freq 34, maybe hot
;;  prev block 43, next block 45, flags: (RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;;              45 [71.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u596(6){ }u597(7){ }u598(16){ }u599(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68 209 214 500 523 524 526
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 274 438 439 440 442 443 445 506
(code_label 525 501 505 44 77 "" [1 uses])
(note 505 525 506 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 506 505 507 44 (parallel [
            (set (reg:SI 438 [ D.158400 ])
                (mult:SI (reg/v:SI 524 [orig:281 ipt ] [281])
                    (mem/j:SI (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                            (const_int 268 [0x10c])) [0 .omp_data_i_23(D)->nztbins+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:706 353 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 507 506 508 44 (parallel [
            (set (reg:SI 439 [ D.158400 ])
                (plus:SI (reg:SI 438 [ D.158400 ])
                    (reg/v:SI 523 [orig:280 izt ] [280])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:706 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 438 [ D.158400 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 508 507 510 44 (set (reg:DI 440 [ D.158400 ])
        (sign_extend:DI (reg:SI 439 [ D.158400 ]))) Batch_Mix_Correlations.cc:706 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 439 [ D.158400 ])
        (nil)))
(insn 510 508 511 44 (parallel [
            (set (reg:DI 442)
                (plus:DI (reg:DI 440 [ D.158400 ])
                    (reg:DI 500)))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:706 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 440 [ D.158400 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 511 510 513 44 (set (reg/f:DI 274 [ D.158417 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 442)
                    (const_int 8 [0x8]))
                (reg/f:DI 68 [ MixCorr.36 ])) [0 MEM[(struct TH2D *[0:<<< error >>>][0:<<< error >>>] *)MixCorr.36_28] S8 A64])) Batch_Mix_Correlations.cc:706 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 442)
        (nil)))
(insn 513 511 514 44 (set (reg/f:DI 443 [ _272->D.131796.D.130302.D.127613.D.78818._vptr.TObject ])
        (mem/f/j:DI (reg/f:DI 274 [ D.158417 ]) [0 _272->D.131796.D.130302.D.127613.D.78818._vptr.TObject+0 S8 A64])) Batch_Mix_Correlations.cc:706 87 {*movdi_internal_rex64}
     (nil))
(note 514 513 515 44 NOTE_INSN_DELETED)
(insn 515 514 516 44 (set (reg:DF 506 [orig:445 D.158411 ] [445])
        (float_extend:DF (reg/v:SF 209 [ DeltaPhi ]))) Batch_Mix_Correlations.cc:706 159 {*extendsfdf2_sse}
     (nil))
(note 516 515 517 44 NOTE_INSN_DELETED)
(insn 517 516 728 44 (set (reg:DF 22 xmm1)
        (float_extend:DF (reg/v:SF 214 [ DeltaEta ]))) Batch_Mix_Correlations.cc:706 159 {*extendsfdf2_sse}
     (nil))
(insn 728 517 518 44 (set (reg:DF 445 [ D.158411 ])
        (reg:DF 506 [orig:445 D.158411 ] [445])) Batch_Mix_Correlations.cc:706 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 506 [orig:445 D.158411 ] [445])
        (nil)))
(insn 518 728 519 44 (set (reg:DF 21 xmm0)
        (reg:DF 445 [ D.158411 ])) Batch_Mix_Correlations.cc:706 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 445 [ D.158411 ])
        (nil)))
(insn 519 518 520 44 (set (reg:DI 5 di)
        (reg/f:DI 274 [ D.158417 ])) Batch_Mix_Correlations.cc:706 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 274 [ D.158417 ])
        (nil)))
(call_insn 520 519 713 44 (set (reg:SI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 443 [ _272->D.131796.D.130302.D.127613.D.78818._vptr.TObject ])
                        (const_int 728 [0x2d8])) [0 MEM[(int (*__vtbl_ptr_type) () *)_273 + 728B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_274;_278->91) S1 A8])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:706 672 {*call_value}
     (expr_list:REG_DEAD (reg/f:DI 443 [ _272->D.131796.D.130302.D.127613.D.78818._vptr.TObject ])
        (expr_list:REG_DEAD (reg:DF 22 xmm1)
            (expr_list:REG_DEAD (reg:DF 21 xmm0)
                (expr_list:REG_DEAD (reg:DI 5 di)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:DF (use (reg:DF 21 xmm0))
            (expr_list:DF (use (reg:DF 22 xmm1))
                (nil)))))
(jump_insn 713 520 714 44 (set (pc)
        (label_ref 480)) 659 {jump}
     (nil)
 -> 480)
;;  succ:       38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526

(barrier 714 713 523)
;; basic block 45, loop depth 4, count 0, freq 59, maybe hot
;;  prev block 44, next block 46, flags: (RTL, MODIFIED)
;;  pred:       42 [22.7%] 
;;              47 [71.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u622(6){ }u623(7){ }u624(16){ }u625(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 526
;; lr  def 	 17 [flags]
(code_label 523 714 524 45 75 "" [2 uses])
(note 524 523 526 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 526 524 527 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/j:QI (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                    (const_int 310 [0x136])) [0 .omp_data_i_23(D)->Background+0 S1 A16])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:700 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 527 526 528 45 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 525)
            (pc))) Batch_Mix_Correlations.cc:700 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil)))
 -> 525)
;;  succ:       46 [29.0%]  (FALLTHRU)
;;              44 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526

;; basic block 46, loop depth 4, count 0, freq 17, maybe hot
;;  prev block 45, next block 47, flags: (RTL, MODIFIED)
;;  pred:       45 [29.0%]  (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u628(6){ }u629(7){ }u630(16){ }u631(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 209 214 499 523 524 526
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 261 447 448 449 451 452 454 507
(note 528 527 529 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 529 528 530 46 (parallel [
            (set (reg:SI 447 [ D.158400 ])
                (mult:SI (reg/v:SI 524 [orig:281 ipt ] [281])
                    (mem/j:SI (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                            (const_int 268 [0x10c])) [0 .omp_data_i_23(D)->nztbins+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:702 353 {*mulsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 530 529 531 46 (parallel [
            (set (reg:SI 448 [ D.158400 ])
                (plus:SI (reg:SI 447 [ D.158400 ])
                    (reg/v:SI 523 [orig:280 izt ] [280])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:702 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 447 [ D.158400 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 531 530 533 46 (set (reg:DI 449 [ D.158400 ])
        (sign_extend:DI (reg:SI 448 [ D.158400 ]))) Batch_Mix_Correlations.cc:702 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 448 [ D.158400 ])
        (nil)))
(insn 533 531 534 46 (parallel [
            (set (reg:DI 451)
                (plus:DI (reg:DI 449 [ D.158400 ])
                    (reg:DI 499)))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:702 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 449 [ D.158400 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 534 533 536 46 (set (reg/f:DI 261 [ D.158417 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 451)
                    (const_int 8 [0x8]))
                (reg/f:DI 64 [ MixCorr_BKGD.38 ])) [0 MEM[(struct TH2D *[0:<<< error >>>][0:<<< error >>>] *)MixCorr_BKGD.38_24] S8 A64])) Batch_Mix_Correlations.cc:702 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 451)
        (nil)))
(insn 536 534 537 46 (set (reg/f:DI 452 [ _257->D.131796.D.130302.D.127613.D.78818._vptr.TObject ])
        (mem/f/j:DI (reg/f:DI 261 [ D.158417 ]) [0 _257->D.131796.D.130302.D.127613.D.78818._vptr.TObject+0 S8 A64])) Batch_Mix_Correlations.cc:702 87 {*movdi_internal_rex64}
     (nil))
(note 537 536 538 46 NOTE_INSN_DELETED)
(insn 538 537 539 46 (set (reg:DF 507 [orig:454 D.158411 ] [454])
        (float_extend:DF (reg/v:SF 209 [ DeltaPhi ]))) Batch_Mix_Correlations.cc:702 159 {*extendsfdf2_sse}
     (nil))
(note 539 538 540 46 NOTE_INSN_DELETED)
(insn 540 539 729 46 (set (reg:DF 22 xmm1)
        (float_extend:DF (reg/v:SF 214 [ DeltaEta ]))) Batch_Mix_Correlations.cc:702 159 {*extendsfdf2_sse}
     (nil))
(insn 729 540 541 46 (set (reg:DF 454 [ D.158411 ])
        (reg:DF 507 [orig:454 D.158411 ] [454])) Batch_Mix_Correlations.cc:702 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 507 [orig:454 D.158411 ] [454])
        (nil)))
(insn 541 729 542 46 (set (reg:DF 21 xmm0)
        (reg:DF 454 [ D.158411 ])) Batch_Mix_Correlations.cc:702 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 454 [ D.158411 ])
        (nil)))
(insn 542 541 543 46 (set (reg:DI 5 di)
        (reg/f:DI 261 [ D.158417 ])) Batch_Mix_Correlations.cc:702 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 261 [ D.158417 ])
        (nil)))
(call_insn 543 542 715 46 (set (reg:SI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 452 [ _257->D.131796.D.130302.D.127613.D.78818._vptr.TObject ])
                        (const_int 728 [0x2d8])) [0 MEM[(int (*__vtbl_ptr_type) () *)_258 + 728B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_259;_263->91) S1 A8])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:702 672 {*call_value}
     (expr_list:REG_DEAD (reg/f:DI 452 [ _257->D.131796.D.130302.D.127613.D.78818._vptr.TObject ])
        (expr_list:REG_DEAD (reg:DF 22 xmm1)
            (expr_list:REG_DEAD (reg:DF 21 xmm0)
                (expr_list:REG_DEAD (reg:DI 5 di)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:DF (use (reg:DF 21 xmm0))
            (expr_list:DF (use (reg:DF 22 xmm1))
                (nil)))))
(jump_insn 715 543 716 46 (set (pc)
        (label_ref 544)) 659 {jump}
     (nil)
 -> 544)
;;  succ:       43 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526

(barrier 716 715 547)
;; basic block 47, loop depth 4, count 0, freq 59, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       41 [50.0%] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u654(6){ }u655(7){ }u656(16){ }u657(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 526
;; lr  def 	 17 [flags]
(code_label 547 716 548 47 74 "" [1 uses])
(note 548 547 549 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 549 548 550 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/j:QI (plus:DI (reg/f:DI 526 [orig:292 .omp_data_i ] [292])
                    (const_int 309 [0x135])) [0 .omp_data_i_23(D)->Signal+0 S1 A8])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:694 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 550 549 551 47 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 523)
            (pc))) Batch_Mix_Correlations.cc:694 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil)))
 -> 523)
;;  succ:       48 [29.0%]  (FALLTHRU)
;;              45 [71.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526

;; basic block 48, loop depth 4, count 0, freq 17, maybe hot
;;  prev block 47, next block 49, flags: (RTL, MODIFIED)
;;  pred:       47 [29.0%]  (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u660(6){ }u661(7){ }u662(16){ }u663(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 522 523 524 525 526
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66 209 214 498 522 523 524
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 247 456 457 458 460 461 463 508
(note 551 550 552 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 552 551 553 48 (parallel [
            (set (reg:SI 456 [ D.158400 ])
                (mult:SI (reg/v:SI 524 [orig:281 ipt ] [281])
                    (reg:SI 522 [orig:229 D.158400 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:696 353 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 522 [orig:229 D.158400 ] [229])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 553 552 554 48 (parallel [
            (set (reg:SI 457 [ D.158400 ])
                (plus:SI (reg:SI 456 [ D.158400 ])
                    (reg/v:SI 523 [orig:280 izt ] [280])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:696 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 456 [ D.158400 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 554 553 556 48 (set (reg:DI 458 [ D.158400 ])
        (sign_extend:DI (reg:SI 457 [ D.158400 ]))) Batch_Mix_Correlations.cc:696 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 457 [ D.158400 ])
        (nil)))
(insn 556 554 557 48 (parallel [
            (set (reg:DI 460)
                (plus:DI (reg:DI 458 [ D.158400 ])
                    (reg:DI 498)))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:696 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 458 [ D.158400 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 557 556 559 48 (set (reg/f:DI 247 [ D.158417 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 460)
                    (const_int 8 [0x8]))
                (reg/f:DI 66 [ MixCorr_Signal.37 ])) [0 MEM[(struct TH2D *[0:<<< error >>>][0:<<< error >>>] *)MixCorr_Signal.37_26] S8 A64])) Batch_Mix_Correlations.cc:696 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 460)
        (nil)))
(insn 559 557 560 48 (set (reg/f:DI 461 [ _241->D.131796.D.130302.D.127613.D.78818._vptr.TObject ])
        (mem/f/j:DI (reg/f:DI 247 [ D.158417 ]) [0 _241->D.131796.D.130302.D.127613.D.78818._vptr.TObject+0 S8 A64])) Batch_Mix_Correlations.cc:696 87 {*movdi_internal_rex64}
     (nil))
(note 560 559 561 48 NOTE_INSN_DELETED)
(insn 561 560 562 48 (set (reg:DF 508 [orig:463 D.158411 ] [463])
        (float_extend:DF (reg/v:SF 209 [ DeltaPhi ]))) Batch_Mix_Correlations.cc:696 159 {*extendsfdf2_sse}
     (nil))
(note 562 561 563 48 NOTE_INSN_DELETED)
(insn 563 562 730 48 (set (reg:DF 22 xmm1)
        (float_extend:DF (reg/v:SF 214 [ DeltaEta ]))) Batch_Mix_Correlations.cc:696 159 {*extendsfdf2_sse}
     (nil))
(insn 730 563 564 48 (set (reg:DF 463 [ D.158411 ])
        (reg:DF 508 [orig:463 D.158411 ] [463])) Batch_Mix_Correlations.cc:696 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 508 [orig:463 D.158411 ] [463])
        (nil)))
(insn 564 730 565 48 (set (reg:DF 21 xmm0)
        (reg:DF 463 [ D.158411 ])) Batch_Mix_Correlations.cc:696 133 {*movdf_internal_rex64}
     (expr_list:REG_DEAD (reg:DF 463 [ D.158411 ])
        (nil)))
(insn 565 564 566 48 (set (reg:DI 5 di)
        (reg/f:DI 247 [ D.158417 ])) Batch_Mix_Correlations.cc:696 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 247 [ D.158417 ])
        (nil)))
(call_insn 566 565 717 48 (set (reg:SI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 461 [ _241->D.131796.D.130302.D.127613.D.78818._vptr.TObject ])
                        (const_int 728 [0x2d8])) [0 MEM[(int (*__vtbl_ptr_type) () *)_242 + 728B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_243;_247->91) S1 A8])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:696 672 {*call_value}
     (expr_list:REG_DEAD (reg/f:DI 461 [ _241->D.131796.D.130302.D.127613.D.78818._vptr.TObject ])
        (expr_list:REG_DEAD (reg:DF 22 xmm1)
            (expr_list:REG_DEAD (reg:DF 21 xmm0)
                (expr_list:REG_DEAD (reg:DI 5 di)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                            (nil)))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:DF (use (reg:DF 21 xmm0))
            (expr_list:DF (use (reg:DF 22 xmm1))
                (nil)))))
(jump_insn 717 566 718 48 (set (pc)
        (label_ref 567)) 659 {jump}
     (nil)
 -> 567)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 202 209 214 244 257 270 498 499 500 501 502 503 511 516 521 523 524 525 526

(barrier 718 717 570)
;; basic block 49, loop depth 2, count 0, freq 19, maybe hot
;;  prev block 48, next block 50, flags: (RTL)
;;  pred:       28 [50.0%] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u686(6){ }u687(7){ }u688(16){ }u689(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 197 200 209 214 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 214
;; lr  def 	 17 [flags] 465 466 467 468
(code_label 570 718 571 49 65 "" [1 uses])
(note 571 570 572 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(debug_insn 572 571 573 49 (var_location:SF d (reg/v:SF 214 [ DeltaEta ])) -1
     (nil))
(debug_insn 573 572 574 49 (var_location:SF __x (reg/v:SF 214 [ DeltaEta ])) -1
     (nil))
(insn 574 573 575 49 (set (reg:V4SF 466)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0 S16 A128])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 1157 {*movv4sf_internal}
     (expr_list:REG_EQUIV (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 575 574 576 49 (parallel [
            (set (reg:SF 465 [ D.158409 ])
                (abs:SF (reg/v:SF 214 [ DeltaEta ])))
            (use (reg:V4SF 466))
            (clobber (reg:CC 17 flags))
        ]) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 479 {*absnegsf2_sse}
     (expr_list:REG_DEAD (reg:V4SF 466)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 576 575 577 49 (set (reg:DF 467 [ D.158411 ])
        (float_extend:DF (reg:SF 465 [ D.158409 ]))) Batch_Mix_Correlations.cc:686 159 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 465 [ D.158409 ])
        (nil)))
(insn 577 576 578 49 (set (reg:DF 468)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0 S8 A64])) Batch_Mix_Correlations.cc:686 133 {*movdf_internal_rex64}
     (expr_list:REG_EQUIV (const_double:DF 5.0000000000000001040834085586084256647154688835144043e-3 [0x0.a3d70a3d70a3d8p-7])
        (nil)))
(insn 578 577 579 49 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 468)
            (reg:DF 467 [ D.158411 ]))) Batch_Mix_Correlations.cc:686 58 {*cmpiudf_sse}
     (expr_list:REG_DEAD (reg:DF 468)
        (expr_list:REG_DEAD (reg:DF 467 [ D.158411 ])
            (nil))))
(jump_insn 579 578 719 49 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) Batch_Mix_Correlations.cc:686 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
            (nil)))
 -> 319)
;;  succ:       18 [100.0%] 
;;              50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 197 200 209 214 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 50, loop depth 2, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 197 200 209 214 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 719 579 720 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(jump_insn 720 719 721 50 (set (pc)
        (label_ref 580)) 659 {jump}
     (nil)
 -> 580)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 197 200 209 214 244 257 270 498 499 500 501 502 503 511 512 513 514 515

(barrier 721 720 584)
;; basic block 51, loop depth 2, count 0, freq 19, maybe hot
;;  prev block 50, next block 52, flags: (RTL)
;;  pred:       27 [50.0%] 
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u698(6){ }u699(7){ }u700(16){ }u701(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115
;; lr  def 	 17 [flags] 186
(code_label 584 721 585 51 64 "" [1 uses])
(note 585 584 586 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 586 585 587 51 (set (reg:SF 186 [ D.158409 ])
        (mem/j:SF (reg/f:DI 115 [ cluster_data_out_private.65 ]) [0 *cluster_data_out_private.65_82+0 S4 A32])) Batch_Mix_Correlations.cc:673 135 {*movsf_internal}
     (expr_list:REG_EQUIV (mem/j:SF (reg/f:DI 115 [ cluster_data_out_private.65 ]) [0 *cluster_data_out_private.65_82+0 S4 A32])
        (nil)))
(debug_insn 587 586 589 51 (var_location:SF __x (reg:SF 186 [ D.158409 ])) Batch_Mix_Correlations.cc:673 -1
     (nil))
(insn 589 587 590 51 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 186 [ D.158409 ])
            (reg:SF 186 [ D.158409 ]))) Batch_Mix_Correlations.cc:673 57 {*cmpiusf_sse}
     (expr_list:REG_DEAD (reg:SF 186 [ D.158409 ])
        (nil)))
(jump_insn 590 589 591 51 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 588)
            (pc))) Batch_Mix_Correlations.cc:673 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 2139 [0x85b])
            (nil)))
 -> 588)
;;  succ:       28 [21.4%] 
;;              52 [78.6%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 244 257 270 498 499 500 501 502 503 511 512 513 514 515

;; basic block 52, loop depth 2, count 0, freq 15, maybe hot
;;  prev block 51, next block 53, flags: (RTL, MODIFIED)
;;  pred:       51 [78.6%]  (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u707(6){ }u708(7){ }u709(16){ }u710(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 244 257 270 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115 152
;; lr  def 	 17 [flags] 290 291 469 470 471 472 473 475 476 477 478
(note 591 590 592 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(debug_insn 592 591 593 52 (var_location:SF d (minus:SF (mem/j:SF (plus:DI (reg/f:DI 115 [ cluster_data_out_private.65 ])
                (const_int 8 [0x8])) [0 *cluster_data_out_private.65_82+8 S4 A32])
        (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 20 [0x14])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 20B]+0 S4 A32]))) Batch_Mix_Correlations.cc:674 -1
     (nil))
(debug_insn 593 592 594 52 (var_location:SF __x (minus:SF (mem/j:SF (plus:DI (reg/f:DI 115 [ cluster_data_out_private.65 ])
                (const_int 8 [0x8])) [0 *cluster_data_out_private.65_82+8 S4 A32])
        (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 20 [0x14])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 20B]+0 S4 A32]))) -1
     (nil))
(insn 594 593 595 52 (set (reg:SF 470 [ *cluster_data_out_private.65_82+8 ])
        (mem/j:SF (plus:DI (reg/f:DI 115 [ cluster_data_out_private.65 ])
                (const_int 8 [0x8])) [0 *cluster_data_out_private.65_82+8 S4 A32])) Batch_Mix_Correlations.cc:674 135 {*movsf_internal}
     (expr_list:REG_EQUIV (mem/j:SF (plus:DI (reg/f:DI 115 [ cluster_data_out_private.65 ])
                (const_int 8 [0x8])) [0 *cluster_data_out_private.65_82+8 S4 A32])
        (nil)))
(insn 595 594 596 52 (set (reg:SF 469 [ D.158409 ])
        (minus:SF (reg:SF 470 [ *cluster_data_out_private.65_82+8 ])
            (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                    (const_int 20 [0x14])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 20B]+0 S4 A32]))) Batch_Mix_Correlations.cc:674 793 {*fop_sf_1_sse}
     (expr_list:REG_DEAD (reg:SF 470 [ *cluster_data_out_private.65_82+8 ])
        (nil)))
(insn 596 595 597 52 (set (reg:V4SF 471)
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0 S16 A128])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 1157 {*movv4sf_internal}
     (expr_list:REG_EQUIV (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 597 596 598 52 (parallel [
            (set (reg:SF 290 [ D.158409 ])
                (abs:SF (reg:SF 469 [ D.158409 ])))
            (use (reg:V4SF 471))
            (clobber (reg:CC 17 flags))
        ]) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 479 {*absnegsf2_sse}
     (expr_list:REG_DEAD (reg:SF 469 [ D.158409 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(debug_insn 598 597 599 52 (var_location:SF dphi (clobber (const_int 0 [0]))) Batch_Mix_Correlations.cc:674 -1
     (nil))
(debug_insn 599 598 600 52 (var_location:SF d (minus:SF (mem/j:SF (plus:DI (reg/f:DI 115 [ cluster_data_out_private.65 ])
                (const_int 12 [0xc])) [0 *cluster_data_out_private.65_82+12 S4 A32])
        (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 24 [0x18])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 24B]+0 S4 A32]))) Batch_Mix_Correlations.cc:675 -1
     (nil))
(debug_insn 600 599 601 52 (var_location:SF __x (minus:SF (mem/j:SF (plus:DI (reg/f:DI 115 [ cluster_data_out_private.65 ])
                (const_int 12 [0xc])) [0 *cluster_data_out_private.65_82+12 S4 A32])
        (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                (const_int 24 [0x18])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 24B]+0 S4 A32]))) -1
     (nil))
(insn 601 600 602 52 (set (reg:SF 473 [ *cluster_data_out_private.65_82+12 ])
        (mem/j:SF (plus:DI (reg/f:DI 115 [ cluster_data_out_private.65 ])
                (const_int 12 [0xc])) [0 *cluster_data_out_private.65_82+12 S4 A32])) Batch_Mix_Correlations.cc:675 135 {*movsf_internal}
     (expr_list:REG_EQUIV (mem/j:SF (plus:DI (reg/f:DI 115 [ cluster_data_out_private.65 ])
                (const_int 12 [0xc])) [0 *cluster_data_out_private.65_82+12 S4 A32])
        (nil)))
(insn 602 601 604 52 (set (reg:SF 472 [ D.158409 ])
        (minus:SF (reg:SF 473 [ *cluster_data_out_private.65_82+12 ])
            (mem:SF (plus:DI (reg/f:DI 152 [ D.158412 ])
                    (const_int 24 [0x18])) [0 MEM[(float[1][0:D.151645][0:D.151638] *)_131 + 24B]+0 S4 A32]))) Batch_Mix_Correlations.cc:675 793 {*fop_sf_1_sse}
     (expr_list:REG_DEAD (reg:SF 473 [ *cluster_data_out_private.65_82+12 ])
        (nil)))
(insn 604 602 605 52 (parallel [
            (set (reg:SF 291 [ D.158409 ])
                (abs:SF (reg:SF 472 [ D.158409 ])))
            (use (reg:V4SF 471))
            (clobber (reg:CC 17 flags))
        ]) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/cmath:88 479 {*absnegsf2_sse}
     (expr_list:REG_DEAD (reg:SF 472 [ D.158409 ])
        (expr_list:REG_DEAD (reg:V4SF 471)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(debug_insn 605 604 606 52 (var_location:SF deta (clobber (const_int 0 [0]))) Batch_Mix_Correlations.cc:675 -1
     (nil))
(insn 606 605 607 52 (set (reg:SF 476 [ D.158409 ])
        (mult:SF (reg:SF 290 [ D.158409 ])
            (reg:SF 290 [ D.158409 ]))) Batch_Mix_Correlations.cc:676 786 {*fop_sf_comm_sse}
     (nil))
(insn 607 606 608 52 (set (reg:SF 477 [ D.158409 ])
        (mult:SF (reg:SF 291 [ D.158409 ])
            (reg:SF 291 [ D.158409 ]))) Batch_Mix_Correlations.cc:676 786 {*fop_sf_comm_sse}
     (nil))
(insn 608 607 609 52 (set (reg:SF 478 [ D.158409 ])
        (plus:SF (reg:SF 476 [ D.158409 ])
            (reg:SF 477 [ D.158409 ]))) Batch_Mix_Correlations.cc:676 786 {*fop_sf_comm_sse}
     (expr_list:REG_DEAD (reg:SF 477 [ D.158409 ])
        (expr_list:REG_DEAD (reg:SF 476 [ D.158409 ])
            (nil))))
(insn 609 608 610 52 (set (reg:SF 475)
        (sqrt:SF (reg:SF 478 [ D.158409 ]))) Batch_Mix_Correlations.cc:676 826 {*sqrtsf2_sse}
     (expr_list:REG_DEAD (reg:SF 478 [ D.158409 ])
        (nil)))
(insn 610 609 611 52 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 475)
            (reg:SF 475))) Batch_Mix_Correlations.cc:676 57 {*cmpiusf_sse}
     (expr_list:REG_DEAD (reg:SF 475)
        (nil)))
(jump_insn 611 610 664 52 (set (pc)
        (if_then_else (ordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 588)
            (pc))) Batch_Mix_Correlations.cc:676 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCFPU 17 flags)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil)))
 -> 588)
;;  succ:       53 [0.0%]  (FALLTHRU)
;;              28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 244 257 270 290 291 498 499 500 501 502 503 511 512 513 514 515

;; basic block 53, loop depth 2, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (RTL, MODIFIED)
;;  pred:       52 [0.0%]  (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u739(6){ }u740(7){ }u741(16){ }u742(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 244 257 270 290 291 498 499 500 501 502 503 511 512 513 514 515
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 290 291
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 479 480 481
(note 664 611 615 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 615 664 616 53 (set (reg:SF 479 [ D.158409 ])
        (mult:SF (reg:SF 290 [ D.158409 ])
            (reg:SF 290 [ D.158409 ]))) Batch_Mix_Correlations.cc:676 786 {*fop_sf_comm_sse}
     (expr_list:REG_DEAD (reg:SF 290 [ D.158409 ])
        (nil)))
(insn 616 615 617 53 (set (reg:SF 480 [ D.158409 ])
        (mult:SF (reg:SF 291 [ D.158409 ])
            (reg:SF 291 [ D.158409 ]))) Batch_Mix_Correlations.cc:676 786 {*fop_sf_comm_sse}
     (expr_list:REG_DEAD (reg:SF 291 [ D.158409 ])
        (nil)))
(insn 617 616 618 53 (set (reg:SF 481 [ D.158409 ])
        (plus:SF (reg:SF 479 [ D.158409 ])
            (reg:SF 480 [ D.158409 ]))) Batch_Mix_Correlations.cc:676 786 {*fop_sf_comm_sse}
     (expr_list:REG_DEAD (reg:SF 480 [ D.158409 ])
        (expr_list:REG_DEAD (reg:SF 479 [ D.158409 ])
            (nil))))
(insn 618 617 619 53 (set (reg:SF 21 xmm0)
        (reg:SF 481 [ D.158409 ])) Batch_Mix_Correlations.cc:676 135 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 481 [ D.158409 ])
        (nil)))
(call_insn 619 618 622 53 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrtf") [flags 0x41]  <function_decl 0x2b94c3a76200 __builtin_sqrtf>) [0 __builtin_sqrtf S1 A8])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:676 672 {*call_value}
     (expr_list:REG_UNUSED (reg:SF 21 xmm0)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(debug_insn 622 619 722 53 (var_location:SF dR (clobber (const_int 0 [0]))) Batch_Mix_Correlations.cc:676 -1
     (nil))
(jump_insn 722 622 723 53 (set (pc)
        (label_ref 588)) 659 {jump}
     (nil)
 -> 588)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 152 244 257 270 498 499 500 501 502 503 511 512 513 514 515

(barrier 723 722 625)
;; basic block 54, loop depth 1, count 0, freq 450, maybe hot
;;  prev block 53, next block 55, flags: (RTL, MODIFIED)
;;  pred:       14 [50.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u752(6){ }u753(7){ }u754(16){ }u755(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 244 257 270 302 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 510
;; lr  def 	 17 [flags]
(code_label 625 723 626 54 57 "" [1 uses])
(note 626 625 627 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 627 626 628 54 (parallel [
            (set (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                        (const_int 300 [0x12c])) [0 .omp_data_i_23(D)->ME_pass_Counter+0 S4 A32])
                (plus:SI (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                            (const_int 300 [0x12c])) [0 .omp_data_i_23(D)->ME_pass_Counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:655 273 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       55 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 244 257 270 302 501 502 503 509 510

;; basic block 55, loop depth 1, count 0, freq 900, maybe hot
;;  prev block 54, next block 56, flags: (RTL, MODIFIED)
;;  pred:       54 [100.0%]  (FALLTHRU)
;;              15 [100.0%] 
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u758(6){ }u759(7){ }u760(16){ }u761(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 244 257 270 302 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 510
;; lr  def 	 17 [flags]
(code_label 628 627 629 55 58 "" [1 uses])
(note 629 628 630 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(debug_insn 630 629 631 55 (var_location:DI itrack (const_int 0 [0])) -1
     (nil))
(insn 631 630 632 55 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/j:SI (plus:DI (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
                    (const_int 276 [0x114])) [0 .omp_data_i_23(D)->ntrack_max+0 S4 A32])
            (const_int 0 [0]))) Batch_Mix_Correlations.cc:658 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 632 631 633 55 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 312)
            (pc))) Batch_Mix_Correlations.cc:658 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 900 [0x384])
            (nil)))
 -> 312)
;;  succ:       56 [91.0%]  (FALLTHRU)
;;              16 [9.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 244 257 270 302 501 502 503 509 510

;; basic block 56, loop depth 1, count 0, freq 819, maybe hot
;;  prev block 55, next block 57, flags: (RTL, MODIFIED)
;;  pred:       55 [91.0%]  (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u764(6){ }u765(7){ }u766(16){ }u767(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 101 115 244 257 270 302 501 502 503 509 510
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 244 257 270 302 509 510
;; lr  def 	 17 [flags] 163 282 498 499 500 511 512 513 514 515
(note 633 632 634 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(note 634 633 635 56 NOTE_INSN_DELETED)
(insn 635 634 7 56 (set (reg:DI 163 [ D.158397 ])
        (reg:DI 302 [ D.158403 ])) Batch_Mix_Correlations.cc:659 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 302 [ D.158403 ])
        (nil)))
(insn 7 635 555 56 (set (reg/v:DI 282 [ itrack ])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:673 87 {*movdi_internal_rex64}
     (nil))
(insn 555 7 532 56 (parallel [
            (set (reg:DI 498)
                (mult:DI (reg/v:DI 509 [orig:63 imix ] [63])
                    (reg:DI 244 [ D.158397 ])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:696 354 {*muldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 532 555 509 56 (parallel [
            (set (reg:DI 499)
                (mult:DI (reg/v:DI 509 [orig:63 imix ] [63])
                    (reg:DI 257 [ D.158397 ])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:702 354 {*muldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 509 532 754 56 (parallel [
            (set (reg:DI 500)
                (mult:DI (reg/v:DI 509 [orig:63 imix ] [63])
                    (reg:DI 270 [ D.158397 ])))
            (clobber (reg:CC 17 flags))
        ]) Batch_Mix_Correlations.cc:706 354 {*muldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 754 509 755 56 (set (reg/v:DI 511 [orig:63 imix ] [63])
        (reg/v:DI 509 [orig:63 imix ] [63])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v:DI 509 [orig:63 imix ] [63])
        (nil)))
(insn 755 754 756 56 (set (reg/f:DI 512 [orig:101 track_data_out_private.64 ] [101])
        (reg/f:DI 101 [ track_data_out_private.64 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 101 [ track_data_out_private.64 ])
        (nil)))
(insn 756 755 757 56 (set (reg:DI 513 [orig:163 D.158397 ] [163])
        (reg:DI 163 [ D.158397 ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 163 [ D.158397 ])
        (nil)))
(insn 757 756 758 56 (set (reg/v:DI 514 [orig:282 itrack ] [282])
        (reg/v:DI 282 [ itrack ])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v:DI 282 [ itrack ])
        (nil)))
(insn 758 757 724 56 (set (reg/f:DI 515 [orig:292 .omp_data_i ] [292])
        (reg/f:DI 510 [orig:292 .omp_data_i ] [292])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 510 [orig:292 .omp_data_i ] [292])
        (nil)))
(jump_insn 724 758 725 56 (set (pc)
        (label_ref 639)) 659 {jump}
     (nil)
 -> 639)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 66 68 84 85 115 244 257 270 498 499 500 501 502 503 511 512 513 514 515

(barrier 725 724 646)
;; basic block 57, loop depth 0, count 0, freq 73, maybe hot
;;  prev block 56, next block 58, flags: (RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u778(6){ }u779(7){ }u780(16){ }u781(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64 65 66 67 68 69 71 79 292 295
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 295
;; lr  def 	 17 [flags] 61 62
(code_label 646 725 647 57 51 "" [1 uses])
(note 647 646 648 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 648 647 6 57 (parallel [
            (set (reg:DI 61 [ q.1245 ])
                (plus:DI (reg:DI 295)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 295)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 6 648 726 57 (set (reg:DI 62 [ tt.1246 ])
        (const_int 0 [0])) Batch_Mix_Correlations.cc:613 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 726 6 727 57 (set (pc)
        (label_ref 649)) 659 {jump}
     (nil)
 -> 649)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 62 64 65 66 67 68 69 71 79 292

(barrier 727 726 653)
;; basic block 58, loop depth 0, count 0, freq 146, maybe hot
;;  prev block 57, next block 1, flags: (RTL)
;;  pred:       3 [39.0%] 
;;              8 [100.0%]  (LOOP_EXIT)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u783(6){ }u784(7){ }u785(16){ }u786(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 653 727 654 58 50 "" [2 uses])
(note 654 653 0 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int] (_ZN9__gnu_cxx6__stoaIyycIiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_, funcdef_no=8665, decl_uid=27044, cgraph_uid=4828)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 68: local to bb 2 def dominates all uses has unique first use
Reg 69 uninteresting (no unique first use)
Reg 70: def dominates all uses has unique first use
Reg 72: local to bb 2 def dominates all uses has unique first use
Reg 59 uninteresting
Reg 60: def dominates all uses has unique first use
Reg 61 uninteresting
Reg 60 not local to one basic block
Found def insn 2 for 68 to be not moveable
Reg 70 not local to one basic block
Found def insn 6 for 72 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 5 6 }
;; 5 succs { }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 73: (insn_list:REG_DEP_TRUE 13 (nil))
init_insns for 74: (insn_list:REG_DEP_TRUE 42 (nil))
Reg 73 has equivalence, initial gains 4000

Pass 0 for finding pseudo/allocno costs

    r74: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r74,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r73: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a8 (r73,l0) best NO_REGS, allocno NO_REGS
    r72: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r72,l0) best DREG, allocno GENERAL_REGS
    r71: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r71,l0) best CREG, allocno GENERAL_REGS
    r70: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r70,l0) best DREG, allocno GENERAL_REGS
    r69: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r69,l0) best SIREG, allocno GENERAL_REGS
    r68: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r68,l0) best DIREG, allocno GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r61,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r60: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r60,l0) best AREG, allocno GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r59,l0) best AREG, allocno GENERAL_REGS

  a0(r60,l0) costs: AREG:-1999,-1999 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:25987,25987 SSE_REGS:25987,25987 MMX_REGS:25987,25987 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:25987,25987 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6997,6997
  a1(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:-1000,-1000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:37648,37648 SSE_REGS:37648,37648 MMX_REGS:37648,37648 FP_TOP_SSE_REGS:60784895,60784895 FP_SECOND_SSE_REGS:60784895,60784895 FLOAT_SSE_REGS:60784895,60784895 FLOAT_INT_REGS:60784895,60784895 INT_SSE_REGS:37648,37648 FLOAT_INT_SSE_REGS:60784895,60784895 ALL_REGS:60784895,60784895 MEM:11584,11584
  a2(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:23322,23322 SSE_REGS:23322,23322 MMX_REGS:23322,23322 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:23322,23322 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:6279,6279
  a3(r70,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:50661,50661 SSE_REGS:50661,50661 MMX_REGS:50661,50661 FP_TOP_SSE_REGS:4000000,4000000 FP_SECOND_SSE_REGS:4000000,4000000 FLOAT_SSE_REGS:4000000,4000000 FLOAT_INT_REGS:4000000,4000000 INT_SSE_REGS:50661,50661 FLOAT_INT_SSE_REGS:4000000,4000000 ALL_REGS:4000000,4000000 MEM:12691,12691
  a4(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:37661,37661 SSE_REGS:37661,37661 MMX_REGS:37661,37661 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:37661,37661 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:9691,9691
  a5(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:-2,-2 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:13026,13026 SSE_REGS:13026,13026 MMX_REGS:13026,13026 FP_TOP_SSE_REGS:1131070,1131070 FP_SECOND_SSE_REGS:1131070,1131070 FLOAT_SSE_REGS:1131070,1131070 FLOAT_INT_REGS:1131070,1131070 INT_SSE_REGS:13026,13026 FLOAT_INT_SSE_REGS:1131070,1131070 ALL_REGS:1131070,1131070 MEM:4006,4006
  a6(r59,l0) costs: AREG:-1000,-1000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:38987,38987 SSE_REGS:38987,38987 MMX_REGS:38987,38987 FP_TOP_SSE_REGS:132004465,132004465 FP_SECOND_SSE_REGS:132004465,132004465 FLOAT_SSE_REGS:132004465,132004465 FLOAT_INT_REGS:132004465,132004465 INT_SSE_REGS:38987,38987 FLOAT_INT_SSE_REGS:132004465,132004465 ALL_REGS:132004465,132004465 MEM:11996,11996
  a7(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:8000,8000
  a8(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a9(r72,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000

   Insn 52(l0): point = 0
   Insn 49(l0): point = 2
   Insn 42(l0): point = 5
   Insn 41(l0): point = 7
   Insn 39(l0): point = 10
   Insn 38(l0): point = 12
   Insn 33(l0): point = 15
   Insn 32(l0): point = 17
   Insn 30(l0): point = 20
   Insn 29(l0): point = 22
   Insn 25(l0): point = 25
   Insn 24(l0): point = 27
   Insn 22(l0): point = 30
   Insn 21(l0): point = 32
   Insn 20(l0): point = 34
   Insn 18(l0): point = 36
   Insn 17(l0): point = 38
   Insn 16(l0): point = 40
   Insn 15(l0): point = 42
   Insn 14(l0): point = 44
   Insn 13(l0): point = 46
   Insn 12(l0): point = 48
   Insn 11(l0): point = 50
   Insn 10(l0): point = 52
   Insn 6(l0): point = 54
   Insn 5(l0): point = 56
   Insn 4(l0): point = 58
   Insn 3(l0): point = 60
   Insn 2(l0): point = 62
 a0(r60): [30..36] [20..24] [3..14]
 a1(r71): [30..56] [20..24] [6..14]
 a2(r74): [6..7]
 a3(r70): [30..58] [20..24] [8..14]
 a4(r61): [30..34] [20..24] [8..14]
 a5(r69): [28..60] [18..24]
 a6(r59): [30..50] [23..24]
 a7(r68): [39..62]
 a8(r73): [43..46]
 a9(r72): [45..54]
Compressing live ranges: from 65 to 10 - 15%
Ranges after the compression:
 a0(r60): [0..7]
 a1(r71): [0..9]
 a2(r74): [0..1]
 a3(r70): [2..9]
 a4(r61): [2..7]
 a5(r69): [4..9]
 a6(r59): [4..9]
 a7(r68): [8..9]
 a8(r73): [8..9]
 a9(r72): [8..9]
+++Allocating 80 bytes for conflict table (uncompressed size 80)
;; a0(r60,l0) conflicts: a2(r74,l0) a1(r71,l0) a4(r61,l0) a3(r70,l0) a5(r69,l0) a6(r59,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r71,l0) conflicts: a2(r74,l0) a0(r60,l0) a4(r61,l0) a3(r70,l0) a5(r69,l0) a6(r59,l0) a7(r68,l0) a9(r72,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a2(r74,l0) conflicts: a0(r60,l0) a1(r71,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a3(r70,l0) conflicts: a0(r60,l0) a1(r71,l0) a4(r61,l0) a5(r69,l0) a6(r59,l0) a7(r68,l0) a9(r72,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a4(r61,l0) conflicts: a0(r60,l0) a1(r71,l0) a3(r70,l0) a5(r69,l0) a6(r59,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r69,l0) conflicts: a0(r60,l0) a1(r71,l0) a4(r61,l0) a3(r70,l0) a6(r59,l0) a7(r68,l0) a9(r72,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a6(r59,l0) conflicts: a0(r60,l0) a1(r71,l0) a4(r61,l0) a3(r70,l0) a5(r69,l0) a7(r68,l0) a9(r72,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a7(r68,l0) conflicts: a1(r71,l0) a3(r70,l0) a5(r69,l0) a6(r59,l0) a9(r72,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a8(r73,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a9(r72,l0) conflicts: a1(r71,l0) a3(r70,l0) a5(r69,l0) a6(r59,l0) a7(r68,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

  cp0:a2(r74)<->a4(r61)@897:constraint
  regions=1, blocks=9, points=10
    allocnos=10 (big 0), copies=1, conflicts=0, ranges=10

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 8 7 6 5 4 3 2
    all: 0r60 1r71 2r74 3r70 4r61 5r69 6r59 7r68 8r73 9r72
    modified regnos: 59 60 61 68 69 70 71 72 73 74
    border:
    Pressure: GENERAL_REGS=8
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@57928
          2:( 3 6 41-44)@110554
      Spill a8(r73,l0)
      Allocno a0r60 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a1r71 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a2r74 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a3r70 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a4r61 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a5r69 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a6r59 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a7r68 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a9r72 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Pushing a2(r74,l0)(cost 0)
      Pushing a0(r60,l0)(cost 0)
      Pushing a9(r72,l0)(cost 0)
        Making a1(r71,l0) colorable
        Making a3(r70,l0) colorable
        Making a5(r69,l0) colorable
        Making a6(r59,l0) colorable
      Pushing a5(r69,l0)(cost 4006)
      Pushing a7(r68,l0)(cost 0)
      Pushing a1(r71,l0)(cost 11584)
      Pushing a4(r61,l0)(cost 0)
      Pushing a6(r59,l0)(cost 11996)
      Pushing a3(r70,l0)(cost 12691)
      Popping a3(r70,l0)  -- assign reg 3
      Popping a6(r59,l0)  -- assign reg 6
      Popping a4(r61,l0)  -- assign reg 1
      Popping a1(r71,l0)  -- assign reg 41
      Popping a7(r68,l0)  -- assign reg 42
      Popping a5(r69,l0)  -- assign reg 43
      Popping a9(r72,l0)  -- assign reg 44
      Popping a0(r60,l0)  -- assign reg 0
      Popping a2(r74,l0)  -- assign reg 1
Disposition:
    6:r59  l0     6    0:r60  l0     0    4:r61  l0     1    7:r68  l0    42
    5:r69  l0    43    3:r70  l0     3    1:r71  l0    41    9:r72  l0    44
    8:r73  l0   mem    2:r74  l0     1
New iteration of spill/restore move
+++Costs: overall 1003, reg -5997, mem 7000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={6d,4u} r1={6d,2u} r2={5d,1u} r4={6d,2u} r5={8d,4u} r6={1d,8u} r7={1d,12u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,7u} r17={9d,3u} r18={4d} r19={4d} r20={1d,10u,2e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d,1u} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r59={1d,2u} r60={1d,3u} r61={1d,2u} r68={1d,1u} r69={1d,2u} r70={1d,3u} r71={1d,2u,1e} r72={1d,1u} r73={1d,1u} r74={1d,1u} 
;;    total ref usage 291{216d,72u,3e} in 31{27 regular + 4 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 68 69 70 71 72 73
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 68 [ __convf ])
        (reg:DI 5 di [ __convf ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ __convf ])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 69 [ __name ])
        (reg:DI 4 si [ __name ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ __name ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 70 [ __str ])
        (reg:DI 1 dx [ __str ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ __str ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 71 [ __idx ])
        (reg:DI 2 cx [ __idx ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:54 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ __idx ])
        (nil)))
(insn 6 5 7 2 (set (reg/v:SI 72 [ __base#0 ])
        (reg:SI 37 r8 [ __base#0 ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:54 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ __base#0 ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/u 10 7 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x2b94c6f04100 __errno_location>) [0 __errno_location S1 A8])
            (const_int 0 [0]))) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:61 672 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 11 10 12 2 (set (reg/f:DI 59 [ D.158427 ])
        (reg:DI 0 ax)) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:61 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 12 11 13 2 (set (mem:SI (reg/f:DI 59 [ D.158427 ]) [0 *_2+0 S4 A32])
        (const_int 0 [0])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:61 89 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:DI 73)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:62 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8]))
            (nil))))
(insn 14 13 15 2 (set (reg:SI 1 dx)
        (reg/v:SI 72 [ __base#0 ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:62 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 72 [ __base#0 ])
        (nil)))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg/f:DI 73)) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:62 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 73)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8]))
            (nil))))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/v/f:DI 70 [ __str ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:62 87 {*movdi_internal_rex64}
     (nil))
(call_insn 17 16 18 2 (set (reg:DI 0 ax)
        (call (mem:QI (reg/v/f:DI 68 [ __convf ]) [0 *__convf_5(D) S1 A8])
            (const_int 0 [0]))) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:62 672 {*call_value}
     (expr_list:REG_DEAD (reg/v/f:DI 68 [ __convf ])
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 18 17 19 2 (set (reg:DI 60 [ D.158428 ])
        (reg:DI 0 ax)) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:62 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(debug_insn 19 18 20 2 (var_location:DI __tmp (reg:DI 60 [ D.158428 ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:62 -1
     (nil))
(insn 20 19 21 2 (set (reg/f:DI 61 [ __endptr.89 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 __endptr+0 S8 A64])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:64 87 {*movdi_internal_rex64}
     (nil))
(insn 21 20 22 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 61 [ __endptr.89 ])
            (reg/v/f:DI 70 [ __str ]))) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:64 8 {*cmpdi_1}
     (nil))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:64 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil)))
 -> 27)
;;  succ:       3 [0.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60 61 69 70 71

;; basic block 3, loop depth 0, count 0, freq 4
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [0.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u28(6){ }u29(7){ }u30(16){ }u31(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg/v/f:DI 69 [ __name ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:65 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 69 [ __name ])
        (nil)))
(call_insn 25 24 26 3 (call (mem:QI (symbol_ref:DI ("_ZSt24__throw_invalid_argumentPKc") [flags 0x41]  <function_decl 0x2b94c6582a00 __throw_invalid_argument>) [0 __throw_invalid_argument S1 A8])
        (const_int 0 [0])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:65 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 26 25 27)
;; basic block 4, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u35(6){ }u36(7){ }u37(16){ }u38(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60 61 69 70 71
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 17 [flags]
(code_label 27 26 28 4 92 "" [1 uses])
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/f:DI 59 [ D.158427 ]) [0 *_2+0 S4 A32])
            (const_int 34 [0x22]))) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:66 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/f:DI 59 [ D.158427 ])
        (nil)))
(jump_insn 30 29 31 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:66 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil)))
 -> 35)
;;  succ:       5 [0.0%]  (FALLTHRU)
;;              6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 69 70 71

;; basic block 5, loop depth 0, count 0, freq 4
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [0.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u41(6){ }u42(7){ }u43(16){ }u44(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:DI 5 di)
        (reg/v/f:DI 69 [ __name ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:70 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 69 [ __name ])
        (nil)))
(call_insn 33 32 34 5 (call (mem:QI (symbol_ref:DI ("_ZSt20__throw_out_of_rangePKc") [flags 0x41]  <function_decl 0x2b94c6582c00 __throw_out_of_range>) [0 __throw_out_of_range S1 A8])
        (const_int 0 [0])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:70 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 35)
;; basic block 6, loop depth 0, count 0, freq 9992, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u48(6){ }u49(7){ }u50(16){ }u51(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 70 71
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71
;; lr  def 	 17 [flags]
(code_label 35 34 36 6 93 "" [1 uses])
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 37 36 38 6 (var_location:DI __ret (reg:DI 60 [ D.158428 ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:72 -1
     (nil))
(insn 38 37 39 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 71 [ __idx ])
            (const_int 0 [0]))) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:74 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 39 38 40 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:74 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil)))
 -> 43)
;;  succ:       7 [89.9%]  (FALLTHRU)
;;              8 [10.1%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 70 71

;; basic block 7, loop depth 0, count 0, freq 8979, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [89.9%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u55(6){ }u56(7){ }u57(16){ }u58(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 70 71
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 70 71
;; lr  def 	 17 [flags] 74
(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 7 (parallel [
            (set (reg:DI 74)
                (minus:DI (reg/f:DI 61 [ __endptr.89 ])
                    (reg/v/f:DI 70 [ __str ])))
            (clobber (reg:CC 17 flags))
        ]) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:75 310 {*subdi_1}
     (expr_list:REG_DEAD (reg/v/f:DI 70 [ __str ])
        (expr_list:REG_DEAD (reg/f:DI 61 [ __endptr.89 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUIV (mem:DI (reg/v/f:DI 71 [ __idx ]) [0 *__idx_13(D)+0 S8 A64])
                    (nil))))))
(insn 42 41 43 7 (set (mem:DI (reg/v/f:DI 71 [ __idx ]) [0 *__idx_13(D)+0 S8 A64])
        (reg:DI 74)) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 74)
        (expr_list:REG_DEAD (reg/v/f:DI 71 [ __idx ])
            (nil))))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60

;; basic block 8, loop depth 0, count 0, freq 9992, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       6 [10.1%] 
;;              7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u63(6){ }u64(7){ }u65(16){ }u66(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60
;; lr  def 	 0 [ax]
(code_label 43 42 44 8 94 "" [1 uses])
(note 44 43 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 44 52 8 (set (reg/i:DI 0 ax)
        (reg:DI 60 [ D.158428 ])) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 60 [ D.158428 ])
        (nil)))
(insn 52 49 0 8 (use (reg/i:DI 0 ax)) /global/common/pdsf_sl6/usg/software/gcc/4.8.1/include/c++/4.8.1/ext/string_conversions.h:78 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function Int_t TTree::SetBranchAddress(const char*, T*, TBranch**) [with T = float; Int_t = int] (_ZN5TTree16SetBranchAddressIfEEiPKcPT_PP7TBranch, funcdef_no=8766, decl_uid=144192, cgraph_uid=4941)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 65: def dominates all uses has unique first use
Reg 66: def dominates all uses has unique first use
Reg 67: def dominates all uses has unique first use
Reg 68: def dominates all uses has unique first use
Reg 60: def dominates all uses has unique first use
Reg 69: local to bb 4 def dominates all uses has unique first use
Reg 63 uninteresting
Reg 60 not local to one basic block
Reg 65 not local to one basic block
Reg 66 not local to one basic block
Reg 67 not local to one basic block
Reg 68 not local to one basic block
Found def insn 27 for 69 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r68,l0) best CREG, allocno GENERAL_REGS
    r67: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r67,l0) best DREG, allocno GENERAL_REGS
    r66: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r66,l0) best SIREG, allocno GENERAL_REGS
    r65: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r65,l0) best DIREG, allocno GENERAL_REGS
    r63: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r63,l0) best AREG, allocno GENERAL_REGS
    r60: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r60,l0) best AREG, allocno GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r59,l0) best AREG, allocno GENERAL_REGS

  a0(r63,l0) costs: AREG:-2000,-2000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:66535000,66535000 FP_SECOND_SSE_REGS:66535000,66535000 FLOAT_SSE_REGS:66535000,66535000 FLOAT_INT_REGS:66535000,66535000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:66535000,66535000 ALL_REGS:66535000,66535000 MEM:8000,8000
  a2(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:11000,11000
  a3(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r67,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a5(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a6(r60,l0) costs: AREG:-1000,-1000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:11000,11000
  a7(r59,l0) costs: AREG:-101,-101 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:27313,27313 SSE_REGS:27313,27313 MMX_REGS:27313,27313 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:27313,27313 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:7404,7404

   Insn 45(l0): point = 0
   Insn 42(l0): point = 2
   Insn 37(l0): point = 4
   Insn 36(l0): point = 6
   Insn 35(l0): point = 8
   Insn 34(l0): point = 10
   Insn 33(l0): point = 12
   Insn 32(l0): point = 14
   Insn 31(l0): point = 16
   Insn 30(l0): point = 18
   Insn 28(l0): point = 20
   Insn 27(l0): point = 22
   Insn 22(l0): point = 25
   Insn 21(l0): point = 27
   Insn 20(l0): point = 29
   Insn 18(l0): point = 32
   Insn 17(l0): point = 34
   Insn 7(l0): point = 36
   Insn 14(l0): point = 38
   Insn 13(l0): point = 40
   Insn 12(l0): point = 42
   Insn 11(l0): point = 44
   Insn 10(l0): point = 46
   Insn 5(l0): point = 48
   Insn 4(l0): point = 50
   Insn 3(l0): point = 52
   Insn 2(l0): point = 54
 a0(r63): [3..4]
 a1(r69): [7..22]
 a2(r65): [9..54]
 a3(r66): [11..52]
 a4(r67): [13..50]
 a5(r68): [15..48]
 a6(r60): [17..38]
 a7(r59): [32..36] [19..25]
Compressing live ranges: from 57 to 6 - 10%
Ranges after the compression:
 a0(r63): [0..1]
 a1(r69): [2..3]
 a2(r65): [2..5]
 a3(r66): [2..5]
 a4(r67): [2..5]
 a5(r68): [2..5]
 a6(r60): [2..5]
 a7(r59): [2..5]
+++Allocating 56 bytes for conflict table (uncompressed size 64)
;; a0(r63,l0) conflicts:;; a1(r69,l0) conflicts: a2(r65,l0) a3(r66,l0) a4(r67,l0) a5(r68,l0) a6(r60,l0) a7(r59,l0)
;;     total conflict hard regs: 1 2 4 5 37 38
;;     conflict hard regs: 1 2 4 5 37 38

;; a2(r65,l0) conflicts: a1(r69,l0) a3(r66,l0) a4(r67,l0) a5(r68,l0) a6(r60,l0) a7(r59,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a3(r66,l0) conflicts: a1(r69,l0) a2(r65,l0) a4(r67,l0) a5(r68,l0) a6(r60,l0) a7(r59,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a4(r67,l0) conflicts: a1(r69,l0) a2(r65,l0) a3(r66,l0) a5(r68,l0) a6(r60,l0) a7(r59,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a5(r68,l0) conflicts: a1(r69,l0) a2(r65,l0) a3(r66,l0) a4(r67,l0) a6(r60,l0) a7(r59,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a6(r60,l0) conflicts: a1(r69,l0) a2(r65,l0) a3(r66,l0) a4(r67,l0) a5(r68,l0) a7(r59,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a7(r59,l0) conflicts: a1(r69,l0) a2(r65,l0) a3(r66,l0) a4(r67,l0) a5(r68,l0) a6(r60,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=5, points=6
    allocnos=8 (big 0), copies=0, conflicts=0, ranges=8

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 4 3 2
    all: 0r63 1r69 2r65 3r66 4r67 5r68 6r60 7r59
    modified regnos: 59 60 63 65 66 67 68 69
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@48808
          2:( 0 3 6 39-44)@16000
            3:( 3 6 41-44)@92384
      Allocno a0r63 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a1r69 of GENERAL_REGS(15) has 9 avail. regs  0 3 6 39-44, node:  0 3 6 39-44 (confl regs =  1 2 4 5 7-38 45-51)
      Allocno a2r65 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a3r66 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a4r67 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a5r68 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a6r60 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a7r59 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a0(r63,l0)(cost 0)
      Pushing a1(r69,l0)(cost 0)
        Making a2(r65,l0) colorable
        Making a3(r66,l0) colorable
        Making a4(r67,l0) colorable
        Making a5(r68,l0) colorable
        Making a6(r60,l0) colorable
      Pushing a5(r68,l0)(cost 7000)
      Pushing a4(r67,l0)(cost 7000)
      Pushing a3(r66,l0)(cost 7000)
      Pushing a7(r59,l0)(cost 0)
      Pushing a6(r60,l0)(cost 14192)
      Pushing a2(r65,l0)(cost 11000)
      Popping a2(r65,l0)  -- assign reg 3
      Popping a6(r60,l0)  -- assign reg 6
      Popping a7(r59,l0)  -- assign reg 38
      Popping a3(r66,l0)  -- assign reg 41
      Popping a4(r67,l0)  -- assign reg 42
      Popping a5(r68,l0)  -- assign reg 43
      Popping a1(r69,l0)  -- assign reg 0
      Popping a0(r63,l0)  -- assign reg 0
Disposition:
    7:r59  l0    38    6:r60  l0     6    0:r63  l0     0    2:r65  l0     3
    3:r66  l0    41    4:r67  l0    42    5:r68  l0    43    1:r69  l0     0
New iteration of spill/restore move
+++Costs: overall -10000, reg -10000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


Int_t TTree::SetBranchAddress(const char*, T*, TBranch**) [with T = float; Int_t = int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={5d,5u} r1={6d,3u} r2={5d,2u} r4={6d,3u} r5={7d,4u} r6={1d,4u} r7={1d,9u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,3u} r17={4d,1u} r18={3d} r19={3d} r20={1d,4u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={5d,1u} r38={5d,1u} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r59={2d,3u} r60={1d,3u} r63={1d,1u} r65={1d,2u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} 
;;    total ref usage 225{172d,53u,0e} in 31{28 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 65 66 67 68
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/f:DI 65 [ this ])
        (reg:DI 5 di [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:527 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 66 [ bname ])
        (reg:DI 4 si [ bname ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:527 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ bname ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 67 [ add ])
        (reg:DI 1 dx [ add ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:527 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ add ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 68 [ ptr ])
        (reg:DI 2 cx [ ptr ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:527 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ ptr ])
        (nil)))
(note 6 5 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 6 11 2 (set (reg:SI 1 dx)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 89 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 4 si)
        (const_int 1 [0x1])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 89 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZTIf") [flags 0x40]  <var_decl 0x2b94cc144130 _ZTIf>)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 87 {*movdi_internal_rex64}
     (nil))
(call_insn 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN6TClass8GetClassERKSt9type_infobb") [flags 0x41]  <function_decl 0x2b94c9f9a100 GetClass>) [0 GetClass S1 A8])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 14 13 15 2 (set (reg/v/f:DI 60 [ cl ])
        (reg:DI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(debug_insn 15 14 16 2 (var_location:DI cl (reg/v/f:DI 60 [ cl ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 -1
     (nil))
(debug_insn 16 15 7 2 (var_location:SI type (const_int -1 [0xffffffffffffffff])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:529 -1
     (nil))
(insn 7 16 17 2 (set (reg/v:SI 59 [ type ])
        (const_int -1 [0xffffffffffffffff])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:529 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))
(insn 17 7 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 60 [ cl ])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 24)
            (pc))) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 8987 [0x231b])
            (nil)))
 -> 24)
;;  succ:       3 [10.1%]  (FALLTHRU)
;;              4 [89.9%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60 65 66 67 68

;; basic block 3, loop depth 0, count 0, freq 1013, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [10.1%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u16(6){ }u17(7){ }u18(16){ }u19(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 65 66 67 68
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZTIf") [flags 0x40]  <var_decl 0x2b94cc144130 _ZTIf>)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 87 {*movdi_internal_rex64}
     (nil))
(call_insn 21 20 22 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN9TDataType7GetTypeERKSt9type_info") [flags 0x41]  <function_decl 0x2b94c9541f00 GetType>) [0 GetType S1 A8])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 22 21 23 3 (set (reg/v:SI 59 [ type ])
        (reg:SI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(debug_insn 23 22 24 3 (var_location:SI type (reg/v:SI 59 [ type ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 -1
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60 65 66 67 68

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2 [89.9%] 
;;              3 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u24(6){ }u25(7){ }u26(16){ }u27(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60 65 66 67 68
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60 65 66 67 68
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 69
(code_label 24 23 25 4 97 "" [1 uses])
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 26 25 27 4 (var_location:SI type (reg/v:SI 59 [ type ])) -1
     (nil))
(insn 27 26 28 4 (set (reg/f:DI 69 [ this_8(D)->D.101461.D.78818._vptr.TObject ])
        (mem/f/j:DI (reg/f:DI 65 [ this ]) [0 this_8(D)->D.101461.D.78818._vptr.TObject+0 S8 A64])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 4 (set (mem:SI (reg/f:DI 7 sp) [0 S4 A64])
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 89 {*movsi_internal}
     (nil))
(note 29 28 30 4 NOTE_INSN_DELETED)
(insn 30 29 31 4 (set (reg:SI 38 r9)
        (reg/v:SI 59 [ type ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 59 [ type ])
        (nil)))
(insn 31 30 32 4 (set (reg:DI 37 r8)
        (reg/v/f:DI 60 [ cl ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 60 [ cl ])
        (nil)))
(insn 32 31 33 4 (set (reg:DI 2 cx)
        (reg/v/f:DI 68 [ ptr ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 68 [ ptr ])
        (nil)))
(insn 33 32 34 4 (set (reg:DI 1 dx)
        (reg/v/f:DI 67 [ add ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 67 [ add ])
        (nil)))
(insn 34 33 35 4 (set (reg:DI 4 si)
        (reg/v/f:DI 66 [ bname ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 66 [ bname ])
        (nil)))
(insn 35 34 36 4 (set (reg:DI 5 di)
        (reg/f:DI 65 [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65 [ this ])
        (nil)))
(call_insn 36 35 37 4 (set (reg:SI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 69 [ this_8(D)->D.101461.D.78818._vptr.TObject ])
                        (const_int 1584 [0x630])) [0 MEM[(int (*__vtbl_ptr_type) () *)_9 + 1584B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_10;this_8(D)->198) S1 A8])
            (const_int 8 [0x8]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 672 {*call_value}
     (expr_list:REG_DEAD (reg/f:DI 69 [ this_8(D)->D.101461.D.78818._vptr.TObject ])
        (expr_list:REG_DEAD (reg:SI 38 r9)
            (expr_list:REG_DEAD (reg:DI 37 r8)
                (expr_list:REG_DEAD (reg:DI 5 di)
                    (expr_list:REG_DEAD (reg:DI 4 si)
                        (expr_list:REG_DEAD (reg:DI 2 cx)
                            (expr_list:REG_DEAD (reg:DI 1 dx)
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_BR_PRED (use (reg:SI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0 S4 A64]))
                                (nil)))))))))
(insn 37 36 42 4 (set (reg:SI 63 [ D.158435 ])
        (reg:SI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 42 37 45 4 (set (reg/i:SI 0 ax)
        (reg:SI 63 [ D.158435 ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:532 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 63 [ D.158435 ])
        (nil)))
(insn 45 42 0 4 (use (reg/i:SI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:532 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function Int_t TTree::SetBranchAddress(const char*, T*, TBranch**) [with T = unsigned int; Int_t = int] (_ZN5TTree16SetBranchAddressIjEEiPKcPT_PP7TBranch, funcdef_no=8767, decl_uid=144197, cgraph_uid=4942)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 65: def dominates all uses has unique first use
Reg 66: def dominates all uses has unique first use
Reg 67: def dominates all uses has unique first use
Reg 68: def dominates all uses has unique first use
Reg 60: def dominates all uses has unique first use
Reg 69: local to bb 4 def dominates all uses has unique first use
Reg 63 uninteresting
Reg 60 not local to one basic block
Reg 65 not local to one basic block
Reg 66 not local to one basic block
Reg 67 not local to one basic block
Reg 68 not local to one basic block
Found def insn 27 for 69 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r69: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r69,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r68: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r68,l0) best CREG, allocno GENERAL_REGS
    r67: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r67,l0) best DREG, allocno GENERAL_REGS
    r66: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r66,l0) best SIREG, allocno GENERAL_REGS
    r65: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r65,l0) best DIREG, allocno GENERAL_REGS
    r63: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r63,l0) best AREG, allocno GENERAL_REGS
    r60: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r60,l0) best AREG, allocno GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r59,l0) best AREG, allocno GENERAL_REGS

  a0(r63,l0) costs: AREG:-2000,-2000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a1(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:66535000,66535000 FP_SECOND_SSE_REGS:66535000,66535000 FLOAT_SSE_REGS:66535000,66535000 FLOAT_INT_REGS:66535000,66535000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:66535000,66535000 ALL_REGS:66535000,66535000 MEM:8000,8000
  a2(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-2000,-2000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:67535000,67535000 FP_SECOND_SSE_REGS:67535000,67535000 FLOAT_SSE_REGS:67535000,67535000 FLOAT_INT_REGS:67535000,67535000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:67535000,67535000 ALL_REGS:67535000,67535000 MEM:11000,11000
  a3(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a4(r67,l0) costs: AREG:0,0 DREG:-2000,-2000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a5(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:-2000,-2000 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:26000,26000 SSE_REGS:26000,26000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a6(r60,l0) costs: AREG:-1000,-1000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:39000,39000 SSE_REGS:39000,39000 MMX_REGS:39000,39000 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:39000,39000 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:11000,11000
  a7(r59,l0) costs: AREG:-101,-101 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:27313,27313 SSE_REGS:27313,27313 MMX_REGS:27313,27313 FP_TOP_SSE_REGS:3000000,3000000 FP_SECOND_SSE_REGS:3000000,3000000 FLOAT_SSE_REGS:3000000,3000000 FLOAT_INT_REGS:3000000,3000000 INT_SSE_REGS:27313,27313 FLOAT_INT_SSE_REGS:3000000,3000000 ALL_REGS:3000000,3000000 MEM:7404,7404

   Insn 45(l0): point = 0
   Insn 42(l0): point = 2
   Insn 37(l0): point = 4
   Insn 36(l0): point = 6
   Insn 35(l0): point = 8
   Insn 34(l0): point = 10
   Insn 33(l0): point = 12
   Insn 32(l0): point = 14
   Insn 31(l0): point = 16
   Insn 30(l0): point = 18
   Insn 28(l0): point = 20
   Insn 27(l0): point = 22
   Insn 22(l0): point = 25
   Insn 21(l0): point = 27
   Insn 20(l0): point = 29
   Insn 18(l0): point = 32
   Insn 17(l0): point = 34
   Insn 7(l0): point = 36
   Insn 14(l0): point = 38
   Insn 13(l0): point = 40
   Insn 12(l0): point = 42
   Insn 11(l0): point = 44
   Insn 10(l0): point = 46
   Insn 5(l0): point = 48
   Insn 4(l0): point = 50
   Insn 3(l0): point = 52
   Insn 2(l0): point = 54
 a0(r63): [3..4]
 a1(r69): [7..22]
 a2(r65): [9..54]
 a3(r66): [11..52]
 a4(r67): [13..50]
 a5(r68): [15..48]
 a6(r60): [17..38]
 a7(r59): [32..36] [19..25]
Compressing live ranges: from 57 to 6 - 10%
Ranges after the compression:
 a0(r63): [0..1]
 a1(r69): [2..3]
 a2(r65): [2..5]
 a3(r66): [2..5]
 a4(r67): [2..5]
 a5(r68): [2..5]
 a6(r60): [2..5]
 a7(r59): [2..5]
+++Allocating 56 bytes for conflict table (uncompressed size 64)
;; a0(r63,l0) conflicts:;; a1(r69,l0) conflicts: a2(r65,l0) a3(r66,l0) a4(r67,l0) a5(r68,l0) a6(r60,l0) a7(r59,l0)
;;     total conflict hard regs: 1 2 4 5 37 38
;;     conflict hard regs: 1 2 4 5 37 38

;; a2(r65,l0) conflicts: a1(r69,l0) a3(r66,l0) a4(r67,l0) a5(r68,l0) a6(r60,l0) a7(r59,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a3(r66,l0) conflicts: a1(r69,l0) a2(r65,l0) a4(r67,l0) a5(r68,l0) a6(r60,l0) a7(r59,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a4(r67,l0) conflicts: a1(r69,l0) a2(r65,l0) a3(r66,l0) a5(r68,l0) a6(r60,l0) a7(r59,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a5(r68,l0) conflicts: a1(r69,l0) a2(r65,l0) a3(r66,l0) a4(r67,l0) a6(r60,l0) a7(r59,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a6(r60,l0) conflicts: a1(r69,l0) a2(r65,l0) a3(r66,l0) a4(r67,l0) a5(r68,l0) a7(r59,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a7(r59,l0) conflicts: a1(r69,l0) a2(r65,l0) a3(r66,l0) a4(r67,l0) a5(r68,l0) a6(r60,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=5, points=6
    allocnos=8 (big 0), copies=0, conflicts=0, ranges=8

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 4 3 2
    all: 0r63 1r69 2r65 3r66 4r67 5r68 6r60 7r59
    modified regnos: 59 60 63 65 66 67 68 69
    border:
    Pressure: GENERAL_REGS=7
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@48808
          2:( 0 3 6 39-44)@16000
            3:( 3 6 41-44)@92384
      Allocno a0r63 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a1r69 of GENERAL_REGS(15) has 9 avail. regs  0 3 6 39-44, node:  0 3 6 39-44 (confl regs =  1 2 4 5 7-38 45-51)
      Allocno a2r65 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a3r66 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a4r67 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a5r68 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a6r60 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a7r59 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Pushing a0(r63,l0)(cost 0)
      Pushing a1(r69,l0)(cost 0)
        Making a2(r65,l0) colorable
        Making a3(r66,l0) colorable
        Making a4(r67,l0) colorable
        Making a5(r68,l0) colorable
        Making a6(r60,l0) colorable
      Pushing a5(r68,l0)(cost 7000)
      Pushing a4(r67,l0)(cost 7000)
      Pushing a3(r66,l0)(cost 7000)
      Pushing a7(r59,l0)(cost 0)
      Pushing a6(r60,l0)(cost 14192)
      Pushing a2(r65,l0)(cost 11000)
      Popping a2(r65,l0)  -- assign reg 3
      Popping a6(r60,l0)  -- assign reg 6
      Popping a7(r59,l0)  -- assign reg 38
      Popping a3(r66,l0)  -- assign reg 41
      Popping a4(r67,l0)  -- assign reg 42
      Popping a5(r68,l0)  -- assign reg 43
      Popping a1(r69,l0)  -- assign reg 0
      Popping a0(r63,l0)  -- assign reg 0
Disposition:
    7:r59  l0    38    6:r60  l0     6    0:r63  l0     0    2:r65  l0     3
    3:r66  l0    41    4:r67  l0    42    5:r68  l0    43    1:r69  l0     0
New iteration of spill/restore move
+++Costs: overall -10000, reg -10000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


Int_t TTree::SetBranchAddress(const char*, T*, TBranch**) [with T = unsigned int; Int_t = int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={5d,5u} r1={6d,3u} r2={5d,2u} r4={6d,3u} r5={7d,4u} r6={1d,4u} r7={1d,9u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,3u} r17={4d,1u} r18={3d} r19={3d} r20={1d,4u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={5d,1u} r38={5d,1u} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r59={2d,3u} r60={1d,3u} r63={1d,1u} r65={1d,2u} r66={1d,1u} r67={1d,1u} r68={1d,1u} r69={1d,1u} 
;;    total ref usage 225{172d,53u,0e} in 31{28 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 65 66 67 68
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/f:DI 65 [ this ])
        (reg:DI 5 di [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:527 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 66 [ bname ])
        (reg:DI 4 si [ bname ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:527 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ bname ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 67 [ add ])
        (reg:DI 1 dx [ add ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:527 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ add ])
        (nil)))
(insn 5 4 6 2 (set (reg/v/f:DI 68 [ ptr ])
        (reg:DI 2 cx [ ptr ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:527 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [ ptr ])
        (nil)))
(note 6 5 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 6 11 2 (set (reg:SI 1 dx)
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 89 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 4 si)
        (const_int 1 [0x1])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 89 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZTIj") [flags 0x40]  <var_decl 0x2b94cc1442f8 _ZTIj>)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 87 {*movdi_internal_rex64}
     (nil))
(call_insn 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN6TClass8GetClassERKSt9type_infobb") [flags 0x41]  <function_decl 0x2b94c9f9a100 GetClass>) [0 GetClass S1 A8])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_BR_PRED (use (reg:SI 4 si))
            (expr_list:REG_BR_PRED (use (reg:SI 1 dx))
                (nil)))))
(insn 14 13 15 2 (set (reg/v/f:DI 60 [ cl ])
        (reg:DI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(debug_insn 15 14 16 2 (var_location:DI cl (reg/v/f:DI 60 [ cl ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:528 -1
     (nil))
(debug_insn 16 15 7 2 (var_location:SI type (const_int -1 [0xffffffffffffffff])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:529 -1
     (nil))
(insn 7 16 17 2 (set (reg/v:SI 59 [ type ])
        (const_int -1 [0xffffffffffffffff])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:529 89 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))
(insn 17 7 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 60 [ cl ])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 24)
            (pc))) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_BR_PROB (const_int 8987 [0x231b])
            (nil)))
 -> 24)
;;  succ:       3 [10.1%]  (FALLTHRU)
;;              4 [89.9%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60 65 66 67 68

;; basic block 3, loop depth 0, count 0, freq 1013, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [10.1%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u16(6){ }u17(7){ }u18(16){ }u19(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 65 66 67 68
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZTIj") [flags 0x40]  <var_decl 0x2b94cc1442f8 _ZTIj>)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 87 {*movdi_internal_rex64}
     (nil))
(call_insn 21 20 22 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN9TDataType7GetTypeERKSt9type_info") [flags 0x41]  <function_decl 0x2b94c9541f00 GetType>) [0 GetType S1 A8])
            (const_int 0 [0]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 22 21 23 3 (set (reg/v:SI 59 [ type ])
        (reg:SI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(debug_insn 23 22 24 3 (var_location:SI type (reg/v:SI 59 [ type ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:530 -1
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60 65 66 67 68

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2 [89.9%] 
;;              3 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u24(6){ }u25(7){ }u26(16){ }u27(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60 65 66 67 68
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60 65 66 67 68
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 69
(code_label 24 23 25 4 101 "" [1 uses])
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 26 25 27 4 (var_location:SI type (reg/v:SI 59 [ type ])) -1
     (nil))
(insn 27 26 28 4 (set (reg/f:DI 69 [ this_8(D)->D.101461.D.78818._vptr.TObject ])
        (mem/f/j:DI (reg/f:DI 65 [ this ]) [0 this_8(D)->D.101461.D.78818._vptr.TObject+0 S8 A64])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 4 (set (mem:SI (reg/f:DI 7 sp) [0 S4 A64])
        (const_int 0 [0])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 89 {*movsi_internal}
     (nil))
(note 29 28 30 4 NOTE_INSN_DELETED)
(insn 30 29 31 4 (set (reg:SI 38 r9)
        (reg/v:SI 59 [ type ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 59 [ type ])
        (nil)))
(insn 31 30 32 4 (set (reg:DI 37 r8)
        (reg/v/f:DI 60 [ cl ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 60 [ cl ])
        (nil)))
(insn 32 31 33 4 (set (reg:DI 2 cx)
        (reg/v/f:DI 68 [ ptr ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 68 [ ptr ])
        (nil)))
(insn 33 32 34 4 (set (reg:DI 1 dx)
        (reg/v/f:DI 67 [ add ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 67 [ add ])
        (nil)))
(insn 34 33 35 4 (set (reg:DI 4 si)
        (reg/v/f:DI 66 [ bname ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 66 [ bname ])
        (nil)))
(insn 35 34 36 4 (set (reg:DI 5 di)
        (reg/f:DI 65 [ this ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65 [ this ])
        (nil)))
(call_insn 36 35 37 4 (set (reg:SI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 69 [ this_8(D)->D.101461.D.78818._vptr.TObject ])
                        (const_int 1584 [0x630])) [0 MEM[(int (*__vtbl_ptr_type) () *)_9 + 1584B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_10;this_8(D)->198) S1 A8])
            (const_int 8 [0x8]))) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 672 {*call_value}
     (expr_list:REG_DEAD (reg/f:DI 69 [ this_8(D)->D.101461.D.78818._vptr.TObject ])
        (expr_list:REG_DEAD (reg:SI 38 r9)
            (expr_list:REG_DEAD (reg:DI 37 r8)
                (expr_list:REG_DEAD (reg:DI 5 di)
                    (expr_list:REG_DEAD (reg:DI 4 si)
                        (expr_list:REG_DEAD (reg:DI 2 cx)
                            (expr_list:REG_DEAD (reg:DI 1 dx)
                                (nil))))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 2 cx))
                    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 37 r8))
                        (expr_list:REG_BR_PRED (use (reg:SI 38 r9))
                            (expr_list:REG_BR_PRED (use (mem:SI (reg/f:DI 7 sp) [0 S4 A64]))
                                (nil)))))))))
(insn 37 36 42 4 (set (reg:SI 63 [ D.158439 ])
        (reg:SI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:531 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 42 37 45 4 (set (reg/i:SI 0 ax)
        (reg:SI 63 [ D.158439 ])) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:532 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 63 [ D.158439 ])
        (nil)))
(insn 45 42 0 4 (use (reg/i:SI 0 ax)) /usr/common/usg/software/ROOT/6.08.00/include/root/TTree.h:532 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

